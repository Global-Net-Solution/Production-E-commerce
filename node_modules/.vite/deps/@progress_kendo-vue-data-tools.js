import {
  DropDownList
} from "./chunk-GBCJSHI5.js";
import {
  FloatingLabel,
  NumericTextBox,
  TextBox
} from "./chunk-F4KQQXRR.js";
import "./chunk-GF6DAX6V.js";
import "./chunk-N2BHQMG5.js";
import {
  filterBy,
  isCompositeFilterDescriptor,
  orderBy
} from "./chunk-XGAUV64P.js";
import "./chunk-6VUHRQNW.js";
import {
  provideIntlService,
  provideLocalizationService
} from "./chunk-THIIK72K.js";
import {
  Button,
  ButtonGroup,
  Toolbar,
  ToolbarItem
} from "./chunk-7VRDKQTF.js";
import {
  Popup
} from "./chunk-GJ6HAU5M.js";
import {
  calendarIcon,
  cancelIcon,
  caretAltDownIcon,
  caretAltLeftIcon,
  caretAltRightIcon,
  caretAltToLeftIcon,
  caretAltToRightIcon,
  caretAltUpIcon,
  chevronLeftIcon,
  chevronRightIcon,
  filterAddExpressionIcon,
  filterAddGroupIcon,
  filterClearIcon,
  filterIcon,
  moreVerticalIcon,
  plusIcon,
  sortAscSmallIcon,
  sortDescSmallIcon,
  xIcon
} from "./chunk-47B67J5V.js";
import {
  Reveal
} from "./chunk-REROCCI6.js";
import {
  BrowserSupportService,
  Draggable,
  Icon,
  Keys,
  canUseDOM,
  classNames,
  cloneDate,
  extendDataItem,
  getDefaultSlots,
  getIconName,
  getListeners,
  getRef,
  getTemplate,
  guid,
  hasListener,
  hasRelativeStackingContext,
  isObject,
  isRtl,
  kendoThemeMaps,
  mapTree,
  noop,
  setRef,
  templateRendering,
  validatePackage
} from "./chunk-PN6HPW3N.js";
import {
  vue_runtime_esm_bundler_exports
} from "./chunk-VQMFKZS3.js";
import "./chunk-PZ5AY32C.js";

// node_modules/@progress/kendo-vue-data-tools/dist/es/messages/main.js
var _a;
var columnMenu = "grid.columnMenu";
var pagerInfo = "pager.info";
var pagerFirstPage = "pager.firstPage";
var pagerPreviousPage = "pager.previousPage";
var pagerNextPage = "pager.nextPage";
var pagerLastPage = "pager.lastPage";
var pagerItemPerPage = "pager.itemsPerPage";
var pagerPageInputAriaLabel = "pager.pageInputAriaLabel";
var pagerSmallPageSelectorAriaLabel = "pager.smallPageSelectorAriaLabel";
var pagerPageSelection = "pager.pageSelection";
var pagerPage = "pager.page";
var pagerOf = "pager.of";
var pagerTotalPages = "pager.totalPages";
var filterEqOperator = "filter.eqOperator";
var filterGroupFilterAriaLabel = "filter.groupFilterAriaLabel";
var filterNotEqOperator = "filter.notEqOperator";
var filterIsNullOperator = "filter.isNullOperator";
var filterIsNotNullOperator = "filter.isNotNullOperator";
var filterIsEmptyOperator = "filter.isEmptyOperator";
var filterIsNotEmptyOperator = "filter.isNotEmptyOperator";
var filterStartsWithOperator = "filter.startsWithOperator";
var filterContainsOperator = "filter.containsOperator";
var filterNotContainsOperator = "filter.notContainsOperator";
var filterEndsWithOperator = "filter.endsWithOperator";
var filterGteOperator = "filter.gteOperator";
var filterGtOperator = "filter.gtOperator";
var filterLteOperator = "filter.lteOperator";
var filterLtOperator = "filter.ltOperator";
var filterIsTrue = "filter.isTrue";
var filterIsFalse = "filter.isFalse";
var filterAfterOrEqualOperator = "filter.afterOrEqualOperator";
var filterAfterOperator = "filter.afterOperator";
var filterBeforeOperator = "filter.beforeOperator";
var filterBeforeOrEqualOperator = "filter.beforeOrEqualOperator";
var filterAndLogic = "filter.andLogic";
var filterOrLogic = "filter.orLogic";
var filterAddExpression = "filter.addExpression";
var filterAddGroup = "filter.addGroup";
var filterClose = "filter.close";
var columnMenuFilterChooseOperator = "columnMenu.filterChooseOperator";
var columnMenuFilterClearButton = "columnMenu.filterClearButton";
var columnMenuFilterSubmitButton = "columnMenu.filterSubmitButton";
var columnMenuFilterTitle = "columnMenu.filterTitle";
var columnMenuSortAscending = "columnMenu.sortAscending";
var columnMenuSortDescending = "columnMenu.sortDescending";
var columnMenuFilterEqOperator = "columnMenu.filterEqOperator";
var columnMenuFilterNotEqOperator = "columnMenu.filterNotEqOperator";
var columnMenuFilterIsNullOperator = "columnMenu.filterIsNullOperator";
var columnMenuFilterIsNotNullOperator = "columnMenu.filterIsNotNullOperator";
var columnMenuFilterIsEmptyOperator = "columnMenu.filterIsEmptyOperator";
var columnMenuFilterIsNotEmptyOperator = "columnMenu.filterIsNotEmptyOperator";
var columnMenuFilterStartsWithOperator = "columnMenu.filterStartsWithOperator";
var columnMenuFilterContainsOperator = "columnMenu.filterContainsOperator";
var columnMenuFilterNotContainsOperator = "columnMenu.filterNotContainsOperator";
var columnMenuFilterEndsWithOperator = "columnMenu.filterEndsWithOperator";
var columnMenuFilterGteOperator = "columnMenu.filterGteOperator";
var columnMenuFilterGtOperator = "columnMenu.filterGtOperator";
var columnMenuFilterLteOperator = "columnMenu.filterLteOperator";
var columnMenuFilterLtOperator = "columnMenu.filterLtOperator";
var columnMenuFilterIsTrue = "columnMenu.filterIsTrue";
var columnMenuFilterAfterOrEqualOperator = "columnMenu.filterAfterOrEqualOperator";
var columnMenuFilterAfterOperator = "columnMenu.filterAfterOperator";
var columnMenuFilterBeforeOperator = "columnMenu.filterBeforeOperator";
var columnMenuFilterBeforeOrEqualOperator = "columnMenu.filterBeforeOrEqualOperator";
var columnMenuFilterAndLogic = "columnMenu.filterAndLogic";
var columnMenuFilterOrLogic = "columnMenu.filterOrLogic";
var searchPlaceholder = "grid.searchPlaceholder";
var selectAllRows = "grid.selectAllRows";
var filterCheckAll = "grid.filterCheckAll";
var sortAriaLabel = "sort.ariaLabel";
var filterAriaLabel = "filter.ariaLabel";
var filterGroupAriaLabel = "filter.groupAriaLabel";
var filterExpressionAriaLabel = "filter.expressionAriaLabel";
var filterExpressionDropdownAriaLabel = "filter.expressionDropdownAriaLabel";
var filterExpressionOperatorDropdownAriaLabel = "filter.expressionOperatorDropdownAriaLabel";
var filterEnumFilterDropdownAriaLabel = "filter.enumFilterDropdownAriaLabel";
var filterNumericFilterAriaLabel = "filter.numericFilterAriaLabel";
var filterTextFilterAriaLabel = "filter.textFilterAriaLabel";
var filterDateFilterAriaLabel = "filter.dateFilterAriaLabel";
var filterDropDownOperatorAriaLabel = "filter.dropdownOperatorAriaLabel";
var messages = (_a = {}, _a[filterGroupFilterAriaLabel] = "Group Filter", _a[pagerSmallPageSelectorAriaLabel] = "Select page", _a[pagerPageInputAriaLabel] = "Pager - Page number input", _a[pagerItemPerPage] = "items per page", _a[pagerPageSelection] = "Select page", _a[pagerInfo] = "{0} - {1} of {2} items", _a[pagerFirstPage] = "Go to the first page", _a[pagerPreviousPage] = "Go to the previous page", _a[pagerNextPage] = "Go to the next page", _a[pagerLastPage] = "Go to the last page", _a[pagerPage] = "Page", _a[pagerOf] = "of", _a[pagerTotalPages] = "{0}", _a[searchPlaceholder] = "Search", _a[selectAllRows] = "Select All Rows", _a[filterCheckAll] = "Check All", _a[sortAriaLabel] = "Sortable", _a[filterAriaLabel] = "Filter", _a[filterEqOperator] = "Is equal to", _a[filterNotEqOperator] = "Is not equal to", _a[filterIsNullOperator] = "Is null", _a[filterIsNotNullOperator] = "Is not null", _a[filterIsEmptyOperator] = "Is empty", _a[filterIsNotEmptyOperator] = "Is not empty", _a[filterStartsWithOperator] = "Starts with", _a[filterContainsOperator] = "Contains", _a[filterNotContainsOperator] = "Does not contain", _a[filterEndsWithOperator] = "Ends with", _a[filterGteOperator] = "Is greater than or equal to", _a[filterGtOperator] = "Is greater than", _a[filterLteOperator] = "Is less than or equal to", _a[filterLtOperator] = "Is less than", _a[filterIsTrue] = "Is true", _a[filterIsFalse] = "Is false", _a[filterAfterOrEqualOperator] = "Is after or equal to", _a[filterAfterOperator] = "Is after", _a[filterBeforeOperator] = "Is before", _a[filterBeforeOrEqualOperator] = "Is before or equal to", _a[filterAndLogic] = "And", _a[filterOrLogic] = "Or", _a[filterAddExpression] = "Add Expression", _a[filterAddGroup] = "Add Group", _a[filterClose] = "Remove", _a[filterGroupAriaLabel] = "Filter toolbar", _a[filterExpressionAriaLabel] = "Filter expression row", _a[filterExpressionDropdownAriaLabel] = "Filter dropdown", _a[filterExpressionOperatorDropdownAriaLabel] = "Filter operator dropdown", _a[filterEnumFilterDropdownAriaLabel] = "Select True/False", _a[filterNumericFilterAriaLabel] = "Enter number", _a[filterTextFilterAriaLabel] = "Enter text", _a[filterDateFilterAriaLabel] = "Enter date", _a[filterDropDownOperatorAriaLabel] = "Choose Operator", _a[columnMenuFilterChooseOperator] = "Choose Operator", _a[columnMenuFilterClearButton] = "Clear", _a[columnMenuFilterSubmitButton] = "Filter", _a[columnMenuFilterTitle] = "Filter", _a[columnMenuSortAscending] = "Sort Ascending", _a[columnMenuSortDescending] = "Sort Descending", _a[columnMenuFilterEqOperator] = "Is equal to", _a[columnMenuFilterNotEqOperator] = "Is not equal to", _a[columnMenuFilterIsNullOperator] = "Is null", _a[columnMenuFilterIsNotNullOperator] = "Is not null", _a[columnMenuFilterIsEmptyOperator] = "Is empty", _a[columnMenuFilterIsNotEmptyOperator] = "Is not empty", _a[columnMenuFilterStartsWithOperator] = "Starts with", _a[columnMenuFilterContainsOperator] = "Contains", _a[columnMenuFilterNotContainsOperator] = "Does not contain", _a[columnMenuFilterEndsWithOperator] = "Ends with", _a[columnMenuFilterGteOperator] = "Is greater than or equal to", _a[columnMenuFilterGtOperator] = "Is greater than", _a[columnMenuFilterLteOperator] = "Is less than or equal to", _a[columnMenuFilterLtOperator] = "Is less than", _a[columnMenuFilterIsTrue] = "Is true", _a[columnMenuFilterAfterOrEqualOperator] = "Is after or equal to", _a[columnMenuFilterAfterOperator] = "Is after", _a[columnMenuFilterBeforeOperator] = "Is before", _a[columnMenuFilterBeforeOrEqualOperator] = "Is before or equal to", _a[columnMenuFilterAndLogic] = "And", _a[columnMenuFilterOrLogic] = "Or", _a["grid.filterEqOperator"] = "Is equal to", _a["grid.filterNotEqOperator"] = "Is not equal to", _a["grid.filterIsNullOperator"] = "Is null", _a["grid.filterIsNotNullOperator"] = "Is not null", _a["grid.filterIsEmptyOperator"] = "Is empty", _a["grid.filterIsNotEmptyOperator"] = "Is not empty", _a["grid.filterStartsWithOperator"] = "Starts with", _a["grid.filterContainsOperator"] = "Contains", _a["grid.filterNotContainsOperator"] = "Does not contain", _a["grid.filterEndsWithOperator"] = "Ends with", _a["grid.filterGteOperator"] = "Is greater than or equal to", _a["grid.filterGtOperator"] = "Is greater than", _a["grid.filterLteOperator"] = "Is less than or equal to", _a["grid.filterLtOperator"] = "Is less than", _a["grid.filterIsTrue"] = "Is true", _a["grid.filterIsFalse"] = "Is false", _a["grid.filterBooleanAll"] = "(All)", _a["grid.filterAfterOrEqualOperator"] = "Is after or equal to", _a["grid.filterAfterOperator"] = "Is after", _a["grid.filterBeforeOperator"] = "Is before", _a["grid.filterBeforeOrEqualOperator"] = "Is before or equal to", _a["grid.filterAndLogic"] = "And", _a["grid.filterOrLogic"] = "Or", _a);

// node_modules/@progress/kendo-vue-data-tools/dist/es/filter/filters/TextFilter.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var allVue = vue_runtime_esm_bundler_exports;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === "3";
var TextFilterVue2 = {
  name: "kendoTextFilter",
  props: {
    filter: {
      type: Object,
      required: true
    },
    ariaLabel: String
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV3 ? void 0 : function() {
    var v3 = !!isV3;
    return {
      v3
    };
  },
  render: function render(createElement) {
    var h = gh || createElement;
    var locService = provideLocalizationService(this);
    var _a11 = this.$props.ariaLabel, ariaLabel = _a11 === void 0 ? locService.toLanguageString(filterTextFilterAriaLabel, messages[filterTextFilterAriaLabel]) : _a11;
    return (
      // @ts-ignore
      h(TextBox, {
        value: this.$props.filter.value || "",
        attrs: this.v3 ? void 0 : {
          value: this.$props.filter.value || "",
          ariaLabel
        },
        onInput: this.onChange,
        on: this.v3 ? void 0 : {
          "input": this.onChange
        },
        ariaLabel
      })
    );
  },
  methods: {
    onChange: function onChange(event2) {
      this.$emit("filterchange", {
        nextFilter: __assign(__assign({}, this.$props.filter), {
          value: event2.value
        })
      });
    }
  }
};
var TextFilter = TextFilterVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/filter/filters/NumericFilter.js
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
var allVue2 = vue_runtime_esm_bundler_exports;
var gh2 = allVue2.h;
var isV32 = allVue2.version && allVue2.version[0] === "3";
var NumericFilterVue2 = {
  name: "kendoNumericFilter",
  props: {
    filter: {
      type: Object,
      required: true
    }
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV32 ? void 0 : function() {
    var v3 = !!isV32;
    return {
      v3
    };
  },
  render: function render2(createElement) {
    var h = gh2 || createElement;
    var filter = this.$props.filter;
    var ls = provideLocalizationService(this);
    var ariaLabel = ls.toLanguageString(filterNumericFilterAriaLabel, messages[filterNumericFilterAriaLabel]);
    return (
      // @ts-ignore
      h(NumericTextBox, {
        value: typeof filter.value === "number" ? filter.value : null,
        attrs: this.v3 ? void 0 : {
          value: typeof filter.value === "number" ? filter.value : null,
          ariaLabel
        },
        onChange: this.onChange,
        on: this.v3 ? void 0 : {
          "change": this.onChange
        },
        ariaLabel
      })
    );
  },
  methods: {
    onChange: function onChange2(event2) {
      this.$emit("filterchange", {
        nextFilter: __assign2(__assign2({}, this.$props.filter), {
          value: event2.value
        })
      });
    }
  }
};
var NumericFilter = NumericFilterVue2;

// node_modules/@progress/kendo-date-math/dist/es/clone-date.js
var cloneDate2 = function(date2) {
  return date2 ? new Date(date2.getTime()) : null;
};

// node_modules/@progress/kendo-date-math/dist/es/adjust-dst.js
var adjustDST = function(date2, hour) {
  var newDate = cloneDate2(date2);
  if (hour === 0 && newDate.getHours() === 23) {
    newDate.setHours(newDate.getHours() + 2);
  }
  return newDate;
};

// node_modules/@progress/kendo-date-math/dist/es/add-days.js
var addDays = function(date2, offset2) {
  var newDate = cloneDate2(date2);
  newDate.setDate(newDate.getDate() + offset2);
  return adjustDST(newDate, date2.getHours());
};

// node_modules/@progress/kendo-date-math/dist/es/create-date.js
var createDate = function(year, month, day, hours, minutes, seconds, milliseconds) {
  if (hours === void 0) {
    hours = 0;
  }
  if (minutes === void 0) {
    minutes = 0;
  }
  if (seconds === void 0) {
    seconds = 0;
  }
  if (milliseconds === void 0) {
    milliseconds = 0;
  }
  var date2 = new Date(year, month, day, hours, minutes, seconds, milliseconds);
  if (year > -1 && year < 100) {
    date2.setFullYear(date2.getFullYear() - 1900);
  }
  return adjustDST(date2, hours);
};

// node_modules/@progress/kendo-date-math/dist/es/last-day-of-month.js
var lastDayOfMonth = function(date2) {
  var newDate = createDate(date2.getFullYear(), date2.getMonth() + 1, 1, date2.getHours(), date2.getMinutes(), date2.getSeconds(), date2.getMilliseconds());
  return addDays(newDate, -1);
};

// node_modules/@progress/kendo-date-math/dist/es/add-months.js
var MONTHS_LENGTH = 12;
var normalize = function(date2, expectedMonth) {
  return date2.getMonth() !== expectedMonth ? lastDayOfMonth(addMonths(date2, -1)) : date2;
};
var addMonths = function(date2, offset2) {
  var newDate = cloneDate2(date2);
  var diff = (newDate.getMonth() + offset2) % MONTHS_LENGTH;
  var expectedMonth = (MONTHS_LENGTH + diff) % MONTHS_LENGTH;
  newDate.setMonth(newDate.getMonth() + offset2);
  return normalize(adjustDST(newDate, date2.getHours()), expectedMonth);
};

// node_modules/@progress/kendo-date-math/dist/es/set-year.js
var setYear = function(value2, year) {
  var month = value2.getMonth();
  var candidate = createDate(year, month, value2.getDate(), value2.getHours(), value2.getMinutes(), value2.getSeconds(), value2.getMilliseconds());
  return candidate.getMonth() === month ? candidate : lastDayOfMonth(addMonths(candidate, -1));
};

// node_modules/@progress/kendo-date-math/dist/es/add-years.js
var addYears = function(value2, offset2) {
  return adjustDST(setYear(value2, value2.getFullYear() + offset2), value2.getHours());
};

// node_modules/@progress/kendo-date-math/dist/es/add-centuries.js
var addCenturies = function(value2, offset2) {
  return addYears(value2, 100 * offset2);
};

// node_modules/@progress/kendo-date-math/dist/es/add-decades.js
var addDecades = function(value2, offset2) {
  return addYears(value2, 10 * offset2);
};

// node_modules/@progress/kendo-date-math/dist/es/add-weeks.js
var addWeeks = function(date2, offset2) {
  return addDays(date2, offset2 * 7);
};

// node_modules/@progress/kendo-date-math/dist/es/constants.js
var MS_PER_MINUTE = 6e4;
var MS_PER_HOUR = 36e5;
var MS_PER_DAY = 864e5;

// node_modules/@progress/kendo-date-math/dist/es/direction.enum.js
var Direction;
(function(Direction4) {
  Direction4[Direction4["Forward"] = 1] = "Forward";
  Direction4[Direction4["Backward"] = -1] = "Backward";
})(Direction || (Direction = {}));

// node_modules/@progress/kendo-date-math/dist/es/day-of-week.js
var dayOfWeek = function(date2, weekDay, direction) {
  if (direction === void 0) {
    direction = Direction.Forward;
  }
  var newDate = cloneDate2(date2);
  var newDay = (weekDay - newDate.getDay() + 7 * direction) % 7;
  newDate.setDate(newDate.getDate() + newDay);
  return adjustDST(newDate, date2.getHours());
};

// node_modules/@progress/kendo-date-math/dist/es/day.enum.js
var Day;
(function(Day2) {
  Day2[Day2["Sunday"] = 0] = "Sunday";
  Day2[Day2["Monday"] = 1] = "Monday";
  Day2[Day2["Tuesday"] = 2] = "Tuesday";
  Day2[Day2["Wednesday"] = 3] = "Wednesday";
  Day2[Day2["Thursday"] = 4] = "Thursday";
  Day2[Day2["Friday"] = 5] = "Friday";
  Day2[Day2["Saturday"] = 6] = "Saturday";
})(Day || (Day = {}));

// node_modules/@progress/kendo-date-math/dist/es/normalize-year.js
var normalizeYear = function(value2, year) {
  return setYear(value2, year(value2.getFullYear()));
};

// node_modules/@progress/kendo-date-math/dist/es/first-decade-of-century.js
var firstDecadeOfCentury = function(value2) {
  return normalizeYear(value2, function(y) {
    return y - y % 100;
  });
};

// node_modules/@progress/kendo-date-math/dist/es/duration-in-centuries.js
var durationInCenturies = function(start2, end2) {
  return (firstDecadeOfCentury(end2).getFullYear() - firstDecadeOfCentury(start2).getFullYear()) / 100;
};

// node_modules/@progress/kendo-date-math/dist/es/first-year-of-decade.js
var firstYearOfDecade = function(value2) {
  return normalizeYear(value2, function(y) {
    return y - y % 10;
  });
};

// node_modules/@progress/kendo-date-math/dist/es/duration-in-decades.js
var durationInDecades = function(start2, end2) {
  return (firstYearOfDecade(end2).getFullYear() - firstYearOfDecade(start2).getFullYear()) / 10;
};

// node_modules/@progress/kendo-date-math/dist/es/duration-in-months.js
var durationInMonths = function(start2, end2) {
  return (end2.getFullYear() - start2.getFullYear()) * 12 + (end2.getMonth() - start2.getMonth());
};

// node_modules/@progress/kendo-date-math/dist/es/duration-in-years.js
var durationInYears = function(start2, end2) {
  return end2.getFullYear() - start2.getFullYear();
};

// node_modules/@progress/kendo-date-math/dist/es/first-day-of-month.js
var firstDayOfMonth = function(date2) {
  return createDate(date2.getFullYear(), date2.getMonth(), 1, date2.getHours(), date2.getMinutes(), date2.getSeconds(), date2.getMilliseconds());
};

// node_modules/@progress/kendo-date-math/dist/es/set-month.js
var setMonth = function(value2, month) {
  var day = value2.getDate();
  var candidate = createDate(value2.getFullYear(), month, day, value2.getHours(), value2.getMinutes(), value2.getSeconds(), value2.getMilliseconds());
  return candidate.getDate() === day ? candidate : lastDayOfMonth(addMonths(candidate, -1));
};

// node_modules/@progress/kendo-date-math/dist/es/first-month-of-year.js
var firstMonthOfYear = function(value2) {
  return setMonth(value2, 0);
};

// node_modules/@progress/kendo-date-math/dist/es/get-date.js
var getDate = function(date2) {
  return createDate(date2.getFullYear(), date2.getMonth(), date2.getDate(), 0, 0, 0);
};

// node_modules/@progress/kendo-date-math/dist/es/is-equal.js
var isEqual = function(candidate, expected) {
  if (!candidate && !expected) {
    return true;
  }
  return candidate && expected && candidate.getTime() === expected.getTime();
};

// node_modules/@progress/kendo-date-math/dist/es/is-equal-date.js
var isEqualDate = function(candidate, expected) {
  if (!candidate && !expected) {
    return true;
  }
  return candidate && expected && isEqual(getDate(candidate), getDate(expected));
};

// node_modules/@progress/kendo-date-math/dist/es/last-decade-of-century.js
var lastDecadeOfCentury = function(value2) {
  return normalizeYear(value2, function(y) {
    return y - y % 100 + 90;
  });
};

// node_modules/@progress/kendo-date-math/dist/es/last-month-of-year.js
var lastMonthOfYear = function(value2) {
  return setMonth(value2, 11);
};

// node_modules/@progress/kendo-date-math/dist/es/last-year-of-decade.js
var lastYearOfDecade = function(value2) {
  return normalizeYear(value2, function(y) {
    return y - y % 10 + 9;
  });
};

// node_modules/@progress/kendo-date-math/dist/es/prev-day-of-week.js
var prevDayOfWeek = function(date2, weekDay) {
  return dayOfWeek(date2, weekDay, Direction.Backward);
};

// node_modules/@progress/kendo-date-math/dist/es/tz/timezones.js
var timezones = {
  rules: {},
  titles: {},
  zones: {}
};

// node_modules/@progress/kendo-date-math/dist/es/tz/rule-to-date.js
var MONTHS = { Jan: 0, Feb: 1, Mar: 2, Apr: 3, May: 4, Jun: 5, Jul: 6, Aug: 7, Sep: 8, Oct: 9, Nov: 10, Dec: 11 };
var DAYS = { Sun: 0, Mon: 1, Tue: 2, Wed: 3, Thu: 4, Fri: 5, Sat: 6 };
var MS_PER_MINUTE2 = 6e4;
var ruleToDate = function(year, rule, zoneOffset) {
  var month = rule[3];
  var on = rule[4];
  var time2 = rule[5];
  var date2;
  var ruleOffset = time2[3] === "u" ? -zoneOffset * MS_PER_MINUTE2 : 0;
  if (!isNaN(on)) {
    date2 = new Date(Date.UTC(year, MONTHS[month], on, time2[0], time2[1], time2[2]) + ruleOffset);
  } else if (on.indexOf("last") === 0) {
    date2 = new Date(Date.UTC(year, MONTHS[month] + 1, 1, time2[0] - 24, time2[1], time2[2]) + ruleOffset);
    var targetDay = DAYS[on.substr(4, 3)];
    var ourDay = date2.getUTCDay();
    date2.setUTCDate(date2.getUTCDate() + targetDay - ourDay - (targetDay > ourDay ? 7 : 0));
  } else if (on.indexOf(">=") >= 0) {
    date2 = new Date(Date.UTC(year, MONTHS[month], on.substr(5), time2[0], time2[1], time2[2], 0) + ruleOffset);
    var targetDay = DAYS[on.substr(0, 3)];
    var ourDay = date2.getUTCDay();
    date2.setUTCDate(date2.getUTCDate() + targetDay - ourDay + (targetDay < ourDay ? 7 : 0));
  }
  return date2;
};

// node_modules/@progress/kendo-date-math/dist/es/tz/find-rule.js
var CURRENT_UTC_TIME = (/* @__PURE__ */ new Date()).getTime();
var findRule = function(zoneRule, utcTime, zoneOffset) {
  if (utcTime === void 0) {
    utcTime = CURRENT_UTC_TIME;
  }
  if (zoneOffset === void 0) {
    zoneOffset = 0;
  }
  var rules = timezones.rules[zoneRule];
  if (!rules) {
    var time2 = zoneRule.split(":");
    var offset2 = 0;
    if (time2.length > 1) {
      offset2 = time2[0] * 60 + Number(time2[1]);
    }
    return [-1e6, "max", "-", "Jan", 1, [0, 0, 0], offset2, "-"];
  }
  var year = new Date(utcTime).getUTCFullYear();
  rules = rules.filter(function(currentRule) {
    var from = currentRule[0];
    var to = currentRule[1];
    return from <= year && (to >= year || from === year && to === "only" || to === "max");
  });
  rules.push(utcTime);
  rules.sort(function(a, b) {
    if (typeof a !== "number") {
      a = Number(ruleToDate(year, a, zoneOffset));
    }
    if (typeof b !== "number") {
      b = Number(ruleToDate(year, b, zoneOffset));
    }
    return a - b;
  });
  var rule = rules[rules.indexOf(utcTime) - 1] || rules[rules.length - 1];
  return isNaN(rule) ? rule : null;
};

// node_modules/@progress/kendo-date-math/dist/es/errors.js
var NO_TZ_INFO = "The required {0} timezone information is not provided!";
var formatRegExp = /\{(\d+)}?\}/g;
var flatten = function(arr) {
  return arr.reduce(function(a, b) {
    return a.concat(b);
  }, []);
};
var formatMessage = function(message) {
  var values = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    values[_i - 1] = arguments[_i];
  }
  var flattenValues = flatten(values);
  return message.replace(formatRegExp, function(_, index) {
    return flattenValues[parseInt(index, 10)];
  });
};

// node_modules/@progress/kendo-date-math/dist/es/tz/get-zone.js
var getZoneRules = function(timezone) {
  var zones = timezones.zones;
  if (!zones) {
    throw new Error(formatMessage(NO_TZ_INFO, timezone));
  }
  var zoneRules = zones[timezone];
  var result = typeof zoneRules === "string" ? zones[zoneRules] : zoneRules;
  if (!result) {
    throw new Error(formatMessage(NO_TZ_INFO, timezone));
  }
  return result;
};

// node_modules/@progress/kendo-date-math/dist/es/tz/find-zone.js
var findZone = function(timezone, utcTime) {
  if (utcTime === void 0) {
    utcTime = (/* @__PURE__ */ new Date()).getTime();
  }
  if (timezone === "Etc/UTC" || timezone === "Etc/GMT") {
    return [0, "-", "UTC", null];
  }
  var zoneRules = getZoneRules(timezone);
  var idx = zoneRules.length - 1;
  for (; idx >= 0; idx--) {
    var until = zoneRules[idx][3];
    if (until && utcTime > until) {
      break;
    }
  }
  var zone = zoneRules[idx + 1];
  if (!zone) {
    throw new Error(formatMessage(NO_TZ_INFO, timezone));
  }
  return zone;
};

// node_modules/@progress/kendo-date-math/dist/es/tz/zone-and-rule.js
var zoneAndRule = function(timezone, date2) {
  var utcTime = date2.getTime();
  var zone = findZone(timezone, utcTime);
  return {
    rule: findRule(zone[1], utcTime, zone[0]),
    zone
  };
};

// node_modules/@progress/kendo-date-math/dist/es/tz/abbr-timezone.js
var abbrTimezone = function(timezone, date2) {
  if (date2 === void 0) {
    date2 = /* @__PURE__ */ new Date();
  }
  if (timezone === "Etc/UTC") {
    return "UTC";
  }
  if (timezone === "Etc/GMT") {
    return "GMT";
  }
  if (timezone === "") {
    return "";
  }
  var _a11 = zoneAndRule(timezone, date2), zone = _a11.zone, rule = _a11.rule;
  var base = zone[2];
  if (base.indexOf("/") >= 0) {
    return base.split("/")[rule && +rule[6] ? 1 : 0];
  } else if (base.indexOf("%s") >= 0) {
    return base.replace("%s", !rule || rule[7] === "-" ? "" : rule[7]);
  }
  return base;
};

// node_modules/@progress/kendo-date-math/dist/es/tz/offset.js
var offset = function(timezone, date2) {
  if (date2 === void 0) {
    date2 = /* @__PURE__ */ new Date();
  }
  if (timezone === "Etc/UTC" || timezone === "Etc/GMT") {
    return 0;
  }
  if (timezone === "") {
    return date2.getTimezoneOffset();
  }
  var _a11 = zoneAndRule(timezone, date2), rule = _a11.rule, zone = _a11.zone;
  return parseFloat(rule ? zone[0] - rule[6] : zone[0]);
};

// node_modules/@progress/kendo-date-math/dist/es/tz/to-local-date.js
function toLocalDate(date2) {
  return new Date(date2.getUTCFullYear(), date2.getUTCMonth(), date2.getUTCDate(), date2.getUTCHours(), date2.getUTCMinutes(), date2.getUTCSeconds(), date2.getUTCMilliseconds());
}

// node_modules/@progress/kendo-date-math/dist/es/tz/zoned-date.js
var addMinutes = function(date2, minutes) {
  return new Date(date2.getTime() + minutes * MS_PER_MINUTE);
};
var addHours = function(date2, hours) {
  return new Date(date2.getTime() + hours * MS_PER_HOUR);
};
var dayAbbr = [
  "Sun",
  "Mon",
  "Tue",
  "Wed",
  "Thu",
  "Fri",
  "Sat"
];
var monthAbbr = [
  "Jan",
  "Feb",
  "Mar",
  "Apr",
  "May",
  "Jun",
  "Jul",
  "Aug",
  "Sep",
  "Oct",
  "Nov",
  "Dec"
];
var datePrefix = function(utcDate) {
  return dayAbbr[utcDate.getUTCDay()] + " " + monthAbbr[utcDate.getUTCMonth()];
};
var padNumber = function(num, len) {
  if (len === void 0) {
    len = 2;
  }
  var sign = num < 0 ? "-" : "";
  return sign + new Array(len).concat([Math.abs(num)]).join("0").slice(-len);
};
function isZoneMissingHour(date2, timezone) {
  var currentOffset = offset(timezone, date2);
  var prevHour = addHours(date2, -1);
  var prevOffset = offset(timezone, prevHour);
  return currentOffset < prevOffset;
}
function shiftZoneMissingHour(utcDate, timezone) {
  var dstOffset = isZoneMissingHour(utcDate, timezone) ? 1 : 0;
  return addHours(utcDate, dstOffset);
}
function convertTimezoneUTC(utcLocal, fromTimezone, toTimezone) {
  if (fromTimezone === toTimezone) {
    return utcLocal;
  }
  var fromOffset = offset(fromTimezone, utcLocal);
  var toOffset = offset(toTimezone, utcLocal);
  var baseDiff = fromOffset - toOffset;
  var midDate = addMinutes(utcLocal, baseDiff);
  var midOffset = offset(toTimezone, midDate);
  var dstDiff = toOffset - midOffset;
  return addMinutes(utcLocal, baseDiff + dstDiff);
}
function formatOffset(tzOffset) {
  var sign = tzOffset <= 0 ? "+" : "-";
  var value2 = Math.abs(tzOffset);
  var hours = padNumber(Math.floor(value2 / 60));
  var minutes = padNumber(value2 % 60);
  return "GMT" + sign + hours + minutes;
}
var ZonedDate = (
  /** @class */
  function() {
    function ZonedDate2(utcDate, timezone) {
      this._utcDate = cloneDate2(utcDate);
      this.timezone = timezone;
      var tzOffset = offset(timezone, utcDate);
      this.timezoneOffset = tzOffset;
      var localDate = shiftZoneMissingHour(utcDate, timezone);
      this._localDate = convertTimezoneUTC(localDate, timezone, "Etc/UTC");
    }
    Object.defineProperty(ZonedDate2.prototype, "cachedLocalDate", {
      /**
       * Returns a cached local date that denotes the exact time in the set timezone.
       *
       * @return Date - A local date that denotes the exact time in the set timezone.
       *
       * This property is an alternative to `toLocalDate()` that returns a cached value instead of cloning it.
       *
       * > Modifying the returned instance will corrupt the `ZonedDate` state.
       */
      get: function() {
        return this._localDate;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ZonedDate2.prototype, "cachedUTCDate", {
      /**
       * Returns a cached `Date` instance with UTC date parts that are set to the local time in the set timezone.
       *
       * @returns Date - A `Date` with UTC date parts that are set to the local time in the set timezone.
       *
       * This property is an alternative to `toUTCDate()` that returns a cached value instead of cloning it.
       *
       * > Modifying the returned instance will corrupt the `ZonedDate` state.
       */
      get: function() {
        return this._utcDate;
      },
      enumerable: true,
      configurable: true
    });
    ZonedDate2.fromLocalDate = function(date2, timezone) {
      if (timezone === void 0) {
        timezone = "";
      }
      var utcDate = convertTimezoneUTC(date2, "Etc/UTC", timezone);
      var shiftZone = isZoneMissingHour(utcDate, timezone);
      var zoneOffset = offset(timezone, utcDate);
      var fixedOffset = 0;
      if (shiftZone) {
        fixedOffset = zoneOffset > 0 ? -1 : 1;
      }
      var adjDate = addHours(utcDate, fixedOffset);
      return ZonedDate2.fromUTCDate(adjDate, timezone);
    };
    ZonedDate2.fromUTCDate = function(utcDate, timezone) {
      if (timezone === void 0) {
        timezone = "";
      }
      return new ZonedDate2(utcDate, timezone);
    };
    ZonedDate2.prototype.toLocalDate = function() {
      return cloneDate2(this._localDate);
    };
    ZonedDate2.prototype.toUTCDate = function() {
      return cloneDate2(this._utcDate);
    };
    ZonedDate2.prototype.toTimezone = function(toTimezone) {
      if (this.timezone === toTimezone) {
        return this.clone();
      }
      var tzOffset = offset(this.timezone, this._utcDate);
      var date2 = addMinutes(this._utcDate, tzOffset);
      return ZonedDate2.fromLocalDate(date2, toTimezone);
    };
    ZonedDate2.prototype.clone = function() {
      return ZonedDate2.fromUTCDate(this._utcDate, this.timezone);
    };
    ZonedDate2.prototype.addDays = function(days) {
      var newDate = new Date(this._utcDate.getTime());
      newDate.setUTCDate(newDate.getUTCDate() + days);
      return ZonedDate2.fromUTCDate(newDate, this.timezone);
    };
    ZonedDate2.prototype.addTime = function(milliseconds) {
      var utcDate = new Date(this._utcDate.getTime());
      var utcMid = shiftZoneMissingHour(utcDate, this.timezone);
      utcMid.setTime(utcMid.getTime() + milliseconds);
      var utcResult = shiftZoneMissingHour(utcMid, this.timezone);
      return ZonedDate2.fromUTCDate(utcResult, this.timezone);
    };
    ZonedDate2.prototype.stripTime = function() {
      var date2 = this._utcDate;
      var ticks = Date.UTC(date2.getUTCFullYear(), date2.getUTCMonth(), date2.getUTCDate(), 0, 0, 0);
      return ZonedDate2.fromUTCDate(new Date(ticks), this.timezone);
    };
    ZonedDate2.prototype.getTime = function() {
      return this._localDate.getTime();
    };
    ZonedDate2.prototype.getTimezoneOffset = function() {
      return this.timezoneOffset;
    };
    ZonedDate2.prototype.getFullYear = function() {
      return this._utcDate.getUTCFullYear();
    };
    ZonedDate2.prototype.getMonth = function() {
      return this._utcDate.getUTCMonth();
    };
    ZonedDate2.prototype.getDate = function() {
      return this._utcDate.getUTCDate();
    };
    ZonedDate2.prototype.getDay = function() {
      return this._utcDate.getUTCDay();
    };
    ZonedDate2.prototype.getHours = function() {
      return this._utcDate.getUTCHours();
    };
    ZonedDate2.prototype.getMinutes = function() {
      return this._utcDate.getUTCMinutes();
    };
    ZonedDate2.prototype.getSeconds = function() {
      return this._utcDate.getUTCSeconds();
    };
    ZonedDate2.prototype.getMilliseconds = function() {
      return this._utcDate.getUTCMilliseconds();
    };
    ZonedDate2.prototype.getUTCDate = function() {
      return this._localDate.getUTCDate();
    };
    ZonedDate2.prototype.getUTCDay = function() {
      return this._localDate.getUTCDay();
    };
    ZonedDate2.prototype.getUTCFullYear = function() {
      return this._localDate.getUTCFullYear();
    };
    ZonedDate2.prototype.getUTCHours = function() {
      return this._localDate.getUTCHours();
    };
    ZonedDate2.prototype.getUTCMilliseconds = function() {
      return this._localDate.getUTCMilliseconds();
    };
    ZonedDate2.prototype.getUTCMinutes = function() {
      return this._localDate.getUTCMinutes();
    };
    ZonedDate2.prototype.getUTCMonth = function() {
      return this._localDate.getUTCMonth();
    };
    ZonedDate2.prototype.getUTCSeconds = function() {
      return this._localDate.getUTCSeconds();
    };
    ZonedDate2.prototype.setTime = function(time2) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setMilliseconds = function(ms) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setUTCMilliseconds = function(ms) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setSeconds = function(sec, ms) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setUTCSeconds = function(sec, ms) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setMinutes = function(min, sec, ms) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setUTCMinutes = function(min, sec, ms) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setHours = function(hours, min, sec, ms) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setUTCHours = function(hours, min, sec, ms) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setDate = function(date2) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setUTCDate = function(date2) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setMonth = function(month, date2) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setUTCMonth = function(month, date2) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setFullYear = function(year, month, date2) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.setUTCFullYear = function(year, month, date2) {
      throw new Error("Method not implemented.");
    };
    ZonedDate2.prototype.toISOString = function() {
      return this._localDate.toISOString();
    };
    ZonedDate2.prototype.toJSON = function() {
      return this._localDate.toJSON();
    };
    ZonedDate2.prototype.toString = function() {
      var dateString = datePrefix(this._utcDate);
      var timeString = this.toTimeString();
      return dateString + " " + this.getDate() + " " + this.getFullYear() + " " + timeString;
    };
    ZonedDate2.prototype.toDateString = function() {
      return toLocalDate(this._utcDate).toDateString();
    };
    ZonedDate2.prototype.toTimeString = function() {
      var hours = padNumber(this.getHours());
      var minutes = padNumber(this.getMinutes());
      var seconds = padNumber(this.getSeconds());
      var time2 = hours + ":" + minutes + ":" + seconds;
      var tzOffset = formatOffset(this.timezoneOffset);
      var abbrev = abbrTimezone(this.timezone, this._utcDate);
      if (abbrev) {
        abbrev = " (" + abbrev + ")";
      }
      return time2 + " " + tzOffset + abbrev;
    };
    ZonedDate2.prototype.toLocaleString = function(locales, options) {
      return this._localDate.toLocaleString(locales, options);
    };
    ZonedDate2.prototype.toLocaleDateString = function(locales, options) {
      return this._localDate.toLocaleDateString(locales, options);
    };
    ZonedDate2.prototype.toLocaleTimeString = function(locales, options) {
      return this._localDate.toLocaleTimeString(locales, options);
    };
    ZonedDate2.prototype.toUTCString = function() {
      return this.toTimezone("Etc/UTC").toString();
    };
    ZonedDate2.prototype[Symbol.toPrimitive] = function(hint) {
      if (hint === "string" || hint === "default") {
        return this.toString();
      }
      return this._localDate.getTime();
    };
    ZonedDate2.prototype.valueOf = function() {
      return this.getTime();
    };
    ZonedDate2.prototype.getVarDate = function() {
      throw new Error("Not implemented.");
    };
    ZonedDate2.prototype.format = function(_) {
      throw new Error("Not implemented.");
    };
    ZonedDate2.prototype.formatUTC = function(_) {
      throw new Error("Not implemented.");
    };
    return ZonedDate2;
  }()
);

// node_modules/@progress/kendo-date-math/dist/es/week-in-year.js
var moveDateToWeekStart = function(date2, weekStartDay) {
  if (weekStartDay !== Day.Monday) {
    return addDays(prevDayOfWeek(date2, weekStartDay), 4);
  }
  return addDays(date2, 4 - (date2.getDay() || 7));
};
var calcWeekInYear = function(date2, weekStartDay) {
  var firstWeekInYear = createDate(date2.getFullYear(), 0, 1, -6);
  var newDate = moveDateToWeekStart(date2, weekStartDay);
  var diffInMS = newDate.getTime() - firstWeekInYear.getTime();
  var days = Math.floor(diffInMS / MS_PER_DAY);
  return 1 + Math.floor(days / 7);
};
var weekInYear = function(date2, weekStartDay) {
  if (weekStartDay === void 0) {
    weekStartDay = Day.Monday;
  }
  date2 = getDate(date2);
  var prevWeekDate = addDays(date2, -7);
  var nextWeekDate = addDays(date2, 7);
  var weekNumber = calcWeekInYear(date2, weekStartDay);
  if (weekNumber === 0) {
    return calcWeekInYear(prevWeekDate, weekStartDay) + 1;
  }
  if (weekNumber === 53 && calcWeekInYear(nextWeekDate, weekStartDay) > 1) {
    return 1;
  }
  return weekNumber;
};

// node_modules/@progress/kendo-vue-dateinputs/dist/es/package-metadata.js
var packageMetadata = {
  name: "@progress/kendo-vue-dateinputs",
  productName: "Kendo UI for Vue",
  productCodes: ["KENDOUIVUE", "KENDOUICOMPLETE"],
  publishDate: 1718172907,
  version: "",
  licensingDocsUrl: "https://www.telerik.com/kendo-vue-ui/my-license/?utm_medium=product&utm_source=kendovue&utm_campaign=kendo-ui-vue-purchase-license-keys-warning"
};

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/components/CalendarCell.js
var allVue3 = vue_runtime_esm_bundler_exports;
var gh3 = allVue3.h;
var isV33 = allVue3.version && allVue3.version[0] === "3";
var CalendarCellVue2 = {
  name: "KendoCalendarCell",
  // @ts-ignore
  emits: {
    "click": null,
    "mousedown": null,
    "mouseenter": null,
    "mouseleave": null
  },
  props: {
    isDisabled: Boolean,
    view: Number,
    formattedValue: String,
    id: String,
    isWeekend: Boolean,
    isFocused: Boolean,
    isSelected: Boolean,
    isInRange: Boolean,
    isRangeStart: Boolean,
    isRangeEnd: Boolean,
    isRangeMid: Boolean,
    isRangeSplitEnd: Boolean,
    isRangeSplitStart: Boolean,
    isToday: Boolean,
    title: String,
    value: Date
  },
  // Manually checking if the component needs an update
  // due to date object being compared by instance
  // and new Date object is created
  // every time and fails the shallow compare of the Vue.
  /**
   * @hidden
   */
  updated: function updated() {
  },
  // @ts-ignore
  setup: !isV33 ? void 0 : function() {
    var v3 = !!isV33;
    return {
      v3
    };
  },
  // tslint:disable:max-line-length
  /**
   * @return
   * Returns a `<td />` element with a `<span class="k-link" />` inside to apply the styles. The text inside is the [`formattedValue`]({% slug api_dateinputs_calendarcellprops %}#toc-formattedvalue) of the `cell`.
   */
  // @ts-ignore
  render: function render3(createElement) {
    var h = gh3 || createElement;
    var defaultSlot = getDefaultSlots(this);
    var _a11 = this.$props, formattedValue = _a11.formattedValue, isWeekend = _a11.isWeekend, isFocused = _a11.isFocused, isInRange4 = _a11.isInRange, isSelected = _a11.isSelected, isRangeStart = _a11.isRangeStart, isRangeMid = _a11.isRangeMid, isRangeEnd = _a11.isRangeEnd, isRangeSplitStart = _a11.isRangeSplitStart, isRangeSplitEnd = _a11.isRangeSplitEnd, isToday = _a11.isToday, isDisabled = _a11.isDisabled, view = _a11.view, value2 = _a11.value;
    var isEndActive = this.$props.activeRangeEnd === "end" && isRangeEnd;
    var isStartActive = this.$props.activeRangeEnd === "start" && isRangeStart;
    return h("td", {
      id: this.$props.id,
      attrs: this.v3 ? void 0 : {
        id: this.$props.id,
        title: this.$props.title
      },
      title: this.$props.title,
      "class": {
        "k-calendar-td": true,
        "k-range-end": isRangeEnd,
        "k-range-mid": isRangeMid,
        "k-range-split-end": isRangeSplitEnd,
        "k-range-split-start": isRangeSplitStart,
        "k-range-start": isRangeStart,
        "k-active": isStartActive || isEndActive,
        "k-focus": isFocused,
        "k-selected": isSelected || isRangeStart || isRangeEnd,
        "k-today": isToday,
        "k-weekend": isWeekend,
        "k-disabled": isDisabled
      },
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick,
        "mousedown": this.handleMouseDown,
        "mouseenter": this.handleMouseEnter,
        "mouseleave": this.handleMouseLeave
      },
      onMousedown: this.handleMouseDown,
      onMouseenter: this.handleMouseEnter,
      onMouseleave: this.handleMouseLeave
    }, [h("span", {
      "class": "k-link"
    }, [defaultSlot])]);
  },
  // tslint:enable:max-line-length
  methods: {
    handleClick: function handleClick(event2) {
      var value2 = this.$props.value;
      this.$emit("click", value2, event2);
    },
    handleMouseDown: function handleMouseDown(event2) {
      var value2 = this.$props.value;
      this.$emit("mousedown", value2, event2);
    },
    handleMouseEnter: function handleMouseEnter() {
      var value2 = this.$props.value;
      this.$emit("mouseenter", value2);
    },
    handleMouseLeave: function handleMouseLeave() {
      var value2 = this.$props.value;
      this.$emit("mouseleave", value2);
    }
  }
};
var CalendarCell = CalendarCellVue2;

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/components/CalendarWeekCell.js
var allVue4 = vue_runtime_esm_bundler_exports;
var gh4 = allVue4.h;
var isV34 = allVue4.version && allVue4.version[0] === "3";
var CalendarWeekCellVue2 = {
  props: {
    id: String,
    value: Number
  },
  // @ts-ignore
  emits: {
    "click": null
  },
  // @ts-ignore
  setup: !isV34 ? void 0 : function() {
    var v3 = !!isV34;
    return {
      v3
    };
  },
  /**
   * @return
   * Returns a `<td />` element with the [`value`]({% slug api_dateinputs_calendarweekcellprops %}#toc-value) as a child.
   */
  // @ts-ignore
  render: function render4(createElement) {
    var h = gh4 || createElement;
    var defaultSlot = getDefaultSlots(this);
    return h("td", {
      onClick: this.handleClick,
      on: this.v3 ? void 0 : {
        "click": this.handleClick
      },
      id: this.$props.id,
      attrs: this.v3 ? void 0 : {
        id: this.$props.id
      }
    }, [this.$props.value !== void 0 ? this.$props.value : defaultSlot]);
  },
  methods: {
    handleClick: function handleClick2(event2) {
      var value2 = this.$props.value;
      this.$emit("click", value2, event2);
    }
  }
};
var CalendarWeekCell = CalendarWeekCellVue2;

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/models/NavigationAction.js
var Action;
(function(Action2) {
  Action2[Action2["Left"] = 0] = "Left";
  Action2[Action2["Right"] = 1] = "Right";
  Action2[Action2["Up"] = 2] = "Up";
  Action2[Action2["Down"] = 3] = "Down";
  Action2[Action2["PrevView"] = 4] = "PrevView";
  Action2[Action2["NextView"] = 5] = "NextView";
  Action2[Action2["FirstInView"] = 6] = "FirstInView";
  Action2[Action2["LastInView"] = 7] = "LastInView";
  Action2[Action2["LowerView"] = 8] = "LowerView";
  Action2[Action2["UpperView"] = 9] = "UpperView";
})(Action || (Action = {}));

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/models/CalendarViewEnum.js
var CalendarViewEnum;
(function(CalendarViewEnum2) {
  CalendarViewEnum2[CalendarViewEnum2["month"] = 0] = "month";
  CalendarViewEnum2[CalendarViewEnum2["year"] = 1] = "year";
  CalendarViewEnum2[CalendarViewEnum2["decade"] = 2] = "decade";
  CalendarViewEnum2[CalendarViewEnum2["century"] = 3] = "century";
})(CalendarViewEnum || (CalendarViewEnum = {}));

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/models/SelectionRange.js
var EMPTY_SELECTIONRANGE = { start: null, end: null };

// node_modules/@progress/kendo-vue-dateinputs/dist/es/utils.js
var viewInRange = function(candidate, min, max) {
  if (min === void 0 || max === void 0) {
    return candidate;
  }
  return min <= candidate && candidate <= max ? candidate : candidate < min ? min : max;
};
var MIDNIGHT_DATE = new Date(1980, 0, 1);
var MIN_DATE = new Date(1900, 0, 1);
var MAX_DATE = new Date(2099, 11, 31);
var MIN_TIME = new Date(1980, 0, 1);
var MAX_TIME = new Date(1980, 0, 1, 23, 59, 59);
var setTime = function(origin, candidate) {
  var date2 = cloneDate2(origin);
  date2.setHours(candidate.getHours(), candidate.getMinutes(), candidate.getSeconds(), candidate.getMilliseconds());
  return date2;
};
var getToday = function() {
  return getDate(/* @__PURE__ */ new Date());
};
var isInRange = function(candidate, min, max) {
  return !candidate || !(min && min > candidate || max && max < candidate);
};
var isInDateRange = function(candidate, min, max) {
  return candidate === null || !(min && getDate(min) > getDate(candidate) || max && getDate(max) < getDate(candidate));
};
var isInSelectionRange = function(value2, selectionRange) {
  var _a11 = selectionRange || EMPTY_SELECTIONRANGE, start2 = _a11.start, end2 = _a11.end;
  if (!start2 || !end2) {
    return false;
  }
  return start2 < value2 && value2 < end2;
};
var range = function(start2, end2, step) {
  if (step === void 0) {
    step = 1;
  }
  var result = [];
  for (var i = start2; i < end2; i = i + step) {
    result.push(i);
  }
  return result;
};
var shiftWeekNames = function(names, offset2) {
  return names.slice(offset2).concat(names.slice(0, offset2));
};
var dateInRange = function(candidate, min, max) {
  if (!candidate) {
    return candidate;
  }
  if (min && candidate < min) {
    return cloneDate2(min);
  }
  if (max && candidate > max) {
    return cloneDate2(max);
  }
  return candidate;
};
var domContainerFactory = function(type) {
  return function(children2, classes, styles) {
    if (classes === void 0) {
      classes = "";
    }
    if (styles === void 0) {
      styles = {};
    }
    var container = document.createElement(type);
    container.className = classes;
    Object.keys(styles).map(function(key) {
      return container.style[key] = styles[key];
    });
    if (typeof children2 === "string") {
      container.innerHTML = children2 || "";
    } else {
      (children2 || []).forEach(function(child) {
        return child && container.appendChild(child);
      });
    }
    return container;
  };
};

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/services/CenturyViewService.js
var _a2;
var EMPTY_DATA = [[]];
var CELLS_LENGTH = 4;
var ROWS_LENGTH = 3;
var ACTIONS = (_a2 = {}, _a2[Action.Left] = function(date2) {
  return addDecades(date2, -1);
}, _a2[Action.Up] = function(date2) {
  return addDecades(date2, -4);
}, _a2[Action.Right] = function(date2) {
  return addDecades(date2, 1);
}, _a2[Action.Down] = function(date2) {
  return addDecades(date2, 4);
}, _a2[Action.PrevView] = function(date2) {
  return addCenturies(date2, -1);
}, _a2[Action.NextView] = function(date2) {
  return addCenturies(date2, 1);
}, _a2[Action.FirstInView] = function(date2) {
  return firstDecadeOfCentury(date2);
}, _a2[Action.LastInView] = function(date2) {
  return lastDecadeOfCentury(date2);
}, _a2);
var CenturyViewService = (
  /** @class */
  function() {
    function CenturyViewService2() {
    }
    CenturyViewService2.prototype.addToDate = function(min, skip) {
      return addCenturies(min, skip);
    };
    CenturyViewService2.prototype.datesList = function(start2, count) {
      return range(0, count).map(function(i) {
        return addCenturies(start2, i);
      });
    };
    CenturyViewService2.prototype.data = function(options) {
      var _this = this;
      var cellUID = options.cellUID, focusedDate2 = options.focusedDate, isActiveView = options.isActiveView, max = options.max, min = options.min, selectedDate = options.selectedDate, _a11 = options.selectionRange, selectionRange = _a11 === void 0 ? EMPTY_SELECTIONRANGE : _a11, viewDate = options.viewDate;
      if (!viewDate) {
        return EMPTY_DATA;
      }
      var cells = range(0, CELLS_LENGTH);
      var firstDate2 = firstDecadeOfCentury(viewDate);
      var lastDate = lastDecadeOfCentury(viewDate);
      var today2 = getToday();
      return range(0, ROWS_LENGTH).map(function(rowOffset) {
        var baseDate = addDecades(firstDate2, rowOffset * CELLS_LENGTH);
        return cells.map(function(cellOffset) {
          var cellDate = _this.normalize(addDecades(baseDate, cellOffset), min, max);
          var changedDecade = !_this.isInSameView(cellDate, lastDate);
          if (changedDecade) {
            return null;
          }
          var isRangeStart = _this.isEqual(cellDate, selectionRange.start);
          var isRangeEnd = _this.isEqual(cellDate, selectionRange.end);
          var isInMiddle = !isRangeStart && !isRangeEnd;
          var isRangeMid = isInMiddle && isInSelectionRange(cellDate, selectionRange);
          var isSelected = isActiveView && (!Array.isArray(selectedDate) ? isInRange(selectedDate, min, max) && _this.isEqual(cellDate, selectedDate) : _this.isSelectedFromArray(cellDate, selectedDate, min, max));
          return {
            formattedValue: _this.value(cellDate),
            id: "".concat(cellUID).concat(cellDate.getTime()),
            isFocused: _this.isEqual(cellDate, focusedDate2),
            isSelected,
            isWeekend: false,
            isInRange: isInRange(cellDate, min, max),
            isRangeStart,
            isRangeMid,
            isRangeEnd,
            isRangeSplitEnd: isRangeMid && _this.isEqual(cellDate, lastDate),
            isRangeSplitStart: isRangeMid && _this.isEqual(cellDate, firstDate2),
            isToday: _this.isEqual(cellDate, today2),
            title: _this.cellTitle(cellDate),
            value: cellDate
          };
        });
      });
    };
    CenturyViewService2.prototype.isSelectedFromArray = function(candidate, dates, min, max) {
      var _this = this;
      var result = false;
      dates.forEach(function(date2) {
        if (isInRange(candidate, min, max) && _this.isEqual(candidate, date2)) {
          result = true;
        }
      });
      return result;
    };
    CenturyViewService2.prototype.isEqual = function(candidate, expected) {
      if (!candidate || !expected) {
        return false;
      }
      return firstYearOfDecade(candidate).getFullYear() === firstYearOfDecade(expected).getFullYear();
    };
    CenturyViewService2.prototype.isInArray = function(date2, dates) {
      if (!dates.length) {
        return false;
      }
      var year = date2.getFullYear();
      return dates[0].getFullYear() <= year && year <= dates[dates.length - 1].getFullYear() + 99;
    };
    CenturyViewService2.prototype.isInRange = function(candidate, min, max) {
      var year = firstYearOfDecade(candidate).getFullYear();
      var aboveMin = !min || firstYearOfDecade(min).getFullYear() <= year;
      var belowMax = !max || year <= firstYearOfDecade(max).getFullYear();
      return aboveMin && belowMax;
    };
    CenturyViewService2.prototype.isInSameView = function(candidate, value2) {
      return durationInCenturies(candidate, value2) === 0;
    };
    CenturyViewService2.prototype.isRangeStart = function(value2) {
      return value2.getFullYear() % 1e3 === 0;
    };
    CenturyViewService2.prototype.move = function(value2, action) {
      var modifier = ACTIONS[action];
      if (!modifier) {
        return value2;
      }
      return modifier(value2);
    };
    CenturyViewService2.prototype.cellTitle = function(value2) {
      return firstYearOfDecade(value2).getFullYear().toString();
    };
    CenturyViewService2.prototype.navigationTitle = function(value2) {
      return value2 ? firstDecadeOfCentury(value2).getFullYear().toString() : "";
    };
    CenturyViewService2.prototype.title = function(value2) {
      if (!value2) {
        return "";
      }
      return "".concat(firstDecadeOfCentury(value2).getFullYear(), " - ").concat(lastDecadeOfCentury(value2).getFullYear());
    };
    CenturyViewService2.prototype.rowLength = function(_) {
      return CELLS_LENGTH;
    };
    CenturyViewService2.prototype.skip = function(value2, min) {
      return durationInCenturies(min, value2);
    };
    CenturyViewService2.prototype.total = function(min, max) {
      return durationInCenturies(min, max) + 1;
    };
    CenturyViewService2.prototype.value = function(current) {
      return current ? firstYearOfDecade(current).getFullYear().toString() : "";
    };
    CenturyViewService2.prototype.viewDate = function(date2, max, border) {
      if (border === void 0) {
        border = 1;
      }
      var renderTwoViews = durationInCenturies(date2, max) < border;
      return renderTwoViews ? addCenturies(date2, -1) : date2;
    };
    CenturyViewService2.prototype.normalize = function(cellDate, min, max) {
      if (cellDate < min && this.isEqual(cellDate, min)) {
        return cloneDate2(min);
      }
      if (cellDate > max && this.isEqual(cellDate, max)) {
        return cloneDate2(max);
      }
      return cellDate;
    };
    return CenturyViewService2;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/services/DecadeViewService.js
var _a3;
var EMPTY_DATA2 = [[]];
var CELLS_LENGTH2 = 4;
var ROWS_LENGTH2 = 3;
var ACTIONS2 = (_a3 = {}, _a3[Action.Left] = function(date2) {
  return addYears(date2, -1);
}, _a3[Action.Up] = function(date2) {
  return addYears(date2, -4);
}, _a3[Action.Right] = function(date2) {
  return addYears(date2, 1);
}, _a3[Action.Down] = function(date2) {
  return addYears(date2, 4);
}, _a3[Action.PrevView] = function(date2) {
  return addDecades(date2, -1);
}, _a3[Action.NextView] = function(date2) {
  return addDecades(date2, 1);
}, _a3[Action.FirstInView] = function(date2) {
  return firstYearOfDecade(date2);
}, _a3[Action.LastInView] = function(date2) {
  return lastYearOfDecade(date2);
}, _a3);
var DecadeViewService = (
  /** @class */
  function() {
    function DecadeViewService2() {
    }
    DecadeViewService2.prototype.addToDate = function(min, skip) {
      return addDecades(min, skip);
    };
    DecadeViewService2.prototype.datesList = function(start2, count) {
      return range(0, count).map(function(i) {
        return addDecades(firstYearOfDecade(start2), i);
      });
    };
    DecadeViewService2.prototype.data = function(options) {
      var _this = this;
      var cellUID = options.cellUID, focusedDate2 = options.focusedDate, isActiveView = options.isActiveView, max = options.max, min = options.min, selectedDate = options.selectedDate, _a11 = options.selectionRange, selectionRange = _a11 === void 0 ? EMPTY_SELECTIONRANGE : _a11, viewDate = options.viewDate;
      if (!viewDate) {
        return EMPTY_DATA2;
      }
      var cells = range(0, CELLS_LENGTH2);
      var firstDate2 = firstYearOfDecade(viewDate);
      var lastDate = lastYearOfDecade(viewDate);
      var today2 = getToday();
      return range(0, ROWS_LENGTH2).map(function(rowOffset) {
        var baseDate = addYears(firstDate2, rowOffset * CELLS_LENGTH2);
        return cells.map(function(cellOffset) {
          var cellDate = _this.normalize(addYears(baseDate, cellOffset), min, max);
          var changedDecade = !_this.isInSameView(cellDate, lastDate);
          if (changedDecade) {
            return null;
          }
          var isRangeStart = _this.isEqual(cellDate, selectionRange.start);
          var isRangeEnd = _this.isEqual(cellDate, selectionRange.end);
          var isInMiddle = !isRangeStart && !isRangeEnd;
          var isRangeMid = isInMiddle && isInSelectionRange(cellDate, selectionRange);
          var isSelected = isActiveView && (!Array.isArray(selectedDate) ? isInRange(selectedDate, min, max) && _this.isEqual(cellDate, selectedDate) : _this.isSelectedFromArray(cellDate, selectedDate, min, max));
          return {
            formattedValue: _this.value(cellDate),
            id: "".concat(cellUID).concat(cellDate.getTime()),
            isFocused: _this.isEqual(cellDate, focusedDate2),
            isSelected,
            isWeekend: false,
            isInRange: isInRange(cellDate, min, max),
            isRangeStart,
            isRangeMid,
            isRangeEnd,
            isRangeSplitEnd: isRangeMid && _this.isEqual(cellDate, lastDate),
            isRangeSplitStart: isRangeMid && _this.isEqual(cellDate, firstDate2),
            isToday: _this.isEqual(cellDate, today2),
            title: _this.cellTitle(cellDate),
            value: cellDate
          };
        });
      });
    };
    DecadeViewService2.prototype.isSelectedFromArray = function(candidate, dates, min, max) {
      var _this = this;
      var result = false;
      dates.forEach(function(date2) {
        if (isInRange(candidate, min, max) && _this.isEqual(candidate, date2)) {
          result = true;
        }
      });
      return result;
    };
    DecadeViewService2.prototype.isEqual = function(candidate, expected) {
      if (!candidate || !expected) {
        return false;
      }
      return candidate.getFullYear() === expected.getFullYear();
    };
    DecadeViewService2.prototype.isInArray = function(date2, dates) {
      if (!dates.length) {
        return false;
      }
      var year = date2.getFullYear();
      return dates[0].getFullYear() <= year && year <= dates[dates.length - 1].getFullYear() + 9;
    };
    DecadeViewService2.prototype.isInRange = function(candidate, min, max) {
      var year = candidate.getFullYear();
      var aboveMin = !min || min.getFullYear() <= year;
      var belowMax = !max || year <= max.getFullYear();
      return aboveMin && belowMax;
    };
    DecadeViewService2.prototype.isRangeStart = function(value2) {
      return value2.getFullYear() % 100 === 0;
    };
    DecadeViewService2.prototype.isInSameView = function(candidate, value2) {
      return durationInDecades(candidate, value2) === 0;
    };
    DecadeViewService2.prototype.move = function(value2, action) {
      var modifier = ACTIONS2[action];
      if (!modifier) {
        return value2;
      }
      return modifier(value2);
    };
    DecadeViewService2.prototype.cellTitle = function(value2) {
      return value2.getFullYear().toString();
    };
    DecadeViewService2.prototype.navigationTitle = function(value2) {
      return value2 ? firstYearOfDecade(value2).getFullYear().toString() : "";
    };
    DecadeViewService2.prototype.title = function(value2) {
      if (!value2) {
        return "";
      }
      return "".concat(firstYearOfDecade(value2).getFullYear(), " - ").concat(lastYearOfDecade(value2).getFullYear());
    };
    DecadeViewService2.prototype.rowLength = function(_) {
      return CELLS_LENGTH2;
    };
    DecadeViewService2.prototype.skip = function(value2, min) {
      return durationInDecades(min, value2);
    };
    DecadeViewService2.prototype.total = function(min, max) {
      return durationInDecades(min, max) + 1;
    };
    DecadeViewService2.prototype.value = function(current) {
      return current ? current.getFullYear().toString() : "";
    };
    DecadeViewService2.prototype.viewDate = function(date2, max, border) {
      if (border === void 0) {
        border = 1;
      }
      var renderTwoViews = durationInDecades(date2, max) < border;
      return renderTwoViews ? addDecades(date2, -1) : date2;
    };
    DecadeViewService2.prototype.normalize = function(cellDate, min, max) {
      if (cellDate < min && this.isEqual(cellDate, min)) {
        return cloneDate2(min);
      }
      if (cellDate > max && this.isEqual(cellDate, max)) {
        return cloneDate2(max);
      }
      return cellDate;
    };
    return DecadeViewService2;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/services/MonthViewService.js
var _a4;
var EMPTY_DATA3 = [[]];
var CELLS_LENGTH3 = 7;
var ROWS_LENGTH3 = 6;
var SATURDAY = 6;
var SUNDAY = 0;
var ACTIONS3 = (_a4 = {}, _a4[Action.Left] = function(date2) {
  return addDays(date2, -1);
}, _a4[Action.Up] = function(date2) {
  return addWeeks(date2, -1);
}, _a4[Action.Right] = function(date2) {
  return addDays(date2, 1);
}, _a4[Action.Down] = function(date2) {
  return addWeeks(date2, 1);
}, _a4[Action.PrevView] = function(date2) {
  return addMonths(date2, -1);
}, _a4[Action.NextView] = function(date2) {
  return addMonths(date2, 1);
}, _a4[Action.FirstInView] = function(date2) {
  return firstDayOfMonth(date2);
}, _a4[Action.LastInView] = function(date2) {
  return lastDayOfMonth(date2);
}, _a4);
var MonthViewService = (
  /** @class */
  function() {
    function MonthViewService2(intl2) {
      this.intl = intl2;
    }
    MonthViewService2.prototype.addToDate = function(min, skip) {
      return addMonths(min, skip);
    };
    MonthViewService2.prototype.datesList = function(start2, count) {
      return range(0, count).map(function(i) {
        return addMonths(start2, i);
      });
    };
    MonthViewService2.prototype.data = function(options) {
      var _this = this;
      var cellUID = options.cellUID, focusedDate2 = options.focusedDate, isActiveView = options.isActiveView, max = options.max, min = options.min, selectedDate = options.selectedDate, _a11 = options.selectionRange, selectionRange = _a11 === void 0 ? EMPTY_SELECTIONRANGE : _a11, viewDate = options.viewDate;
      if (!viewDate) {
        return EMPTY_DATA3;
      }
      var firstMonthDate = firstDayOfMonth(viewDate);
      var lastMonthDate = lastDayOfMonth(viewDate);
      var backward = -1;
      var date2 = dayOfWeek(firstMonthDate, this.intl.firstDay(), backward);
      var cells = range(0, CELLS_LENGTH3);
      var today2 = getToday();
      return range(0, ROWS_LENGTH3).map(function(rowOffset) {
        var baseDate = addDays(date2, rowOffset * CELLS_LENGTH3);
        return cells.map(function(cellOffset) {
          var cellDate = _this.normalize(addDays(baseDate, cellOffset), min, max);
          var otherMonth = cellDate < firstMonthDate || cellDate > lastMonthDate;
          if (otherMonth) {
            return null;
          }
          var isRangeStart = _this.isEqual(cellDate, selectionRange.start);
          var isRangeEnd = _this.isEqual(cellDate, selectionRange.end);
          var isInMiddle = !isRangeStart && !isRangeEnd;
          var isRangeMid = isInMiddle && isInSelectionRange(cellDate, selectionRange);
          var isSelected = isActiveView && (!Array.isArray(selectedDate) ? isInRange(selectedDate, min, max) && _this.isEqual(cellDate, selectedDate) : _this.isSelectedFromArray(cellDate, selectedDate, min, max));
          var cell = {
            formattedValue: _this.value(cellDate),
            id: "".concat(cellUID).concat(cellDate.getTime()),
            isFocused: _this.isEqual(cellDate, focusedDate2),
            isSelected,
            isInRange: isInRange(cellDate, min, max),
            isWeekend: _this.isWeekend(cellDate),
            isRangeStart,
            isRangeMid,
            isRangeEnd,
            isRangeSplitStart: isRangeMid && _this.isEqual(cellDate, firstMonthDate),
            isRangeSplitEnd: isRangeMid && _this.isEqual(cellDate, lastMonthDate),
            isToday: _this.isEqual(cellDate, today2),
            title: _this.cellTitle(cellDate),
            value: cellDate
          };
          return cell;
        });
      });
    };
    MonthViewService2.prototype.isEqual = function(candidate, expected) {
      if (!candidate || !expected) {
        return false;
      }
      return getDate(candidate).getTime() === getDate(expected).getTime();
    };
    MonthViewService2.prototype.isSelectedFromArray = function(candidate, dates, min, max) {
      var _this = this;
      var result = false;
      dates.forEach(function(date2) {
        if (isInRange(candidate, min, max) && _this.isEqual(candidate, date2)) {
          result = true;
        }
      });
      return result;
    };
    MonthViewService2.prototype.isInArray = function(date2, dates) {
      return !!dates.length && firstDayOfMonth(dates[0]) <= date2 && date2 <= lastDayOfMonth(dates[dates.length - 1]);
    };
    MonthViewService2.prototype.isInRange = function(candidate, min, max) {
      var value2 = getDate(candidate);
      var aboveMin = !min || getDate(min) <= value2;
      var belowMax = !max || value2 <= getDate(max);
      return aboveMin && belowMax;
    };
    MonthViewService2.prototype.isInSameView = function(candidate, value2) {
      return durationInMonths(candidate, value2) === 0;
    };
    MonthViewService2.prototype.isRangeStart = function(value2) {
      return !value2.getMonth();
    };
    MonthViewService2.prototype.move = function(value2, action) {
      var modifier = ACTIONS3[action];
      if (!modifier) {
        return value2;
      }
      return modifier(value2);
    };
    MonthViewService2.prototype.cellTitle = function(value2) {
      return this.intl.formatDate(value2, "D");
    };
    MonthViewService2.prototype.navigationTitle = function(value2) {
      if (!value2) {
        return "";
      }
      return this.isRangeStart(value2) ? value2.getFullYear().toString() : this.abbrMonthNames()[value2.getMonth()];
    };
    MonthViewService2.prototype.title = function(current) {
      return "".concat(this.wideMonthNames()[current.getMonth()], " ").concat(current.getFullYear());
    };
    MonthViewService2.prototype.rowLength = function(prependCell) {
      return CELLS_LENGTH3 + (prependCell ? 1 : 0);
    };
    MonthViewService2.prototype.skip = function(value2, min) {
      return durationInMonths(min, value2);
    };
    MonthViewService2.prototype.total = function(min, max) {
      return durationInMonths(min, max) + 1;
    };
    MonthViewService2.prototype.value = function(current) {
      return current ? current.getDate().toString() : "";
    };
    MonthViewService2.prototype.viewDate = function(date2, max, border) {
      if (border === void 0) {
        border = 1;
      }
      var renderTwoViews = durationInMonths(date2, max) < border;
      return renderTwoViews ? addMonths(date2, -1) : date2;
    };
    MonthViewService2.prototype.isWeekend = function(date2) {
      var day = date2.getDay();
      return day === SATURDAY || day === SUNDAY;
    };
    MonthViewService2.prototype.abbrMonthNames = function() {
      return this.intl.dateFormatNames({ nameType: "abbreviated", type: "months" });
    };
    MonthViewService2.prototype.normalize = function(cellDate, min, max) {
      if (cellDate < min && this.isEqual(cellDate, min)) {
        return getDate(min);
      }
      if (cellDate > max && this.isEqual(cellDate, max)) {
        return getDate(max);
      }
      return cellDate;
    };
    MonthViewService2.prototype.wideMonthNames = function() {
      return this.intl.dateFormatNames({ nameType: "wide", type: "months", standAlone: true });
    };
    return MonthViewService2;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/services/YearViewService.js
var _a5;
var EMPTY_DATA4 = [[]];
var CELLS_LENGTH4 = 4;
var ROWS_LENGTH4 = 3;
var ACTIONS4 = (_a5 = {}, _a5[Action.Left] = function(date2) {
  return addMonths(date2, -1);
}, _a5[Action.Up] = function(date2) {
  return addMonths(date2, -4);
}, _a5[Action.Right] = function(date2) {
  return addMonths(date2, 1);
}, _a5[Action.Down] = function(date2) {
  return addMonths(date2, 4);
}, _a5[Action.PrevView] = function(date2) {
  return addYears(date2, -1);
}, _a5[Action.NextView] = function(date2) {
  return addYears(date2, 1);
}, _a5[Action.FirstInView] = function(date2) {
  return firstMonthOfYear(date2);
}, _a5[Action.LastInView] = function(date2) {
  return lastMonthOfYear(date2);
}, _a5);
var YearViewService = (
  /** @class */
  function() {
    function YearViewService2(intl2) {
      this._intl = intl2;
    }
    YearViewService2.prototype.addToDate = function(min, skip) {
      return addYears(min, skip);
    };
    YearViewService2.prototype.datesList = function(start2, count) {
      return range(0, count).map(function(i) {
        return addYears(start2, i);
      });
    };
    YearViewService2.prototype.data = function(options) {
      var _this = this;
      var cellUID = options.cellUID, focusedDate2 = options.focusedDate, isActiveView = options.isActiveView, max = options.max, min = options.min, selectedDate = options.selectedDate, _a11 = options.selectionRange, selectionRange = _a11 === void 0 ? EMPTY_SELECTIONRANGE : _a11, viewDate = options.viewDate;
      if (!viewDate) {
        return EMPTY_DATA4;
      }
      var months = this.abbrMonthNames();
      var firstDate2 = firstMonthOfYear(viewDate);
      var lastDate = lastMonthOfYear(viewDate);
      var currentYear = firstDate2.getFullYear();
      var cells = range(0, CELLS_LENGTH4);
      var today2 = getToday();
      return range(0, ROWS_LENGTH4).map(function(rowOffset) {
        var baseDate = addMonths(firstDate2, rowOffset * CELLS_LENGTH4);
        return cells.map(function(cellOffset) {
          var cellDate = _this.normalize(addMonths(baseDate, cellOffset), min, max);
          if (!cellDate) {
            return null;
          }
          var changedYear = currentYear < cellDate.getFullYear();
          if (changedYear) {
            return null;
          }
          var isRangeStart = _this.isEqual(cellDate, selectionRange.start);
          var isRangeEnd = _this.isEqual(cellDate, selectionRange.end);
          var isInMiddle = !isRangeStart && !isRangeEnd;
          var isRangeMid = isInMiddle && isInSelectionRange(cellDate, selectionRange);
          var isSelected = isActiveView && (!Array.isArray(selectedDate) ? isInRange(selectedDate, min, max) && _this.isEqual(cellDate, selectedDate) : _this.isSelectedFromArray(cellDate, selectedDate, min, max));
          return {
            formattedValue: months[cellDate.getMonth()],
            id: "".concat(cellUID).concat(cellDate.getTime()),
            isFocused: _this.isEqual(cellDate, focusedDate2),
            isSelected,
            isInRange: isInRange(cellDate, min, max),
            isWeekend: false,
            isRangeStart,
            isRangeMid,
            isRangeEnd,
            isRangeSplitEnd: isRangeMid && _this.isEqual(cellDate, lastDate),
            isRangeSplitStart: isRangeMid && _this.isEqual(cellDate, firstDate2),
            isToday: _this.isEqual(cellDate, today2),
            title: _this.cellTitle(cellDate),
            value: cellDate
          };
        });
      });
    };
    YearViewService2.prototype.isSelectedFromArray = function(candidate, dates, min, max) {
      var _this = this;
      var result = false;
      dates.forEach(function(date2) {
        if (isInRange(candidate, min, max) && _this.isEqual(candidate, date2)) {
          result = true;
        }
      });
      return result;
    };
    YearViewService2.prototype.isEqual = function(candidate, expected) {
      if (!candidate || !expected) {
        return false;
      }
      return candidate.getFullYear() === expected.getFullYear() && candidate.getMonth() === expected.getMonth();
    };
    YearViewService2.prototype.isInArray = function(date2, dates) {
      if (!dates.length) {
        return false;
      }
      var year = date2.getFullYear();
      return dates[0].getFullYear() <= year && year <= dates[dates.length - 1].getFullYear();
    };
    YearViewService2.prototype.isInRange = function(candidate, min, max) {
      var candidateValue = createDate(candidate.getFullYear(), candidate.getMonth(), 1);
      var aboveMin = !min || createDate(min.getFullYear(), min.getMonth(), 1) <= candidateValue;
      var belowMax = !max || candidateValue <= createDate(max.getFullYear(), max.getMonth(), 1);
      return aboveMin && belowMax;
    };
    YearViewService2.prototype.isInSameView = function(candidate, value2) {
      return durationInYears(candidate, value2) === 0;
    };
    YearViewService2.prototype.isRangeStart = function(value2) {
      return value2.getFullYear() % 10 === 0;
    };
    YearViewService2.prototype.move = function(value2, action) {
      var modifier = ACTIONS4[action];
      if (!modifier) {
        return value2;
      }
      return modifier(value2);
    };
    YearViewService2.prototype.cellTitle = function(value2) {
      return "".concat(value2.getFullYear(), " ").concat(this.value(value2));
    };
    YearViewService2.prototype.navigationTitle = function(value2) {
      return this.title(value2);
    };
    YearViewService2.prototype.title = function(current) {
      return current ? current.getFullYear().toString() : "";
    };
    YearViewService2.prototype.rowLength = function(_) {
      return CELLS_LENGTH4;
    };
    YearViewService2.prototype.skip = function(value2, min) {
      return durationInYears(min, value2);
    };
    YearViewService2.prototype.total = function(min, max) {
      return durationInYears(min, max) + 1;
    };
    YearViewService2.prototype.value = function(current) {
      return current ? this.abbrMonthNames()[current.getMonth()] : "";
    };
    YearViewService2.prototype.viewDate = function(date2, max, border) {
      if (border === void 0) {
        border = 1;
      }
      var renderTwoViews = durationInYears(date2, max) < border;
      return renderTwoViews ? addYears(date2, -1) : date2;
    };
    YearViewService2.prototype.abbrMonthNames = function() {
      return this._intl.dateFormatNames({ nameType: "abbreviated", type: "months" });
    };
    YearViewService2.prototype.normalize = function(cellDate, min, max) {
      if (cellDate < min && this.isEqual(cellDate, min)) {
        return cloneDate(min);
      }
      if (cellDate > max && this.isEqual(cellDate, max)) {
        return cloneDate(max);
      }
      return cellDate;
    };
    return YearViewService2;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/services/BusViewService.js
var _a6;
var services = (_a6 = {}, _a6[CalendarViewEnum.month] = MonthViewService, _a6[CalendarViewEnum.year] = YearViewService, _a6[CalendarViewEnum.decade] = DecadeViewService, _a6[CalendarViewEnum.century] = CenturyViewService, _a6);
var viewOffset = function(view, offset2) {
  var candidate = CalendarViewEnum[CalendarViewEnum[view + offset2]];
  return candidate !== void 0 ? candidate : view;
};
var BusViewService = (
  /** @class */
  function() {
    function BusViewService2(onViewChanged) {
      this.bottom = CalendarViewEnum.month;
      this.top = CalendarViewEnum.century;
      this.onViewChanged = onViewChanged;
    }
    BusViewService2.prototype.configure = function(bottom, top) {
      this.bottom = bottom;
      this.top = top;
    };
    BusViewService2.prototype.service = function(view, intl2) {
      return new services["".concat(view)](intl2);
    };
    BusViewService2.prototype.moveDown = function(view, event2) {
      this.move(view, -1, event2);
    };
    BusViewService2.prototype.moveUp = function(view, event2) {
      this.move(view, 1, event2);
    };
    BusViewService2.prototype.moveToBottom = function(activeView) {
      if (activeView === this.bottom) {
        return;
      }
      this.onViewChanged({ view: this.bottom });
    };
    BusViewService2.prototype.canMoveDown = function(view) {
      return this.bottom < view;
    };
    BusViewService2.prototype.canMoveUp = function(view) {
      return view < this.top;
    };
    BusViewService2.prototype.clamp = function(view) {
      if (view < this.bottom) {
        return this.bottom;
      }
      if (view > this.top) {
        return this.top;
      }
      return view;
    };
    BusViewService2.prototype.move = function(view, offset2, event2) {
      var candidate = this.clamp(viewOffset(view, offset2));
      if (candidate === view) {
        return;
      }
      this.onViewChanged({ view: candidate }, event2);
    };
    return BusViewService2;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/services/DOMService.js
var DOMService = (
  /** @class */
  function() {
    function DOMService3() {
      this.didCalculate = false;
    }
    DOMService3.prototype.ensureHeights = function() {
      if (this.calendarHeight !== void 0) {
        return;
      }
      this.calculateHeights();
    };
    DOMService3.prototype.calculateHeights = function(container) {
      var _this = this;
      if (!canUseDOM) {
        return;
      }
      var div = domContainerFactory("div");
      var ul = domContainerFactory("ul");
      var li = domContainerFactory("li");
      var td = domContainerFactory("td");
      var th = domContainerFactory("th");
      var tr = domContainerFactory("tr");
      var tbody = domContainerFactory("tbody");
      var thead = domContainerFactory("thead");
      var table = domContainerFactory("table");
      var monthHeader = function() {
        return div('\n            <span class="k-calendar-title">March 2017</span>\n            <span class="k-calendar-today">TODAY</span>\n        ', "k-calendar-header");
      };
      var monthWeekHeader = function() {
        return table([
          thead([
            tr([th("MO")])
          ])
        ]);
      };
      var repeat = function(count, mapper) {
        return new Array(count).fill("1").map(mapper);
      };
      var content = function(rows, cells) {
        if (cells === void 0) {
          cells = 1;
        }
        return table([
          tbody([tr([th("1")])].concat(repeat(rows, function() {
            return tr(repeat(cells, function(c) {
              return td('<span class="k-link">'.concat(c, "</span>"));
            }));
          })))
        ]);
      };
      var scrollable = function(children2) {
        return div(children2, "k-content k-scrollable");
      };
      var view = function(contentElement, className, renderWeekHeader) {
        return div(renderWeekHeader ? [
          monthHeader(),
          monthWeekHeader(),
          scrollable([contentElement, contentElement])
        ] : [
          monthHeader(),
          scrollable([contentElement, contentElement])
        ], className, { left: "-10000px", position: "absolute" });
      };
      var navigationList = /* @__PURE__ */ function() {
        var navElement;
        return function() {
          if (!canUseDOM) {
            return null;
          }
          if (!navElement) {
            navElement = div([scrollable([ul([li("<span>FEB</span>")])])], "k-calendar-navigation", { left: "0px", position: "absolute" });
          }
          return navElement;
        };
      }();
      var viewFactory = function(_a11, className, renderWeekHeader) {
        var cells = _a11.cells, rows = _a11.rows;
        var viewElement;
        return function() {
          if (!canUseDOM) {
            return null;
          }
          if (!viewElement) {
            viewElement = view(content(rows, cells), className, renderWeekHeader);
          }
          return viewElement;
        };
      };
      var getScrollable = function(element3) {
        return element3.querySelector(".k-scrollable");
      };
      var horizontal = function(element3) {
        var scrollableElement = getScrollable(element3);
        scrollableElement.className = "".concat(scrollableElement.className, " k-scrollable-horizontal");
        return element3;
      };
      var monthView = viewFactory({ cells: 7, rows: 6 }, "k-calendar-view k-calendar-monthview", true);
      var yearView = viewFactory({ cells: 5, rows: 3 }, "k-calendar-view k-calendar-yearview", false);
      var decadeView = viewFactory({ cells: 5, rows: 2 }, "k-calendar-view k-calendar-decadeview", false);
      var horzMonthView = function() {
        return horizontal(monthView());
      };
      var horzYearView = function() {
        return horizontal(yearView());
      };
      var horzDecadeView = function() {
        return horizontal(decadeView());
      };
      var height = function(element3) {
        return parseFloat(window.getComputedStyle(element3).height) || element3.offsetHeight;
      };
      var width = function(element3) {
        var styles = window.getComputedStyle(element3);
        var computed = parseFloat(styles.width) + parseFloat(styles.paddingLeft) + parseFloat(styles.paddingRight);
        return computed || element3.offsetWidth;
      };
      var getBody = function(element3) {
        return element3.querySelector("tbody");
      };
      this.didCalculate = true;
      if (container) {
        this.hostContainer = container;
      }
      this.batch(monthView(), function(contentElement) {
        var viewElement = getBody(contentElement);
        _this.calendarHeight = height(contentElement);
        _this.monthViewHeight = height(viewElement);
        _this.headerHeight = height(viewElement.children[0]);
        _this.scrollableContentHeight = height(getScrollable(contentElement));
      });
      this.batch(horzMonthView(), function(contentElement) {
        var viewElement = getBody(contentElement);
        _this.calendarWidth = width(contentElement);
        _this.monthViewWidth = width(viewElement);
        _this.scrollableContentWidth = width(getScrollable(contentElement));
      });
      this.batch(yearView(), function(contentElement) {
        _this.yearViewHeight = height(getBody(contentElement));
        _this.scrollableYearContentHeight = height(getScrollable(contentElement));
      });
      this.batch(horzYearView(), function(contentElement) {
        _this.yearViewWidth = width(getBody(contentElement));
      });
      this.batch(decadeView(), function(contentElement) {
        _this.decadeViewHeight = height(getBody(contentElement));
        _this.centuryViewHeight = _this.decadeViewHeight;
      });
      this.batch(horzDecadeView(), function(contentElement) {
        _this.decadeViewWidth = width(getBody(contentElement));
        _this.centuryViewWidth = _this.decadeViewWidth;
      });
      this.batch(navigationList(), function(contentElement) {
        _this.navigationItemHeight = height(contentElement.querySelector("li"));
      });
    };
    DOMService3.prototype.viewHeight = function(viewType) {
      return this.viewDimension(viewType, "height");
    };
    DOMService3.prototype.viewWidth = function(viewType) {
      return this.viewDimension(viewType, "width");
    };
    DOMService3.prototype.viewDimension = function(viewType, dimension) {
      var viewProp = dimension === "height" ? "ViewHeight" : "ViewWidth";
      switch (viewType) {
        case CalendarViewEnum.month:
          return this["month".concat(viewProp)];
        case CalendarViewEnum.year:
          return this["year".concat(viewProp)];
        case CalendarViewEnum.decade:
          return this["decade".concat(viewProp)];
        case CalendarViewEnum.century:
          return this["century".concat(viewProp)];
        default:
          return 1;
      }
    };
    DOMService3.prototype.batch = function(contentElement, action) {
      var hostContainer = this.hostContainer || document.body;
      var appendedContent = hostContainer.appendChild(contentElement);
      action(appendedContent);
      hostContainer.removeChild(appendedContent);
    };
    return DOMService3;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/services/NavigationService.js
var KEY_TO_ACTION = {
  "33": Action.PrevView,
  "34": Action.NextView,
  "35": Action.LastInView,
  "36": Action.FirstInView,
  "37": Action.Left,
  "38": Action.Up,
  "39": Action.Right,
  "40": Action.Down,
  "meta+38": Action.UpperView,
  "meta+40": Action.LowerView,
  "meta+37": Action.PrevView,
  "meta+39": Action.NextView
};
var NavigationService = (
  /** @class */
  function() {
    function NavigationService2(bus) {
      this.bus = bus;
    }
    NavigationService2.prototype.action = function(event2) {
      var action = "".concat(event2.ctrlKey || event2.metaKey ? "meta+" : "").concat(event2.keyCode);
      return KEY_TO_ACTION[action];
    };
    NavigationService2.prototype.move = function(value2, action, activeView, service, event2) {
      if (!service) {
        return value2;
      }
      if (action === Action.UpperView && this.bus.canMoveUp(activeView)) {
        this.bus.moveUp(activeView, event2);
        return value2;
      }
      if (action === Action.LowerView && this.bus.canMoveDown(activeView)) {
        this.bus.moveDown(activeView, event2);
        return value2;
      }
      return service.move(value2, action);
    };
    return NavigationService2;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/services/WeekNamesService.js
var WeekNamesService = (
  /** @class */
  function() {
    function WeekNamesService2(intl2) {
      this.intl = intl2;
    }
    WeekNamesService2.prototype.getWeekNames = function(includeWeekNumber) {
      if (includeWeekNumber === void 0) {
        includeWeekNumber = false;
      }
      var weekNames = shiftWeekNames(this.intl.dateFormatNames({ nameType: "short", type: "days" }), this.intl.firstDay());
      return includeWeekNumber ? [""].concat(weekNames) : weekNames;
    };
    return WeekNamesService2;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/components/View.js
var allVue5 = vue_runtime_esm_bundler_exports;
var gh5 = allVue5.h;
var isV35 = allVue5.version && allVue5.version[0] === "3";
var inject = allVue5.inject;
var ViewVue2 = {
  name: "KendoView",
  inject: {
    kendoIntlService: {
      default: null
    }
  },
  props: {
    activeRangeEnd: {
      type: String
    },
    activeView: {
      type: Number,
      required: true
    },
    cell: [String, Function, Object],
    cellUID: {
      type: String,
      required: true
    },
    direction: {
      type: String,
      default: "vertical"
    },
    isActive: {
      type: Boolean,
      default: void 0
    },
    focusedDate: {
      type: Date,
      required: true
    },
    max: {
      type: Date,
      required: true
    },
    min: {
      type: Date,
      required: true
    },
    selectedDate: {
      type: [Date, Array, Object],
      default: function _default() {
        return getToday();
      }
    },
    selectionRange: Object,
    showWeekNumbers: {
      type: Boolean,
      default: false
    },
    viewDate: {
      type: Date,
      required: true
    },
    weekCell: [String, Function, Object],
    bus: Object,
    service: Object
  },
  computed: {
    isHorizontal: {
      get: function get() {
        return this.$props.direction === "horizontal";
      }
    },
    isMonthView: {
      get: function get2() {
        return this.$props.activeView === CalendarViewEnum.month;
      }
    },
    weekNumber: {
      get: function get3() {
        return Boolean(this.$props.showWeekNumbers && this.$props.activeView === CalendarViewEnum.month);
      }
    }
  },
  methods: {
    getWeekNumber: function getWeekNumber(date2) {
      if (!this.weekNumber) {
        return null;
      }
      return weekInYear(date2, this._intl.firstDay());
    },
    firstDate: function firstDate(row) {
      var cell = this.firstWeekDateContext(row);
      return cell ? cell.value : null;
    },
    firstWeekDateContext: function firstWeekDateContext(rowCtx) {
      if (!this.weekNumber) {
        return null;
      }
      var idx = 0;
      var ctx = rowCtx[idx];
      while (!ctx && idx < rowCtx.length) {
        ctx = rowCtx[++idx];
      }
      return ctx;
    },
    handleClick: function handleClick3(value2, event2) {
      var args = {
        value: cloneDate2(value2),
        target: this,
        event: event2
      };
      this.$emit("change", args);
    },
    handleWeekCellClick: function handleWeekCellClick(value2, event2) {
      var args = {
        value: value2,
        event: event2
      };
      this.$emit("weekcellclick", args);
    },
    handleMouseDown: function handleMouseDown2(value2, event2) {
      var args = {
        value: cloneDate2(value2),
        target: this,
        event: event2
      };
      this.$emit("viewmousedown", args);
    },
    handleMouseEnter: function handleMouseEnter2(value2) {
      this.$emit("cellenter", cloneDate2(value2));
    },
    handleMouseLeave: function handleMouseLeave2(value2) {
      this.$emit("cellleave", cloneDate2(value2));
    }
  },
  // @ts-ignore
  setup: !isV35 ? void 0 : function() {
    var v3 = !!isV35;
    var kendoIntlService = inject("kendoIntlService", {});
    return {
      v3,
      kendoIntlService
    };
  },
  // @ts-ignore
  render: function render5(createElement) {
    var h = gh5 || createElement;
    this._intl = provideIntlService(this);
    this._weekService = new WeekNamesService(this._intl);
    var emptyCell = function emptyCell2(idx) {
      return h("td", {
        key: idx,
        "class": "k-calendar-td k-empty"
      }, [" "]);
    };
    var time2 = getToday();
    var focusedDate2 = this.$props.isActive ? this.$props.focusedDate : null;
    var viewDate = setTime(this.$props.viewDate, time2);
    var currentData = this.$props.service.data({
      cellUID: this.$props.cellUID,
      min: this.$props.min,
      max: this.$props.max,
      focusedDate: focusedDate2,
      isActiveView: !this.$props.bus.canMoveDown(this.$props.activeView),
      selectedDate: this.$props.selectedDate,
      selectionRange: this.$props.selectionRange,
      viewDate
    });
    var buildWeekNumber = function buildWeekNumber2(row, idx) {
      var firstDayOfWeek = this.firstDate(row);
      if (!firstDayOfWeek) {
        return emptyCell("week-cell-".concat(idx));
      }
      var weekCellValue = this.getWeekNumber(this.firstDate(row));
      var uniqueID = "kendo-vue-calendar-week-cell-".concat(weekCellValue);
      var cellDefaultRendering = (
        // @ts-ignore  function children
        h(CalendarWeekCell, {
          "class": "k-calendar-td k-alt",
          value: weekCellValue,
          attrs: this.v3 ? void 0 : {
            value: weekCellValue
          },
          onClick: this.handleWeekCellClick,
          on: this.v3 ? void 0 : {
            "click": this.handleWeekCellClick
          },
          key: uniqueID
        }, this.v3 ? function() {
          return [weekCellValue];
        } : [weekCellValue])
      );
      return getTemplate.call(this, {
        h,
        template: this.$props.weekCell,
        defaultRendering: cellDefaultRendering,
        defaultSlots: weekCellValue,
        additionalListeners: {
          click: this.handleWeekCellClick
        },
        additionalProps: {
          value: weekCellValue,
          key: uniqueID
        }
      });
    };
    var buildRow = function buildRow2(row) {
      return row.map(function(cell, idx) {
        if (!cell) {
          return emptyCell(idx);
        }
        var uniqueID = "kendo-vue-calendar-cell-".concat(cell.value.getTime());
        var cellDefaultRendering = (
          // @ts-ignore  function children
          h(CalendarCell, {
            "aria-selected": cell.isSelected,
            attrs: this.v3 ? void 0 : {
              "aria-selected": cell.isSelected,
              formattedValue: cell.formattedValue,
              id: cell.id,
              isFocused: cell.isFocused,
              isSelected: cell.isSelected,
              isInRange: cell.isInRange,
              isWeekend: cell.isWeekend,
              isRangeStart: cell.isRangeStart,
              isRangeMid: cell.isRangeMid,
              isRangeEnd: cell.isRangeEnd,
              isRangeSplitStart: cell.isRangeSplitStart,
              isRangeSplitEnd: cell.isRangeSplitEnd,
              isToday: cell.isToday,
              title: cell.title,
              value: cell.value,
              isDisabled: !cell.isInRange,
              view: this.$props.activeView
            },
            formattedValue: cell.formattedValue,
            id: cell.id,
            isFocused: cell.isFocused,
            isSelected: cell.isSelected,
            isInRange: cell.isInRange,
            isWeekend: cell.isWeekend,
            isRangeStart: cell.isRangeStart,
            isRangeMid: cell.isRangeMid,
            isRangeEnd: cell.isRangeEnd,
            isRangeSplitStart: cell.isRangeSplitStart,
            isRangeSplitEnd: cell.isRangeSplitEnd,
            isToday: cell.isToday,
            title: cell.title,
            value: cell.value,
            isDisabled: !cell.isInRange,
            view: this.$props.activeView,
            onClick: this.handleClick,
            on: this.v3 ? void 0 : {
              "click": this.handleClick,
              "mousedown": this.handleMouseDown,
              "mouseenter": this.handleMouseEnter,
              "mouseleave": this.handleMouseLeave
            },
            onMousedown: this.handleMouseDown,
            onMouseenter: this.handleMouseEnter,
            onMouseleave: this.handleMouseLeave,
            key: uniqueID
          }, this.v3 ? function() {
            return [cell.formattedValue];
          } : [cell.formattedValue])
        );
        return getTemplate.call(this, {
          h,
          template: this.$props.cell,
          defaultRendering: cellDefaultRendering,
          defaultSlots: cell.formattedValue,
          additionalListeners: {
            click: this.handleClick,
            mousedown: this.handleMouseDown,
            mouseenter: this.handleMouseEnter,
            mouseleave: this.handleMouseLeave
          },
          additionalProps: {
            formattedValue: cell.formattedValue,
            id: cell.id,
            isFocused: cell.isFocused,
            isSelected: cell.isSelected,
            isInRange: cell.isInRange,
            isWeekend: cell.isWeekend,
            isRangeStart: cell.isRangeStart,
            isRangeMid: cell.isRangeMid,
            isRangeEnd: cell.isRangeEnd,
            isRangeSplitStart: cell.isRangeSplitStart,
            isRangeSplitEnd: cell.isRangeSplitEnd,
            isToday: cell.isToday,
            title: cell.title,
            value: cell.value,
            isDisabled: !cell.isInRange,
            view: this.$props.activeView,
            key: uniqueID
          }
        });
      }, this);
    };
    return h("tbody", {
      "class": "k-calendar-tbody",
      role: "rowgroup",
      attrs: this.v3 ? void 0 : {
        role: "rowgroup"
      }
    }, [currentData.map(function(row, idx) {
      return h("tr", {
        "class": "k-calendar-tr",
        role: "row",
        attrs: this.v3 ? void 0 : {
          role: "row"
        },
        key: idx
      }, [this.weekNumber && buildWeekNumber.call(this, row, idx), buildRow.call(this, row)]);
    }, this)]);
  }
};
var View = ViewVue2;

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/components/ViewList.js
var allVue6 = vue_runtime_esm_bundler_exports;
var gh6 = allVue6.h;
var isV36 = allVue6.version && allVue6.version[0] === "3";
var inject2 = allVue6.inject;
var DEFAULT_FETCH_MONTHS_COUNT = 1;
var VIEWS_COUNT = 5;
var ViewListVue2 = {
  name: "KendoViewList",
  inheritAttrs: false,
  inject: {
    kendoIntlService: {
      default: null
    }
  },
  props: {
    allowReverse: Boolean,
    hasFocusedDate: Boolean,
    activeView: {
      type: Number,
      required: true
    },
    bottomOffset: {
      type: Number
    },
    cell: [String, Function, Object],
    cellUID: {
      type: String,
      required: true
    },
    dates: Array,
    focusedDate: {
      type: Date,
      required: true
    },
    isActive: {
      type: Boolean,
      default: void 0
    },
    max: {
      type: Date,
      required: true
    },
    min: {
      type: Date,
      required: true
    },
    selectionRange: Object,
    showWeekNumbers: {
      type: Boolean,
      default: false
    },
    take: {
      type: Number,
      default: VIEWS_COUNT
    },
    value: {
      type: [Date, Array, Object]
    },
    views: {
      type: Number,
      default: DEFAULT_FETCH_MONTHS_COUNT
    },
    viewHeight: Number,
    viewOffset: Number,
    bus: Object,
    dom: Object,
    weekCell: [String, Function, Object],
    service: Object
  },
  data: function data() {
    return {
      lastViewsCount: 0,
      valueHasUpdated: false
    };
  },
  computed: {
    weekNames: {
      get: function get4() {
        this._intl = provideIntlService(this);
        var weekNames = shiftWeekNames(this._intl.dateFormatNames({
          nameType: "short",
          type: "days"
        }), this._intl.firstDay());
        return this.weekNumber ? [""].concat(weekNames) : weekNames;
      }
    },
    weekNumber: {
      get: function get5() {
        return Boolean(this.$props.showWeekNumbers && this.$props.activeView === CalendarViewEnum.month);
      }
    }
  },
  created: function created() {
    this.lastView = this.$props.activeView;
    this.lastFocus = this.$props.focusedDate;
    this.shouldScroll = false;
  },
  updated: function updated2() {
    this.shouldScroll = false;
    this.lastView = this.$props.activeView;
    this.$data.lastViewsCount = this.$props.views;
    this.indexToScroll = void 0;
  },
  methods: {
    handleFocus: function handleFocus(event2) {
      this.$emit("listfocus", event2);
    },
    handleBlur: function handleBlur(event2) {
      this.$emit("listblur", event2);
    },
    handleKeyDown: function handleKeyDown(event2) {
      this.$emit("listkeydown", event2);
    },
    handleVirtualizationMount: function handleVirtualizationMount(_virtualization) {
    },
    calculateHeights: function calculateHeights() {
      if (!this.$props.dom) {
        return;
      }
      var scrollableHeight = this.$props.activeView === CalendarViewEnum.month ? this.$props.dom.scrollableContentHeight : this.$props.dom.scrollableYearContentHeight;
      this._bottomOffset = scrollableHeight - this.$props.dom.viewHeight(this.$props.activeView);
      this._viewOffset = -1 * this.$props.dom.headerHeight;
      this._viewHeight = this.$props.dom.viewHeight(this.$props.activeView) || 1;
    },
    getTake: function getTake(skip, total) {
      return Math.min(total - skip, this.$props.take);
    },
    handleScrollAction: function handleScrollAction() {
    },
    handleTodayClick: function handleTodayClick(event2) {
      this.shouldScroll = true;
      this.handleDateChange(event2, true);
    },
    handleMouseDown: function handleMouseDown3(event2) {
      var args = {
        event: event2.event,
        value: cloneDate2(event2.value),
        target: this
      };
      this.$emit("listmousedown", args);
    },
    handleDateChange: function handleDateChange(event2, isTodayClick) {
      if (isTodayClick === void 0) {
        isTodayClick = false;
      }
      var args = {
        event: event2.event,
        value: cloneDate2(event2.value),
        target: this,
        isTodayClick
      };
      this.$emit("change", args);
    },
    handleWeekCellClick: function handleWeekCellClick2(event2) {
      this.$emit("weekcellclick", event2);
    },
    handleWeekNameClick: function handleWeekNameClick(event2, value2) {
      var args = {
        value: value2,
        event: event2
      };
      this.$emit("weeknameclick", args);
    },
    handleCellEnter: function handleCellEnter(event2) {
      this.$emit("cellenter", event2);
    },
    rotateSelectionRange: function rotateSelectionRange(selectionRange) {
      if (selectionRange.start === null || selectionRange.end === null) {
        return selectionRange;
      }
      var needRotate = selectionRange.end < selectionRange.start;
      return {
        start: needRotate ? selectionRange.end : selectionRange.start,
        end: needRotate ? selectionRange.start : selectionRange.end
      };
    }
  },
  // @ts-ignore
  setup: !isV36 ? void 0 : function() {
    var v3 = !!isV36;
    var kendoIntlService = inject2("kendoIntlService", {});
    return {
      v3,
      kendoIntlService
    };
  },
  mounted: function mounted() {
    this._calendarView = this.$refs.calendarView;
  },
  // @ts-ignore
  render: function render6(createElement) {
    var h = gh6 || createElement;
    var selectionRange = this.$props.allowReverse ? this.rotateSelectionRange(this.$props.selectionRange) : this.$props.selectionRange;
    var rootClassNames = classNames("k-calendar-view", "k-hstack k-align-items-start k-justify-content-center", {
      "k-calendar-monthview": this.$props.activeView === CalendarViewEnum.month,
      "k-calendar-yearview": this.$props.activeView === CalendarViewEnum.year,
      "k-calendar-decadeview": this.$props.activeView === CalendarViewEnum.decade,
      "k-calendar-centuryview": this.$props.activeView === CalendarViewEnum.century
    });
    var tableClassNames = classNames("k-calendar-table");
    var buildMonthView = function buildMonthView2(weekNames) {
      var that = this;
      return h("thead", {
        "class": "k-calendar-thead"
      }, [h("tr", {
        "class": "k-calendar-tr"
      }, [weekNames.map(function(name, idx) {
        return h("th", {
          "class": "k-calendar-th",
          key: idx,
          onClick: function onClick2(ev) {
            return that.handleWeekNameClick(ev, name);
          },
          on: this.v3 ? void 0 : {
            "click": function onClick2(ev) {
              return that.handleWeekNameClick(ev, name);
            }
          }
        }, [name]);
      }, this)])]);
    };
    var buildDates = function buildDates2() {
      var cellUID = this.$props.cellUID;
      return this.$props.dates.map(function(vDate) {
        return h("table", {
          role: "grid",
          attrs: this.v3 ? void 0 : {
            role: "grid",
            "aria-label": this.$props.service.title(this.$props.focusedDate),
            "aria-live": "polite",
            "aria-activedescendant": cellUID + this.$props.focusedDate.getTime(),
            tabindex: this.$attrs.tabIndex
          },
          "aria-label": this.$props.service.title(this.$props.focusedDate),
          "aria-live": "polite",
          "aria-activedescendant": cellUID + this.$props.focusedDate.getTime(),
          tabindex: this.$attrs.tabIndex,
          "class": tableClassNames,
          onKeydown: this.handleKeyDown,
          on: this.v3 ? void 0 : {
            "keydown": this.handleKeyDown
          }
        }, [
          this.$props.activeView === CalendarViewEnum.month && buildMonthView.call(this, this.weekNames),
          // @ts-ignore function children
          h(View, {
            key: vDate.getTime(),
            activeView: this.$props.activeView,
            attrs: this.v3 ? void 0 : {
              activeView: this.$props.activeView,
              viewDate: vDate,
              min: this.$props.min,
              max: this.$props.max,
              cellUID,
              isActive: this.$props.isActive,
              focusedDate: this.$props.focusedDate,
              cell: this.$props.cell,
              selectionRange,
              selectedDate: this.$props.value,
              showWeekNumbers: this.weekNumber,
              bus: this.$props.bus,
              service: this.$props.service,
              weekCell: this.$props.weekCell
            },
            viewDate: vDate,
            min: this.$props.min,
            max: this.$props.max,
            cellUID,
            isActive: this.$props.isActive,
            focusedDate: this.$props.focusedDate,
            cell: this.$props.cell,
            selectionRange,
            selectedDate: this.$props.value,
            showWeekNumbers: this.weekNumber,
            onChange: this.handleDateChange,
            on: this.v3 ? void 0 : {
              "change": this.handleDateChange,
              "weekcellclick": this.handleWeekCellClick,
              "cellenter": this.handleCellEnter,
              "viewmousedown": this.handleMouseDown
            },
            onWeekcellclick: this.handleWeekCellClick,
            onCellenter: this.handleCellEnter,
            onViewmousedown: this.handleMouseDown,
            bus: this.$props.bus,
            service: this.$props.service,
            weekCell: this.$props.weekCell
          })
        ]);
      }, this);
    };
    return h("div", {
      style: this.$attrs.style,
      "class": rootClassNames,
      onFocusin: this.handleFocus,
      on: this.v3 ? void 0 : {
        "focusin": this.handleFocus,
        "focusout": this.handleBlur
      },
      onFocusout: this.handleBlur
    }, [buildDates.call(this)]);
  }
};
var ViewList = ViewListVue2;

// node_modules/@progress/kendo-vue-dateinputs/dist/es/defaults.js
var MIDNIGHT_DATE2 = new Date(1980, 0, 1);
var MIN_DATE2 = new Date(1900, 0, 1);
var MAX_DATE2 = new Date(2099, 11, 31);
var MIN_TIME2 = new Date(1980, 0, 1);
var MAX_TIME2 = new Date(1980, 0, 1, 23, 59, 59);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/components/CalendarHeaderTitle.js
var allVue7 = vue_runtime_esm_bundler_exports;
var gh7 = allVue7.h;
var isV37 = allVue7.version && allVue7.version[0] === "3";
var CalendarHeaderTitleVue2 = {
  name: "KendoHeaderTitle",
  // @ts-ignore
  emits: {
    "click": null
  },
  props: {
    id: String,
    value: String,
    view: Number
  },
  methods: {
    handleClick: function handleClick4(event2) {
      this.$emit("click", event2);
    }
  },
  // @ts-ignore
  setup: !isV37 ? void 0 : function() {
    var v3 = !!isV37;
    return {
      v3
    };
  },
  /**
   * @return
   * Returns a `<button />` element with the [`value`]({% slug api_dateinputs_calendarheadertitleprops %}#toc-value) of the title as a child.
   */
  // @ts-ignore
  render: function render7(createElement) {
    var h = gh7 || createElement;
    var defaultSlot = getDefaultSlots(this);
    return (
      // @ts-ignore  function children
      h(Button, {
        role: "link",
        attrs: this.v3 ? void 0 : {
          role: "link",
          type: "button",
          value: this.$props.value,
          id: this.$props.id,
          fillMode: "flat",
          themeColor: "primary",
          tabIndex: 0
        },
        type: "button",
        value: this.$props.value,
        id: this.$props.id,
        fillMode: "flat",
        themeColor: "primary",
        onClick: this.handleClick,
        on: this.v3 ? void 0 : {
          "click": this.handleClick
        },
        tabIndex: 0
      }, this.v3 ? function() {
        return [defaultSlot];
      } : [defaultSlot])
    );
  }
};
var CalendarHeaderTitle = CalendarHeaderTitleVue2;

// node_modules/@progress/kendo-vue-dateinputs/dist/es/messages/main.js
var _a7;
var prevView = "calendar.prevView";
var nextView = "calendar.nextView";
var increaseValue = "dateinput.increment";
var decreaseValue = "dateinput.decrement";
var today = "calendar.today";
var toggleCalendar = "datepicker.toggleCalendar";
var swapStartEnd = "daterangepicker.swapStartEnd";
var start = "daterangepicker.start";
var end = "daterangepicker.end";
var separator = "daterangepicker.separator";
var toggleDateTimeSelector = "datetimepicker.toggleDateTimeSelector";
var now = "timepicker.now";
var selectNow = "timepicker.selectNow";
var timePickerCancel = "timepicker.cancel";
var timePickerSet = "timepicker.set";
var toggleTimeSelector = "timepicker.toggleTimeSelector";
var toggleClock = "timepicker.toggleClock";
var date = "datetimepicker.date";
var time = "datetimepicker.time";
var dateTimePickerCancel = "datetimepicker.cancel";
var dateTimePickerSet = "datetimepicker.set";
var messages2 = (_a7 = {}, _a7[today] = "Today", _a7[now] = "NOW", _a7[timePickerSet] = "Set", _a7[timePickerCancel] = "Cancel", _a7[date] = "Date", _a7[time] = "Time", _a7[dateTimePickerCancel] = "Cancel", _a7[dateTimePickerSet] = "Set", _a7[start] = "Start", _a7[end] = "End", _a7[separator] = " ", _a7[selectNow] = "Select Now", _a7[toggleTimeSelector] = "Toggle TimeSelector", _a7[toggleClock] = "Toggle Clock", _a7[increaseValue] = "Increase value", _a7[decreaseValue] = "Decrease value", _a7[toggleCalendar] = "Toggle calendar", _a7[prevView] = "Navigate to previous view", _a7[nextView] = "Navigate to next view", _a7[swapStartEnd] = "Swap start and end values", _a7[toggleDateTimeSelector] = "Toggle date-time selector", _a7);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/components/Header.js
var allVue8 = vue_runtime_esm_bundler_exports;
var gh8 = allVue8.h;
var isV38 = allVue8.version && allVue8.version[0] === "3";
var inject3 = allVue8.inject;
var HeaderVue2 = {
  name: "KendoCalendarHeader",
  inheritAttrs: false,
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  props: {
    activeView: {
      type: Number,
      required: true
    },
    currentDate: {
      type: Date,
      required: true
    },
    focusedDate: {
      type: Date,
      required: true
    },
    headerTitle: {
      type: [String, Object, Function],
      default: function _default2() {
        return void 0;
      }
    },
    max: {
      type: Date,
      default: function _default3() {
        return MAX_DATE;
      }
    },
    min: {
      type: Date,
      default: function _default4() {
        return MIN_DATE2;
      }
    },
    bus: Object,
    service: Object,
    rangeLength: {
      type: Number,
      default: 1
    },
    tabIndex: {
      type: Number,
      default: 0
    }
  },
  data: function data2() {
    return {
      currentRtl: false
    };
  },
  mounted: function mounted2() {
    this.currentRtl = isRtl(this.$el);
  },
  computed: {
    navigate: {
      get: function get6() {
        return this.$props.bus.canMoveUp(this.$props.activeView);
      }
    },
    todayIsInRange: {
      get: function get7() {
        return isInRange(getToday(), getDate(this.$props.min), getDate(this.$props.max));
      }
    }
  },
  methods: {
    getTitle: function getTitle() {
      if (!this.$props.currentDate) {
        return "";
      }
      var take = this.$props.rangeLength - 1;
      var title = this.$props.service.title(this.$props.currentDate);
      var nextDate = this.$props.service.addToDate(this.$props.currentDate, take);
      if (take < 1 || !this.$props.service.isInRange(nextDate, this.$props.min, this.$props.max)) {
        return title;
      }
      return "".concat(title, " - ").concat(this.$props.service.title(nextDate));
    },
    handleTitleClick: function handleTitleClick(event2) {
      if (!this.navigate) {
        return;
      }
      this.$props.bus.moveUp(this.$props.activeView, event2);
      this.$emit("titleclick", event2);
    },
    canNavigate: function canNavigate(action) {
      if (!this.$props.service) {
        return false;
      }
      var candidate = this.$props.service.move(this.$props.focusedDate, action);
      return this.$props.min <= candidate && candidate <= this.$props.max || this.$props.service.isInSameView(candidate, this.$props.min) || this.$props.service.isInSameView(candidate, this.$props.max);
    },
    move: function move(action) {
      return this.clampDate(this.$props.service.move(this.$props.focusedDate, action));
    },
    clampDate: function clampDate(value2) {
      return dateInRange(value2, this.$props.min, this.$props.max);
    },
    handleNextClick: function handleNextClick(event2) {
      var args = {
        event: event2,
        value: this.move(Action.NextView),
        target: this
      };
      this.$emit("nextclick", args);
    },
    handlePrevClick: function handlePrevClick(event2) {
      var args = {
        event: event2,
        value: this.move(Action.PrevView),
        target: this
      };
      this.$emit("prevclick", args);
    },
    handleTodayClick: function handleTodayClick2(event2) {
      if (!this.todayIsInRange) {
        return;
      }
      this.$props.bus.moveToBottom(this.$props.activeView);
      var args = {
        event: event2,
        value: dateInRange(getToday(), this.$props.min, this.$props.max),
        target: this
      };
      this.$emit("todayclick", args);
    },
    todayKeyDown: function todayKeyDown(event2) {
      var keyCode = event2.keyCode;
      if (keyCode === Keys.enter) {
        this.handleTodayClick(event2);
      }
    }
  },
  // @ts-ignore
  setup: !isV38 ? void 0 : function() {
    var v3 = !!isV38;
    var kendoLocalizationService = inject3("kendoLocalizationService", {});
    return {
      v3,
      kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render8(createElement) {
    var h = gh8 || createElement;
    this._localization = provideLocalizationService(this);
    var todayMessage = this._localization.toLanguageString(today, messages2[today]);
    var title = this.getTitle();
    var prevViewTitle = this._localization.toLanguageString(prevView, messages2[prevView]);
    var nextViewTittle = this._localization.toLanguageString(nextView, messages2[nextView]);
    var isPrevDisabled = !this.canNavigate(Action.PrevView);
    var isNextDisabled = !this.canNavigate(Action.NextView);
    var titleClassNames = classNames("k-calendar-title", {
      "k-disabled": !this.navigate
    });
    var todayClassNames = classNames("k-calendar-nav-today", {
      "k-disabled": !this.todayIsInRange
    });
    var headerTitle;
    var headerTitleDefaultRendering = (
      // @ts-ignore  function children
      h(CalendarHeaderTitle, {
        value: title,
        attrs: this.v3 ? void 0 : {
          value: title,
          view: this.$props.activeView
        },
        view: this.$props.activeView,
        "class": titleClassNames,
        onClick: this.handleTitleClick,
        on: this.v3 ? void 0 : {
          "click": this.handleTitleClick
        }
      }, this.v3 ? function() {
        return [title];
      } : [title])
    );
    headerTitle = getTemplate.call(this, {
      h,
      template: this.$props.headerTitle,
      defaultRendering: headerTitleDefaultRendering
    });
    var todayButtonRendering = (
      // @ts-ignore  function children
      h(Button, {
        fillMode: "flat",
        attrs: this.v3 ? void 0 : {
          fillMode: "flat",
          themeColor: "base",
          tabindex: this.$props.tabIndex
        },
        themeColor: "base",
        "class": todayClassNames,
        tabindex: this.$props.tabIndex,
        onKeydown: this.todayKeyDown,
        on: this.v3 ? void 0 : {
          "keydown": this.todayKeyDown,
          "click": this.handleTodayClick
        },
        onClick: this.handleTodayClick
      }, this.v3 ? function() {
        return [todayMessage];
      } : [todayMessage])
    );
    var todayButton = getTemplate.call(this, {
      h,
      defaultRendering: todayButtonRendering
    });
    return h("div", {
      "class": "k-calendar-header k-hstack",
      style: this.$attrs.style
    }, [headerTitle, h("span", {
      "class": "k-spacer"
    }), h("span", {
      "class": "k-calendar-nav k-hstack"
    }, [
      // @ts-ignore
      h(Button, {
        type: "button",
        attrs: this.v3 ? void 0 : {
          type: "button",
          icon: this.currentRtl ? "chevron-right" : "chevron-left",
          svgIcon: this.currentRtl ? chevronRightIcon : chevronLeftIcon,
          size: this.$props.size,
          fillMode: "flat",
          desabled: isPrevDisabled,
          "aria-label": prevViewTitle,
          title: prevViewTitle
        },
        icon: this.currentRtl ? "chevron-right" : "chevron-left",
        svgIcon: this.currentRtl ? chevronRightIcon : chevronLeftIcon,
        size: this.$props.size,
        fillMode: "flat",
        "class": "k-calendar-nav-pre",
        desabled: isPrevDisabled,
        "aria-label": prevViewTitle,
        title: prevViewTitle,
        onClick: this.handlePrevClick,
        on: this.v3 ? void 0 : {
          "click": this.handlePrevClick
        }
      }),
      todayButton,
      // @ts-ignore
      h(Button, {
        type: "button",
        attrs: this.v3 ? void 0 : {
          type: "button",
          icon: this.currentRtl ? "chevron-left" : "chevron-right",
          svgIcon: this.currentRtl ? chevronLeftIcon : chevronRightIcon,
          size: this.$props.size,
          fillMode: "flat",
          desabled: isNextDisabled,
          "aria-label": nextViewTittle,
          title: nextViewTittle
        },
        icon: this.currentRtl ? "chevron-left" : "chevron-right",
        svgIcon: this.currentRtl ? chevronLeftIcon : chevronRightIcon,
        size: this.$props.size,
        fillMode: "flat",
        "class": "k-calendar-nav-next",
        desabled: isNextDisabled,
        "aria-label": nextViewTittle,
        title: nextViewTittle,
        onClick: this.handleNextClick,
        on: this.v3 ? void 0 : {
          "click": this.handleNextClick
        }
      })
    ])]);
  }
};
var Header = HeaderVue2;

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/utils/main.js
var calculateValue = function(min, max, stateValue, propValue) {
  return propValue !== void 0 ? propValue !== null && isInRange(propValue, min, max) ? propValue : null : stateValue !== null && isInRange(stateValue, min, max) ? stateValue : null;
};
var extractDateFromValue = function(min, max, value2) {
  return value2 instanceof Date && !Array.isArray(value2) && isInRange(getDate(value2), min, max) ? getDate(value2) : null;
};
var extractMultipleFromValue = function(min, max, value2) {
  return Array.isArray(value2) ? value2.filter(function(date2) {
    return isInRange(date2, min, max);
  }).map(function(date2) {
    return getDate(date2);
  }) : null;
};
var extractRangeFromValue = function(value2) {
  return isObject(value2) && !(value2 instanceof Date) && value2 !== null && !Array.isArray(value2) ? value2 : EMPTY_SELECTIONRANGE;
};
var extractFocusedDate = function(single, multiple, range3) {
  return single || multiple && multiple[0] || range3 && range3.start;
};
var extractActiveRange = function(range3, single) {
  return range3.start === null && single === null ? "start" : range3.end === null ? "end" : "start";
};

// node_modules/@progress/kendo-vue-dateinputs/dist/es/calendar/components/Calendar.js
var allVue9 = vue_runtime_esm_bundler_exports;
var gh9 = allVue9.h;
var isV39 = allVue9.version && allVue9.version[0] === "3";
var inject4 = allVue9.inject;
var CalendarVue2 = {
  name: "KendoCalendar",
  inject: {
    kendoIntlService: {
      default: null
    }
  },
  model: {
    event: "changemodel"
  },
  props: {
    activeRangeEnd: {
      type: String,
      default: void 0
    },
    allowReverse: {
      type: Boolean,
      default: false
    },
    cell: [String, Function, Object],
    className: String,
    defaultActiveView: {
      type: String,
      default: "month"
    },
    modelValue: {
      type: [Date, Array, Object],
      default: void 0
    },
    defaultValue: {
      type: [Date, Array, Object],
      default: null
    },
    disabled: {
      type: Boolean,
      default: false
    },
    focusedDate: Date,
    id: {
      type: String,
      default: function _default5() {
        return guid();
      }
    },
    headerTitle: [String, Function, Object],
    max: {
      type: Date,
      default: function _default6() {
        return MAX_DATE2;
      }
    },
    min: {
      type: Date,
      default: function _default7() {
        return MIN_DATE2;
      }
    },
    mode: String,
    navigation: {
      type: Boolean,
      default: true
    },
    tabIndex: Number,
    value: [Date, Array, Object],
    views: {
      type: Number,
      default: 1
    },
    weekNumber: Boolean,
    weekCell: [String, Function, Object],
    topView: {
      type: String,
      default: "century"
    },
    bottomView: {
      type: String,
      default: "month"
    }
  },
  data: function data3() {
    return {
      valueDuringOnChange: void 0,
      currentFocusedDate: null,
      currentActiveView: null,
      currentValue: null,
      cellUID: guid(),
      isActive: false,
      oldValue: null,
      didNavigationChange: false,
      currentActiveRangeEnd: void 0
    };
  },
  created: function created2() {
    validatePackage(packageMetadata);
    var value2 = calculateValue(this.currentMin, this.currentMax, this.$props.defaultValue, this.$props.value || this.$props.modelValue);
    var selectedDate = extractDateFromValue(this.currentMin, this.currentMax, value2);
    var selectedMultiple = extractMultipleFromValue(this.currentMin, this.currentMax, value2);
    var selectedRange = extractRangeFromValue(value2);
    var calculatedFocus = extractFocusedDate(selectedDate, selectedMultiple, selectedRange);
    this._hasMounted = false;
    this.$data.currentFocusedDate = dateInRange(this.$props.focusedDate || calculatedFocus || getToday(), this.currentMin, this.currentMax);
    this.$data.currentValue = value2;
    this.$data.currentActiveView = viewInRange(CalendarViewEnum[this.$props.defaultActiveView], CalendarViewEnum[this.$props.bottomView], CalendarViewEnum[this.$props.topView]);
    this.$data.currentActiveRangeEnd = extractActiveRange(selectedRange, selectedDate);
    this._dates = [];
    this._calculateFocusFromValue = false;
    this._lastView = this.$props.activeView || this.$data.currentActiveView;
    this._lastViewsCount = this.$props.views;
    this._dom = new DOMService();
    this._bus = new BusViewService(this.handleViewChange);
    this._navigation = new NavigationService(this._bus);
    this._oldValue = value2;
  },
  watch: {
    value: function value(newValue, _oldValue) {
      this.$data.currentFocusedDate = newValue;
    },
    focusedDate: function focusedDate(newValue, _oldValue) {
      this.$data.currentFocusedDate = newValue;
    }
  },
  // @ts-ignore
  setup: !isV39 ? void 0 : function() {
    var v3 = !!isV39;
    var kendoIntlService = inject4("kendoIntlService", {});
    return {
      v3,
      kendoIntlService
    };
  },
  mounted: function mounted3() {
    this.calendarViewList = this.v3 ? this.calendarViewListRef : this.$refs.calendarViewList;
    this._calculateFocusFromValue = true;
  },
  updated: function updated3() {
    var stateValue = extractDateFromValue(this.currentMin, this.currentMax, this.computedValue());
    this._calculateFocusFromValue = Boolean(this._selectedDate && stateValue && this._selectedDate.getTime() && stateValue.getTime());
    this._lastView = this.$props.activeView || this.$data.currentActiveView;
    this._lastViewsCount = this.$props.views;
    this._oldValue = this.computedValue();
    if (!this.calendarViewList) {
      this.calendarViewList = this.v3 ? this.calendarViewListRef : this.$refs.calendarViewList;
    }
  },
  computed: {
    activeRange: {
      get: function get8() {
        return this.$props.activeRangeEnd !== void 0 ? this.$props.activeRangeEnd : this.$data.currentActiveRangeEnd;
      }
    },
    currentMin: function currentMin() {
      return getDate(this.$props.min);
    },
    currentMax: function currentMax() {
      return getDate(this.$props.max);
    }
  },
  methods: {
    element: function element() {
      return this.$el;
    },
    computedValue: function computedValue() {
      return this.$data.valueDuringOnChange !== void 0 ? this.$data.valueDuringOnChange : this.$props.value !== void 0 ? this.$props.value : this.$props.modelValue !== void 0 ? this.$props.modelValue : this.$data.currentValue;
    },
    focus: function focus() {
      if (this.calendarViewList) {
        this.calendarViewList.$el.firstElementChild.focus();
      }
    },
    handleBlur: function handleBlur2() {
      this.$data.isActive = false;
    },
    handleFocus: function handleFocus2() {
      this.$data.isActive = true;
    },
    emitBlur: function emitBlur(event2) {
      this.$emit("blur", event2);
    },
    emitFocus: function emitFocus(event2) {
      this.$emit("focus", event2);
    },
    handleTodayClick: function handleTodayClick3(event2) {
      if (this.$props.disabled) {
        return;
      }
      this.$data.didNavigationChange = true;
      var focusedDate2 = cloneDate2(event2.value);
      this.$data.currentFocusedDate = focusedDate2;
      this.$data.currentValue = focusedDate2;
      this.triggerChange(focusedDate2, event2);
    },
    handleViewChange: function handleViewChange(_a11) {
      var view = _a11.view;
      this.$data.currentActiveView = view;
    },
    handlePrevClick: function handlePrevClick2(event2) {
      var focusedDate2 = cloneDate2(event2.value);
      this.focus();
      if (this.$props.disabled) {
        return;
      }
      this.$data.currentFocusedDate = focusedDate2;
    },
    handleTitleClick: function handleTitleClick2() {
      this.focus();
    },
    handleNextClick: function handleNextClick2(event2) {
      var focusedDate2 = cloneDate2(event2.value);
      this.focus();
      if (this.$props.disabled) {
        return;
      }
      this.$data.currentFocusedDate = focusedDate2;
    },
    handleCellEnter: function handleCellEnter2(value2) {
      if (this.$props.mode === "range") {
        this.$data.currentFocusedDate = value2;
      }
    },
    generateRange: function generateRange(candidate, value2) {
      var end2 = value2.end, start2 = value2.start;
      var shouldSwap = value2.start !== null && candidate.getTime() <= value2.start.getTime();
      if (!this.$props.allowReverse && shouldSwap) {
        return {
          start: candidate,
          end: this._selectedRange.start
        };
      }
      return this.activeRange !== "end" ? {
        start: candidate,
        end: end2
      } : {
        start: start2 || this._selectedDate,
        end: candidate
      };
    },
    clampRange: function clampRange(value2) {
      return {
        start: value2,
        end: null
      };
    },
    handleWeekCellClick: function handleWeekCellClick3(event2) {
      this.$emit("weekcellclick", event2);
    },
    handleWeekNameClick: function handleWeekNameClick2(event2) {
      this.$emit("weeknameclick", event2);
    },
    handleDateChange: function handleDateChange2(event2) {
      var focusedDate2 = cloneDate2(event2.value);
      var canNavigateDown = this._bus.canMoveDown(this.$data.currentActiveView);
      if (this.$props.disabled) {
        return;
      }
      if (canNavigateDown) {
        if (event2.isTodayClick) {
          this._bus.moveToBottom(this.$data.currentActiveView);
        } else {
          this._bus.moveDown(this.$data.currentActiveView, event2.event);
          this.$data.currentFocusedDate = focusedDate2;
          return;
        }
      }
      var value2;
      switch (this.$props.mode) {
        case "single":
          value2 = cloneDate2(event2.value);
          break;
        case "multiple":
          if (Array.isArray(this._selectedMultiple)) {
            var result = this._selectedMultiple.slice();
            var index_1 = -1;
            result.forEach(function(date2, idx) {
              if (isEqualDate(date2, event2.value)) {
                index_1 = idx;
              }
            });
            index_1 !== -1 ? result.splice(index_1, 1) : result.push(cloneDate2(event2.value));
            value2 = result.slice();
          } else {
            if (this._selectedDate) {
              value2 = [cloneDate2(this._selectedDate), cloneDate2(event2.value)];
            } else {
              value2 = [cloneDate2(event2.value)];
            }
          }
          break;
        case "range":
          var hasSelection = this._selectedRange.start !== null && this._selectedRange.end !== null && this.activeRange === "start";
          value2 = hasSelection ? this.clampRange(event2.value) : this.generateRange(event2.value, this._selectedRange);
          this.$data.currentActiveRangeEnd = this.activeRange !== "end" ? "end" : "start";
          break;
        default:
          value2 = cloneDate2(event2.value);
          break;
      }
      this.$data.currentValue = value2;
      this.triggerChange(value2, event2);
    },
    triggerChange: function triggerChange(value2, event2) {
      this.$data.valueDuringOnChange = value2;
      var args = {
        event: event2.event,
        value: value2,
        component: this,
        target: {
          name: this.$props.name,
          value: value2,
          valueAsDate: value2
        }
      };
      this.$emit("changemodel", value2);
      this.$emit("update:modelValue", value2);
      this.$emit("change", args);
      this.$data.valueDuringOnChange = void 0;
    },
    handleMouseDown: function handleMouseDown4(event2) {
      var focusedDate2 = cloneDate2(event2.value);
      if (this.$props.disabled || this.$data.currentActiveView !== 0) {
        return;
      }
      this.$data.currentFocusedDate = focusedDate2;
    },
    tableKeyDown: function tableKeyDown(event2) {
      var keyCode = event2.keyCode;
      this.$emit("keydown", event2);
      if (keyCode === Keys.enter) {
        var args = {
          event: event2,
          value: this._focusedDate,
          component: this,
          target: {
            name: this.$props.name,
            value: this._focusedDate,
            valueAsDate: this._focusedDate
          }
        };
        this.handleDateChange(args);
      } else {
        var candidate = dateInRange(this._navigation.move(this._focusedDate, this._navigation.action(event2), this.$data.currentActiveView, this._service, event2), this.currentMin, this.currentMax);
        if (isEqualDate(this._focusedDate, candidate)) {
          return;
        }
        this._calculateFocusFromValue = false;
        this.$data.currentFocusedDate = candidate;
      }
      event2.preventDefault();
    },
    isValueEqual: function isValueEqual(newValue, oldValue) {
      if (newValue instanceof Date && oldValue instanceof Date) {
        return isEqualDate(newValue, oldValue);
      } else if (newValue instanceof Object && oldValue instanceof Object) {
        if (newValue && oldValue && // @ts-ignore
        isEqualDate(newValue.start, oldValue.start) && isEqualDate(newValue.end, oldValue.end)) {
          return true;
        } else {
          return false;
        }
      } else if (newValue instanceof Array && oldValue instanceof Array) {
        if (newValue && oldValue && // @ts-ignore
        newValue.length === oldValue.length) {
          return true;
        } else {
          return false;
        }
      }
      return false;
    },
    rangeWithFocused: function rangeWithFocused(range3, focusedDate2) {
      return {
        start: range3.start,
        end: range3.end === null && range3.start !== null && this.$data.isActive ? focusedDate2.end : range3.end
      };
    }
  },
  // @ts-ignore
  render: function render9(createElement) {
    var _this = this;
    var h = gh9 || createElement;
    var views = this.$props.views;
    var currentValue = this.computedValue();
    var currentFocusedDate = this.$data.currentFocusedDate;
    var didValueChange = currentValue !== null && this._oldValue !== null ? !this.isValueEqual(currentValue, this._oldValue) : currentValue !== this._oldValue;
    this._selectedDate = extractDateFromValue(this.currentMin, this.currentMax, currentValue);
    this._selectedMultiple = extractMultipleFromValue(this.currentMin, this.currentMax, currentValue);
    var cell = templateRendering.call(this, this.$props.cell, getListeners.call(this));
    var weekCell = templateRendering.call(this, this.$props.weekCell, getListeners.call(this));
    var headerTitle = templateRendering.call(this, this.$props.headerTitle, getListeners.call(this));
    var activeView = viewInRange(this.$data.currentActiveView, CalendarViewEnum[this.$props.bottomView], CalendarViewEnum[this.$props.topView]);
    this._selectedDate = extractDateFromValue(this.currentMin, this.currentMax, currentValue);
    this._selectedMultiple = extractMultipleFromValue(this.currentMin, this.currentMax, currentValue);
    this._selectedRange = extractRangeFromValue(currentValue);
    var calculatedFocus = extractFocusedDate(this._selectedDate, this._selectedMultiple, this._selectedRange);
    var currentDateInRange = dateInRange(didValueChange && calculatedFocus !== null ? calculatedFocus : currentFocusedDate, this.currentMin, this.currentMax);
    if (currentDateInRange instanceof Date) {
      this._focusedDate = getDate(currentDateInRange);
    } else if (calculatedFocus) {
      this._focusedDate = calculatedFocus;
    }
    var visualizedRange = this.rangeWithFocused(this._selectedRange, currentFocusedDate);
    this._intl = provideIntlService(this);
    this._bus.configure(CalendarViewEnum[this.$props.bottomView], CalendarViewEnum[this.$props.topView]);
    this._service = this._bus.service(activeView, this._intl);
    var rootClassNames = classNames("k-calendar", "k-calendar-md", {
      "k-calendar-range": views > 1,
      "k-disabled": this.$props.disabled,
      "k-week-number": this.$props.weekNumber
    }, this.$props.className);
    var didViewChange = this._lastView !== this.$data.currentActiveView;
    var isDateInList = this._dates && this._service.isInArray(this._focusedDate, this._dates);
    var didViewsCountChange = this._lastViewsCount !== this.$props.views;
    if (!isDateInList || didViewChange || didViewsCountChange) {
      this._dates = this._service.datesList(this._focusedDate, views);
    }
    var activeDate = cloneDate2(this._dates && this._dates[0] ? this._dates[0] : void 0);
    var calendarBody = [
      this.$props.navigation && // @ts-ignore  function children
      h(Header, {
        tabIndex: !this.$props.disabled ? this.$props.tabIndex || 0 : void 0,
        attrs: this.v3 ? void 0 : {
          tabIndex: !this.$props.disabled ? this.$props.tabIndex || 0 : void 0,
          activeView: this.$data.currentActiveView,
          currentDate: activeDate,
          focusedDate: this._focusedDate,
          min: this.currentMin,
          max: this.currentMax,
          rangeLength: this.$props.views,
          bus: this._bus,
          service: this._service,
          headerTitle
        },
        activeView: this.$data.currentActiveView,
        currentDate: activeDate,
        focusedDate: this._focusedDate,
        min: this.currentMin,
        max: this.currentMax,
        rangeLength: this.$props.views,
        onTodayclick: this.handleTodayClick,
        on: this.v3 ? void 0 : {
          "todayclick": this.handleTodayClick,
          "nextclick": this.handleNextClick,
          "prevclick": this.handlePrevClick,
          "titleclick": this.handleTitleClick
        },
        onNextclick: this.handleNextClick,
        onPrevclick: this.handlePrevClick,
        onTitleclick: this.handleTitleClick,
        bus: this._bus,
        service: this._service,
        headerTitle
      }),
      // @ts-ignore function children
      h(
        ViewList,
        {
          allowReverse: this.$props.allowReverse,
          attrs: this.v3 ? void 0 : {
            allowReverse: this.$props.allowReverse,
            isActive: this.$data.isActive,
            tabIndex: this.$props.tabIndex || 0,
            activeView: this.$data.currentActiveView,
            focusedDate: this._focusedDate,
            min: this.currentMin,
            max: this.currentMax,
            bus: this._bus,
            dates: this._dates,
            shouldScroll: this.$data.didNavigationChange,
            service: this._service,
            cell,
            weekCell,
            dom: this._dom,
            views: this.$props.views,
            selectionRange: visualizedRange,
            showWeekNumbers: this.$props.weekNumber,
            value: this._selectedMultiple || this._selectedDate,
            cellUID: this.$data.cellUID
          },
          isActive: this.$data.isActive,
          tabIndex: this.$props.tabIndex || 0,
          ref: this.v3 ? function(el) {
            _this.calendarViewListRef = el;
          } : "calendarViewList",
          activeView: this.$data.currentActiveView,
          focusedDate: this._focusedDate,
          min: this.currentMin,
          max: this.currentMax,
          bus: this._bus,
          dates: this._dates,
          shouldScroll: this.$data.didNavigationChange,
          service: this._service,
          cell,
          weekCell,
          dom: this._dom,
          views: this.$props.views,
          selectionRange: visualizedRange,
          showWeekNumbers: this.$props.weekNumber,
          onChange: this.handleDateChange,
          on: this.v3 ? void 0 : {
            "change": this.handleDateChange,
            "weekcellclick": this.handleWeekCellClick,
            "weeknameclick": this.handleWeekNameClick,
            "listmousedown": this.handleMouseDown,
            "cellenter": this.handleCellEnter,
            "listkeydown": this.tableKeyDown,
            "listfocus": this.handleFocus,
            "listblur": this.handleBlur
          },
          onWeekcellclick: this.handleWeekCellClick,
          onWeeknameclick: this.handleWeekNameClick,
          onListmousedown: this.handleMouseDown,
          onCellenter: this.handleCellEnter,
          onListkeydown: this.tableKeyDown,
          onListfocus: this.handleFocus,
          onListblur: this.handleBlur,
          value: this._selectedMultiple || this._selectedDate,
          cellUID: this.$data.cellUID
        }
      )
    ];
    return h("div", {
      "aria-disabled": this.$props.disabled,
      attrs: this.v3 ? void 0 : {
        "aria-disabled": this.$props.disabled,
        id: this.$props.id
      },
      "class": rootClassNames,
      id: this.$props.id,
      onFocusout: this.emitBlur,
      on: this.v3 ? void 0 : {
        "focusout": this.emitBlur,
        "focusin": this.emitFocus
      },
      onFocusin: this.emitFocus
    }, [calendarBody]);
  }
};
var Calendar = CalendarVue2;

// node_modules/@progress/kendo-vue-dateinputs/dist/es/dateinput/models/mask.js
var Mask = (
  /** @class */
  /* @__PURE__ */ function() {
    function Mask2() {
      this.symbols = "";
    }
    return Mask2;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/dateinput/utils.js
var defaultFormat = "d";
var defaultFormatPlaceholder = "wide";
var approximateStringMatching = function(oldTextOrigin, oldFormat, newTextOrigin, selectionStart) {
  var oldTextSeparator = oldTextOrigin[selectionStart + oldTextOrigin.length - newTextOrigin.length];
  var oldText = oldTextOrigin.substring(0, selectionStart + oldTextOrigin.length - newTextOrigin.length);
  var newText = newTextOrigin.substring(0, selectionStart);
  var diff = [];
  if (oldText === newText && selectionStart > 0) {
    diff.push([oldFormat[selectionStart - 1], newText[selectionStart - 1]]);
    return diff;
  }
  if (oldText.indexOf(newText) === 0 && (newText.length === 0 || oldFormat[newText.length - 1] !== oldFormat[newText.length])) {
    var deletedSymbol = "";
    if (newText.length === 1) {
      diff.push([oldFormat[0], newText[0]]);
    }
    for (var i = newText.length; i < oldText.length; i++) {
      if (oldFormat[i] !== deletedSymbol && oldFormat[i] !== "_") {
        deletedSymbol = oldFormat[i];
        diff.push([deletedSymbol, ""]);
      }
    }
    return diff;
  }
  if (newText.indexOf(oldText) === 0 || oldFormat[selectionStart - 1] === "_") {
    var symbol = oldFormat[0];
    for (var i = Math.max(0, oldText.length - 1); i < oldFormat.length; i++) {
      if (oldFormat[i] !== "_") {
        symbol = oldFormat[i];
        break;
      }
    }
    return [[symbol, newText[selectionStart - 1]]];
  }
  if (newText[newText.length - 1] === " " || newText[newText.length - 1] === oldTextSeparator) {
    return [[oldFormat[selectionStart - 1], "_"]];
  }
  return [[oldFormat[selectionStart - 1], newText[selectionStart - 1]]];
};
var dateSymbolMap = function(map, part) {
  map[part.pattern[0]] = part.type;
  return map;
};
var isInRange2 = function(candidate, min, max) {
  return candidate === null || !(min && min > candidate || max && max < candidate);
};

// node_modules/@progress/kendo-vue-dateinputs/dist/es/dateinput/models/kendo-date.js
var KendoDate = (
  /** @class */
  function() {
    function KendoDate2(intlProvider, formatPlaceholder, format) {
      this.year = true;
      this.month = true;
      this.date = true;
      this.hours = true;
      this.minutes = true;
      this.seconds = true;
      this.milliseconds = true;
      this.leadingZero = null;
      this.typedMonthPart = "";
      this.knownParts = "adHhmMsEy";
      this.symbols = {
        "E": "E",
        "H": "H",
        "M": "M",
        "a": "a",
        "d": "d",
        "h": "h",
        "m": "m",
        "s": "s",
        "y": "y"
      };
      this._value = getDate(/* @__PURE__ */ new Date());
      this.intlProvider = intlProvider;
      this.formatPlaceholder = formatPlaceholder;
      this.format = format;
      this.monthNames = this.allFormatedMonths();
    }
    Object.defineProperty(KendoDate2.prototype, "intl", {
      get: function() {
        return this.intlProvider();
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(KendoDate2.prototype, "value", {
      get: function() {
        return this._value;
      },
      enumerable: false,
      configurable: true
    });
    KendoDate2.prototype.setValue = function(value2) {
      if (!value2) {
        this._value = getDate(/* @__PURE__ */ new Date());
        this.modifyExisting(false);
      } else if (!isEqual(value2, this._value)) {
        this._value = cloneDate2(value2);
        this.modifyExisting(true);
      }
    };
    KendoDate2.prototype.hasValue = function() {
      var _this = this;
      var pred = function(a, p) {
        return a || p.type !== "literal" && p.type !== "dayperiod" && _this.getExisting(p.pattern[0]);
      };
      return this.intl.splitDateFormat(this.format).reduce(pred, false);
    };
    KendoDate2.prototype.getDateObject = function() {
      for (var i = 0; i < this.knownParts.length; i++) {
        if (!this.getExisting(this.knownParts[i])) {
          return null;
        }
      }
      return cloneDate2(this.value);
    };
    KendoDate2.prototype.getTextAndFormat = function() {
      return this.merge(this.intl.formatDate(this.value, this.format), this.dateFormatString(this.value, this.format));
    };
    KendoDate2.prototype.modifyExisting = function(value2) {
      var sampleFormat = this.dateFormatString(this.value, this.format).symbols;
      for (var i = 0; i < sampleFormat.length; i++) {
        this.setExisting(sampleFormat[i], value2);
      }
    };
    KendoDate2.prototype.getExisting = function(symbol) {
      switch (symbol) {
        case "y":
          return this.year;
        case "M":
        case "L":
          return this.month;
        case "d":
          return this.date;
        case "E":
          return this.date && this.month && this.year;
        case "h":
        case "H":
          return this.hours;
        case "m":
          return this.minutes;
        case "s":
          return this.seconds;
        default:
          return true;
      }
    };
    KendoDate2.prototype.setExisting = function(symbol, value2) {
      switch (symbol) {
        case "y":
          this.year = value2;
          if (value2 === false) {
            this._value.setFullYear(2e3);
          }
          break;
        case "M":
          this.month = value2;
          if (value2 === false) {
            this._value.setMonth(0);
          }
          break;
        case "d":
          this.date = value2;
          break;
        case "h":
        case "H":
          this.hours = value2;
          break;
        case "m":
          this.minutes = value2;
          break;
        case "s":
          this.seconds = value2;
          break;
        default:
          return;
      }
    };
    KendoDate2.prototype.modifyPart = function(symbol, offset2) {
      var newValue = cloneDate2(this.value);
      switch (symbol) {
        case "y":
          newValue.setFullYear(newValue.getFullYear() + offset2);
          break;
        case "M":
          newValue = addMonths(this.value, offset2);
          break;
        case "d":
        case "E":
          newValue.setDate(newValue.getDate() + offset2);
          break;
        case "h":
        case "H":
          newValue.setHours(newValue.getHours() + offset2);
          break;
        case "m":
          newValue.setMinutes(newValue.getMinutes() + offset2);
          break;
        case "s":
          newValue.setSeconds(newValue.getSeconds() + offset2);
          break;
        case "a":
          newValue.setHours(newValue.getHours() + 12 * offset2);
          break;
        default:
          break;
      }
      this.setExisting(symbol, true);
      this._value = newValue;
    };
    KendoDate2.prototype.parsePart = function(symbol, currentChar) {
      var _a11;
      this.resetLeadingZero();
      if (!currentChar) {
        this.setExisting(symbol, false);
        return { value: null };
      }
      var baseDate = this.intl.formatDate(this.value, this.format);
      var dateParts = this.dateFormatString(this.value, this.format);
      var baseFormat = dateParts.symbols;
      var replaced = false;
      var prefix = "";
      var current = "";
      var suffix = "";
      for (var i = 0; i < baseDate.length; i++) {
        if (baseFormat[i] === symbol) {
          current += this.getExisting(symbol) ? baseDate[i] : "0";
          replaced = true;
        } else if (!replaced) {
          prefix += baseDate[i];
        } else {
          suffix += baseDate[i];
        }
      }
      var parsedDate = null;
      var month = this.matchMonth(currentChar);
      while (current.length > 0 && current.charAt(0) === "0") {
        current = current.slice(1);
      }
      if (current.length >= 4) {
        current = "";
      }
      for (var i = 0; i < 2; i++) {
        var middle = current + currentChar;
        var middleNumber = parseInt(middle, 10);
        parsedDate = this.intl.parseDate(prefix + middle + suffix, this.format);
        if (!parsedDate && !isNaN(middleNumber) && !isNaN(parseInt(currentChar, 10))) {
          if (symbol === "M" && !month) {
            var monthNumber = middleNumber - 1;
            if (monthNumber > -1 && monthNumber < 12) {
              parsedDate = cloneDate2(this.value);
              parsedDate.setMonth(monthNumber);
              if (parsedDate.getMonth() !== monthNumber) {
                parsedDate = lastDayOfMonth(addMonths(parsedDate, -1));
              }
            }
          }
          if (symbol === "y") {
            parsedDate = createDate(parseInt(middle, 10), this.month ? this.value.getMonth() : 0, this.date ? this.value.getDate() : 1, this.hours ? this.value.getHours() : 0, this.minutes ? this.value.getMinutes() : 0, this.seconds ? this.value.getSeconds() : 0, this.milliseconds ? this.value.getMilliseconds() : 0);
            if (this.date && parsedDate.getDate() !== this.value.getDate()) {
              parsedDate = lastDayOfMonth(addMonths(parsedDate, -1));
            }
          }
        }
        if (parsedDate) {
          this._value = parsedDate;
          this.setExisting(symbol, true);
          return { value: this.value };
        }
        current = "";
      }
      if (month) {
        parsedDate = this.intl.parseDate(prefix + month + suffix, this.format);
        if (parsedDate) {
          this._value = parsedDate;
          this.setExisting(symbol, true);
          return { value: this.value };
        }
      }
      if (currentChar === "0") {
        this.leadingZero = !this.isAbbrMonth(dateParts.partMap, symbol) ? (_a11 = {}, _a11[symbol] = true, _a11) : null;
        this.setExisting(symbol, false);
      }
      return { value: null };
    };
    KendoDate2.prototype.symbolMap = function(symbol) {
      return this.intl.splitDateFormat(this.format).reduce(dateSymbolMap, {})[symbol];
    };
    KendoDate2.prototype.resetLeadingZero = function() {
      var hasLeadingZero = this.leadingZero !== null;
      this.leadingZero = null;
      return hasLeadingZero;
    };
    KendoDate2.prototype.isAbbrMonth = function(parts, symbol) {
      var pattern = this.partPattern(parts, symbol);
      return pattern.type === "month" && pattern.names;
    };
    KendoDate2.prototype.partPattern = function(parts, symbol) {
      return parts.filter(function(part) {
        return part.pattern.indexOf(symbol) !== -1;
      })[0];
    };
    KendoDate2.prototype.matchMonth = function(typedChar) {
      this.typedMonthPart += typedChar.toLowerCase();
      if (this.monthNames.length === 0) {
        return "";
      }
      while (this.typedMonthPart.length > 0) {
        for (var i = 0; i < this.monthNames.length; i++) {
          if (this.monthNames[i].toLowerCase().indexOf(this.typedMonthPart) === 0) {
            return this.monthNames[i];
          }
        }
        var monthAsNum = parseInt(this.typedMonthPart, 10);
        if (monthAsNum >= 1 && monthAsNum <= 12 && monthAsNum.toString() === this.typedMonthPart) {
          return this.monthNames[monthAsNum - 1];
        }
        this.typedMonthPart = this.typedMonthPart.substring(1, this.typedMonthPart.length);
      }
      return "";
    };
    KendoDate2.prototype.allFormatedMonths = function() {
      var dateFormatParts = this.intl.splitDateFormat(this.format);
      for (var i = 0; i < dateFormatParts.length; i++) {
        if (dateFormatParts[i].type === "month" && dateFormatParts[i].names) {
          return this.intl.dateFormatNames(dateFormatParts[i].names);
        }
      }
      return [];
    };
    KendoDate2.prototype.dateFormatString = function(date2, format) {
      var dateFormatParts = this.intl.splitDateFormat(format);
      var parts = [];
      var partMap = [];
      for (var i = 0; i < dateFormatParts.length; i++) {
        var partLength = this.intl.formatDate(date2, { pattern: dateFormatParts[i].pattern }).length;
        while (partLength > 0) {
          parts.push(this.symbols[dateFormatParts[i].pattern[0]] || "_");
          partMap.push(dateFormatParts[i]);
          partLength--;
        }
      }
      var returnValue = new Mask();
      returnValue.symbols = parts.join("");
      returnValue.partMap = partMap;
      return returnValue;
    };
    KendoDate2.prototype.merge = function(text, mask) {
      var resultText = "";
      var resultFormat = "";
      var format = mask.symbols;
      for (var r = format.length - 1; r >= 0; r--) {
        if (this.knownParts.indexOf(format[r]) === -1 || this.getExisting(format[r])) {
          resultText = text[r] + resultText;
          resultFormat = format[r] + resultFormat;
        } else {
          var currentSymbol = format[r];
          while (r >= 0 && currentSymbol === format[r]) {
            r--;
          }
          r++;
          if (this.leadingZero && this.leadingZero[currentSymbol]) {
            resultText = "0" + resultText;
          } else {
            resultText = this.dateFieldName(mask.partMap[r]) + resultText;
          }
          while (resultFormat.length < resultText.length) {
            resultFormat = format[r] + resultFormat;
          }
        }
      }
      return { text: resultText, format: resultFormat };
    };
    KendoDate2.prototype.dateFieldName = function(part) {
      var formatPlaceholder = this.formatPlaceholder || "wide";
      if (formatPlaceholder[part.type]) {
        return formatPlaceholder[part.type];
      }
      if (formatPlaceholder === "formatPattern") {
        return part.pattern;
      }
      return this.intl.dateFieldName(Object.assign(part, { nameType: formatPlaceholder }));
    };
    return KendoDate2;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/timepicker/models/TimePart.js
var TIME_PART = {
  dayperiod: "dayperiod",
  hour: "hour",
  millisecond: "millisecond",
  minute: "minute",
  second: "second"
};

// node_modules/@progress/kendo-vue-dateinputs/dist/es/timepicker/utils.js
var setter = function(method) {
  return function(date2, value2) {
    var clone = cloneDate2(date2);
    clone[method](value2);
    return clone;
  };
};
var defaultGetters = [
  { type: TIME_PART.hour, getter: function(value2) {
    return value2.getHours();
  } },
  { type: TIME_PART.minute, getter: function(value2) {
    return value2.getMinutes();
  } },
  { type: TIME_PART.second, getter: function(value2) {
    return value2.getSeconds();
  } },
  { type: TIME_PART.millisecond, getter: function(value2) {
    return value2.getMilliseconds();
  } }
];
var left = function(getter) {
  return function(origin, _) {
    return getter(origin);
  };
};
var right = function(getter) {
  return function(_, candidate) {
    return getter(candidate);
  };
};
var convertToObject = function(parts) {
  return parts.reduce(function(obj, p) {
    obj[p.type] = p.type;
    return obj;
  }, {});
};
var getterByPart = function(parts) {
  return function(g) {
    return parts[g.type] ? right(g.getter) : left(g.getter);
  };
};
var gettersFactory = function(getters2) {
  return function(parts) {
    return getters2.map(getterByPart(convertToObject(parts)));
  };
};
var snapValue = function(getter, step, min, type) {
  return function(date2) {
    var value2 = getter(date2);
    var minValue = getter(min);
    if (type === "hour") {
      return value2 - (value2 - minValue) % step;
    }
    if (date2.getTime() <= min.getTime() && value2 !== 0 && value2 <= minValue) {
      return Math.ceil(value2 / step) * step;
    }
    return value2 - value2 % step;
  };
};
var snappersFactory = function(getters2) {
  return function(steps, min) {
    return getters2.map(function(g) {
      var step = Math.floor(steps[g.type]);
      return step ? snapValue(g.getter, step, min, g.type) : g.getter;
    });
  };
};
var generateGetters = gettersFactory(defaultGetters);
var generateSnappers = snappersFactory(defaultGetters);
var setHours = setter("setHours");
var setMinutes = setter("setMinutes");
var setSeconds = setter("setSeconds");
var range2 = function(start2, end2, step) {
  if (step === void 0) {
    step = 1;
  }
  var result = [];
  for (var i = start2; i < end2; i = i + step) {
    result.push(i);
  }
  return result;
};
var normalizeTimes = function(candidate, min, max) {
  return {
    candidateValue: setTime(MIDNIGHT_DATE, candidate),
    maxValue: addDays(setTime(MIDNIGHT_DATE, max), min.getHours() < max.getHours() ? 0 : 1),
    minValue: setTime(MIDNIGHT_DATE, min)
  };
};
var isInTimeRange = function(candidate, min, max) {
  if (!candidate || !min || !max) {
    return true;
  }
  var _a11 = normalizeTimes(candidate, min, max), candidateValue = _a11.candidateValue, minValue = _a11.minValue, maxValue = _a11.maxValue;
  return minValue <= candidateValue && candidateValue <= maxValue;
};

// node_modules/@progress/kendo-vue-dateinputs/dist/es/dateinput/DateInput.js
var allVue10 = vue_runtime_esm_bundler_exports;
var gh10 = allVue10.h;
var isV310 = allVue10.version && allVue10.version[0] === "3";
var ref = allVue10.ref;
var inject5 = allVue10.inject;
var VALIDATION_MESSAGE = "Please enter a valid value!";
var DateInputVue2 = {
  name: "DateInput",
  model: {
    event: "changemodel"
  },
  inject: {
    kendoIntlService: {
      default: null
    },
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  emits: {
    "change": null,
    "changemodel": null,
    "update:modelValue": null,
    "focus": null,
    "blur": null
  },
  props: {
    modelValue: Date,
    value: Date,
    defaultValue: Date,
    format: {
      type: [String, Object],
      default: function _default8() {
        return defaultFormat;
      }
    },
    formatPlaceholder: {
      type: [String, Object],
      default: function _default9() {
        return defaultFormatPlaceholder;
      }
    },
    rounded: {
      type: String,
      default: "medium",
      validator: function validator(value2) {
        return ["small", "medium", "large", "full"].includes(value2);
      }
    },
    fillMode: {
      type: String,
      default: "solid",
      validator: function validator2(value2) {
        return ["solid", "flat", "outline"].includes(value2);
      }
    },
    size: {
      type: String,
      default: "medium",
      validator: function validator3(value2) {
        return ["small", "medium", "large"].includes(value2);
      }
    },
    tabIndex: Number,
    title: String,
    steps: Object,
    placeholder: String,
    max: {
      type: Date,
      default: function _default10() {
        return cloneDate2(MAX_DATE);
      }
    },
    min: {
      type: Date,
      default: function _default11() {
        return cloneDate2(MIN_DATE);
      }
    },
    maxTime: {
      type: Date,
      default: function _default12() {
        return cloneDate2(MAX_TIME2);
      }
    },
    minTime: {
      type: Date,
      default: function _default13() {
        return cloneDate2(MIN_TIME2);
      }
    },
    disabled: {
      type: Boolean,
      default: false
    },
    spinners: {
      type: Boolean,
      default: false
    },
    name: String,
    dir: String,
    label: String,
    id: String,
    validationMessage: {
      type: String,
      default: VALIDATION_MESSAGE
    },
    required: {
      type: Boolean,
      default: false
    },
    validityStyles: {
      type: Boolean,
      default: true
    },
    validate: Boolean,
    valid: {
      type: Boolean,
      default: void 0
    },
    ariaRole: {
      type: String,
      default: "textbox"
    },
    ariaControls: String,
    ariaLabel: String,
    ariaExpanded: {
      type: Boolean,
      default: void 0
    },
    ariaHasPopup: {
      type: String,
      default: void 0
    }
  },
  data: function data4() {
    return {
      kendoDate: null,
      currentFormat: void 0,
      valueDuringOnChange: void 0,
      hasMounted: false,
      isEmpty: void 0,
      lastSelectedSymbol: void 0,
      isFocused: false
    };
  },
  created: function created3() {
    validatePackage(packageMetadata);
    var _a11 = this.$props, formatPlaceholder = _a11.formatPlaceholder, format = _a11.format, value2 = _a11.value, defaultValue = _a11.defaultValue;
    this.kendoDate = new KendoDate(this.intl, formatPlaceholder, format);
    this.kendoDate.setValue(null);
    this._emptyText = this.kendoDate.getTextAndFormat().text;
    this.kendoDate.setValue(value2 || defaultValue || null);
    this._element = null;
    this._inputId = guid();
  },
  computed: {
    computedValue: {
      get: function get9() {
        if (this.$data.valueDuringOnChange !== void 0) {
          return this.$data.valueDuringOnChange;
        }
        return this.kendoDate && this.kendoDate.getDateObject();
      }
    },
    wrapperClassNames: {
      get: function get10() {
        var _a11;
        var isValid = !this.$data.hasMounted || !this.$props.validityStyles || this.validity().valid;
        var disabled = this.$props.disabled;
        var _b4 = this.$props, size = _b4.size, fillMode = _b4.fillMode, rounded = _b4.rounded;
        return _a11 = {
          "k-dateinput": true,
          "k-input": true
        }, _a11["k-input-".concat(kendoThemeMaps.sizeMap[size] || size)] = size, _a11["k-input-".concat(fillMode)] = fillMode, _a11["k-rounded-".concat(kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _a11["k-disabled"] = disabled, _a11["k-invalid"] = !isValid && isValid !== void 0, _a11["k-focus"] = this.isFocused, _a11["k-rtl"] = this.$props.dir === "rtl", _a11;
      }
    }
  },
  methods: {
    selection: function selection() {
      var returnValue = {
        start: 0,
        end: 0
      };
      var element3 = this.element();
      if (element3 !== null && element3.selectionStart !== void 0) {
        returnValue = {
          start: element3.selectionStart,
          end: element3.selectionEnd
        };
      }
      return returnValue;
    },
    element: function element2() {
      return this._element;
    },
    focus: function focus2(e) {
      if (this._element) {
        this._element.focus(e);
      }
    },
    handleFocus: function handleFocus3(e) {
      this.$data.isFocused = true;
      this.$emit("focus", e);
    },
    handleBlur: function handleBlur3(e) {
      this.$data.isFocused = false;
      this.$emit("blur", e);
    },
    intl: function intl() {
      return provideIntlService(this);
    },
    setValidity: function setValidity() {
      var element3 = this.element();
      if (element3 && element3.setCustomValidity) {
        element3.setCustomValidity(this.validity().valid ? "" : this.$props.validationMessage);
      }
    },
    spinnersMouseDown: function spinnersMouseDown(event2) {
      var element3 = this.element();
      event2.preventDefault();
      if (element3 && canUseDOM && document.activeElement !== element3) {
        element3.focus({
          preventScroll: true
        });
      }
    },
    elementChange: function elementChange(event2) {
      var element3 = this.element();
      if (!element3 || !this.kendoDate) {
        return;
      }
      var _a11 = this.kendoDate.getTextAndFormat(), text = _a11.text, currentFormat = _a11.format;
      this.$data.currentFormat = currentFormat;
      var dateBeforeChange = this.computedValue;
      var diff = approximateStringMatching(text, this.$data.currentFormat, element3.value, this.selection().start);
      var navigationOnly = diff.length === 1 && diff[0][1] === "_";
      if (!navigationOnly) {
        for (var i = 0; i < diff.length; i++) {
          this.kendoDate.parsePart(diff[i][0], diff[i][1]);
        }
      }
      if (diff.length && diff[0][0] !== "_") {
        this.setSelection(this.selectionBySymbol(diff[0][0]));
      }
      if (navigationOnly) {
        this.switchDateSegment(1);
      }
      this.triggerChange(event2, dateBeforeChange);
    },
    elementClick: function elementClick(_) {
      this.setSelection(this.selectionByIndex(this.selection().start));
    },
    wheel: function wheel(event2) {
      var element3 = this.element();
      if (canUseDOM && document.activeElement !== element3) {
        return;
      }
      if (event2.deltaY < 0) {
        event2.preventDefault();
        this.increasePart(event2);
      }
      if (event2.deltaY > 0) {
        event2.preventDefault();
        this.decreasePart(event2);
      }
    },
    increasePart: function increasePart(event2) {
      event2.preventDefault();
      this.modifyDateSegmentValue(1, event2);
    },
    decreasePart: function decreasePart(event2) {
      event2.preventDefault();
      this.modifyDateSegmentValue(-1, event2);
    },
    elementKeyDown: function elementKeyDown(event2) {
      if (event2.altKey) {
        return;
      }
      switch (event2.keyCode) {
        case 37:
          this.switchDateSegment(-1);
          break;
        case 38:
          this.modifyDateSegmentValue(1, event2);
          break;
        case 39:
          this.switchDateSegment(1);
          break;
        case 40:
          this.modifyDateSegmentValue(-1, event2);
          break;
        default:
          return;
      }
      event2.preventDefault();
    },
    setSelection: function setSelection(selection2) {
      var element3 = this.element();
      this.$data.lastSelectedSymbol = this.$data.currentFormat[selection2.start];
      if (canUseDOM) {
        window.requestAnimationFrame(function() {
          if (element3 && canUseDOM && document.activeElement === element3) {
            element3.setSelectionRange(selection2.start, selection2.end);
          }
        });
      }
    },
    triggerChange: function triggerChange2(event2, oldValue) {
      this.$data.valueDuringOnChange = this.computedValue;
      if (!isEqual(oldValue, this.computedValue)) {
        this.$emit("changemodel", this.computedValue);
        this.$emit("update:modelValue", this.computedValue);
        this.$emit("change", {
          event: event2,
          value: this.computedValue,
          component: this,
          target: {
            name: this.$props.name,
            value: this.$data.valueDuringOnChange,
            valueAsDate: this.$data.valueDuringOnChange
          },
          validity: this.validity()
        });
      }
      this.$data.valueDuringOnChange = void 0;
    },
    selectionBySymbol: function selectionBySymbol(symbol) {
      var start2 = -1;
      var end2 = 0;
      for (var i = 0; i < this.$data.currentFormat.length; i++) {
        if (this.$data.currentFormat[i] === symbol) {
          end2 = i + 1;
          if (start2 === -1) {
            start2 = i;
          }
        }
      }
      if (start2 < 0) {
        start2 = 0;
      }
      return {
        start: start2,
        end: end2
      };
    },
    selectionByIndex: function selectionByIndex(index) {
      var selection2 = {
        start: index,
        end: index
      };
      for (var i = index, j = index - 1; i < this.$data.currentFormat.length || j >= 0; i++, j--) {
        if (i < this.$data.currentFormat.length && this.$data.currentFormat[i] !== "_") {
          selection2 = this.selectionBySymbol(this.$data.currentFormat[i]);
          break;
        }
        if (j >= 0 && this.$data.currentFormat[j] !== "_") {
          selection2 = this.selectionBySymbol(this.$data.currentFormat[j]);
          break;
        }
      }
      return selection2;
    },
    switchDateSegment: function switchDateSegment(offset2) {
      var _a11 = this.selection(), selectionStart = _a11.start, selectionEnd = _a11.end;
      if (selectionStart < selectionEnd && this.$data.currentFormat[selectionStart] !== this.$data.currentFormat[selectionEnd - 1]) {
        this.setSelection(this.selectionByIndex(offset2 > 0 ? selectionStart : selectionEnd - 1));
        return;
      }
      var previousFormatSymbol = this.$data.currentFormat[selectionStart];
      var a = selectionStart + offset2;
      while (a > 0 && a < this.$data.currentFormat.length) {
        if (this.$data.currentFormat[a] !== previousFormatSymbol && this.$data.currentFormat[a] !== "_") {
          break;
        }
        a += offset2;
      }
      if (this.$data.currentFormat[a] === "_") {
        return;
      }
      var b = a;
      while (b >= 0 && b < this.$data.currentFormat.length) {
        if (this.$data.currentFormat[b] !== this.$data.currentFormat[a]) {
          break;
        }
        b += offset2;
      }
      if (a > b && (b + 1 !== selectionStart || a + 1 !== selectionEnd)) {
        this.setSelection({
          start: b + 1,
          end: a + 1
        });
      } else if (a < b && (a !== selectionStart || b !== selectionEnd)) {
        this.setSelection({
          start: a,
          end: b
        });
      }
    },
    modifyDateSegmentValue: function modifyDateSegmentValue(offset2, event2) {
      if (!this.kendoDate) {
        return;
      }
      var oldValue = this.computedValue;
      var symbol = this.$data.currentFormat[this.selection().start];
      var currentStepSymbol = this.kendoDate.symbolMap(symbol);
      var step = ((this.$props.steps || {})[currentStepSymbol] || 1) * offset2;
      this.kendoDate.modifyPart(symbol, step);
      this.setSelection(this.selectionBySymbol(symbol));
      this.triggerChange(event2, oldValue);
    },
    validity: function validity() {
      var inRange2 = isInRange2(this.computedValue, this.$props.min, this.$props.max) && isInTimeRange(this.computedValue, this.$props.minTime, this.$props.maxTime);
      var customError = this.$props.validationMessage !== void 0;
      var isValid = (!this.$props.required || this.computedValue !== null) && inRange2;
      var valid = this.$props.valid !== void 0 ? this.$props.valid : isValid;
      return {
        customError,
        rangeOverflow: this.computedValue && this.$props.max.getTime() < this.computedValue.getTime() || false,
        rangeUnderflow: this.computedValue && this.computedValue.getTime() < this.$props.min.getTime() || false,
        valid,
        valueMissing: this.computedValue === null
      };
    }
  },
  mounted: function mounted4() {
    this._element = getRef(this, "input");
    this.setValidity();
    this.$data.hasMounted = true;
  },
  updated: function updated4() {
    if (this.$data.lastSelectedSymbol) {
      this.setSelection(this.selectionBySymbol(this.$data.lastSelectedSymbol));
    }
    this.setValidity();
  },
  // @ts-ignore
  setup: !isV310 ? void 0 : function() {
    var v3 = !!isV310;
    var inputRef = ref(null);
    var kendoIntlService = inject5("kendoIntlService", {});
    var kendoLocalizationService = inject5("kendoLocalizationService", {});
    return {
      v3,
      inputRef,
      kendoIntlService,
      kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render10(createElement) {
    var h = gh10 || createElement;
    var defaultSlot = getDefaultSlots(this);
    var localizationService = provideLocalizationService(this);
    var _a11 = this.$props, formatPlaceholder = _a11.formatPlaceholder, format = _a11.format, value2 = _a11.value, modelValue = _a11.modelValue, name = _a11.name, label = _a11.label, id = _a11.id, ariaLabel = _a11.ariaLabel, ariaExpanded = _a11.ariaExpanded, ariaHasPopup = _a11.ariaHasPopup, ariaRole = _a11.ariaRole, ariaControls = _a11.ariaControls;
    var currentValue = value2 !== void 0 ? value2 : modelValue;
    this.kendoDate.format = format;
    this.kendoDate.formatPlaceholder = formatPlaceholder;
    this.valueDuringOnChange = this.valueDuringOnChange ? this.valueDuringOnChange : void 0;
    if (currentValue !== void 0 && this.computedValue !== currentValue) {
      this.kendoDate.setValue(currentValue);
    }
    var _b4 = this.kendoDate.getTextAndFormat(), currentText = _b4.text, currentFormat = _b4.format;
    this.$data.currentFormat = currentFormat;
    this.$data.isEmpty = currentText === this._emptyText;
    var showPlaceHolder = this.$props.placeholder !== void 0 && this.$data.isEmpty && !this.$data.isFocused;
    var textToDisplay = !showPlaceHolder ? currentText : null;
    var inputId = id || this._inputId;
    var isValid = !this.$props.validityStyles || this.validity().valid;
    var dateinput = h("span", {
      "class": this.wrapperClassNames,
      dir: this.$props.dir,
      attrs: this.v3 ? void 0 : {
        dir: this.$props.dir
      }
    }, [h("input", {
      role: ariaRole,
      attrs: this.v3 ? void 0 : {
        role: ariaRole,
        tabindex: this.$props.tabIndex,
        disabled: this.$props.disabled,
        title: this.$props.title !== void 0 ? this.$props.title : currentText,
        type: "text",
        spellcheck: false,
        autocomplete: "off",
        autocorrect: "off",
        id: inputId,
        placeholder: this.$props.placeholder,
        name,
        "aria-label": ariaLabel,
        "aria-expanded": ariaExpanded,
        "aria-haspopup": ariaHasPopup,
        "aria-controls": ariaControls,
        "aria-disabled": this.$props.disabled
      },
      tabindex: this.$props.tabIndex,
      disabled: this.$props.disabled,
      title: this.$props.title !== void 0 ? this.$props.title : currentText,
      type: "text",
      spellcheck: false,
      autocomplete: "off",
      autocorrect: "off",
      "class": "k-input-inner",
      id: inputId,
      placeholder: this.$props.placeholder,
      onWheel: this.wheel,
      on: this.v3 ? void 0 : {
        "wheel": this.wheel,
        "click": this.elementClick,
        "input": this.elementChange,
        "keydown": this.elementKeyDown,
        "change": noop,
        "focusin": this.handleFocus,
        "focusout": this.handleBlur
      },
      onClick: this.elementClick,
      onInput: this.elementChange,
      onKeydown: this.elementKeyDown,
      onChange: noop,
      onFocusin: this.handleFocus,
      onFocusout: this.handleBlur,
      value: this.v3 ? textToDisplay : null,
      domProps: this.v3 ? void 0 : {
        "value": textToDisplay
      },
      name,
      "aria-label": ariaLabel,
      "aria-expanded": ariaExpanded,
      "aria-haspopup": ariaHasPopup,
      "aria-controls": ariaControls,
      "aria-disabled": this.$props.disabled,
      ref: setRef(this, "input")
    }), defaultSlot, this.$props.spinners && h("span", {
      "class": "k-input-spinner k-spin-button",
      onMousedown: this.spinnersMouseDown,
      on: this.v3 ? void 0 : {
        "mousedown": this.spinnersMouseDown
      }
    }, [
      // @ts-ignore
      h(Button, {
        type: "button",
        attrs: this.v3 ? void 0 : {
          type: "button",
          tabIndex: -1,
          icon: "caret-alt-up",
          svgIcon: caretAltUpIcon,
          size: this.$props.size,
          fillMode: this.$props.fillMode,
          "aria-label": localizationService.toLanguageString(increaseValue, messages2[increaseValue]),
          title: localizationService.toLanguageString(increaseValue, messages2[increaseValue])
        },
        tabIndex: -1,
        icon: "caret-alt-up",
        svgIcon: caretAltUpIcon,
        size: this.$props.size,
        fillMode: this.$props.fillMode,
        "class": "k-spinner-increase",
        "aria-label": localizationService.toLanguageString(increaseValue, messages2[increaseValue]),
        title: localizationService.toLanguageString(increaseValue, messages2[increaseValue]),
        onClick: this.increasePart,
        on: this.v3 ? void 0 : {
          "click": this.increasePart
        }
      }),
      // @ts-ignore
      h(Button, {
        type: "button",
        attrs: this.v3 ? void 0 : {
          type: "button",
          tabIndex: -1,
          icon: "caret-alt-down",
          svgIcon: caretAltDownIcon,
          size: this.$props.size,
          fillMode: this.$props.fillMode,
          "aria-label": localizationService.toLanguageString(decreaseValue, messages2[decreaseValue]),
          title: localizationService.toLanguageString(decreaseValue, messages2[decreaseValue])
        },
        tabIndex: -1,
        "class": "k-spinner-decrease",
        icon: "caret-alt-down",
        svgIcon: caretAltDownIcon,
        size: this.$props.size,
        fillMode: this.$props.fillMode,
        "aria-label": localizationService.toLanguageString(decreaseValue, messages2[decreaseValue]),
        title: localizationService.toLanguageString(decreaseValue, messages2[decreaseValue]),
        onClick: this.decreasePart,
        on: this.v3 ? void 0 : {
          "click": this.decreasePart
        }
      })
    ])]);
    return label ? (
      // @ts-ignore function children
      h(FloatingLabel, {
        label,
        attrs: this.v3 ? void 0 : {
          label,
          editorId: inputId,
          editorValue: textToDisplay,
          editorPlaceholder: this.$props.placeholder,
          editorValid: isValid,
          editorDisabled: this.$props.disabled
        },
        editorId: inputId,
        editorValue: textToDisplay,
        editorPlaceholder: this.$props.placeholder,
        editorValid: isValid,
        editorDisabled: this.$props.disabled
      }, this.v3 ? function() {
        return [dateinput];
      } : [dateinput])
    ) : dateinput;
  }
};
var DateInput = DateInputVue2;

// node_modules/@progress/kendo-vue-dateinputs/dist/es/datepicker/ToggleButton.js
var ToggleButtonVue2 = Button;
var ToggleButton = ToggleButtonVue2;

// node_modules/@progress/kendo-vue-dateinputs/dist/es/datepicker/DatePicker.js
var allVue11 = vue_runtime_esm_bundler_exports;
var gh11 = allVue11.h;
var isV311 = allVue11.version && allVue11.version[0] === "3";
var ref2 = allVue11.ref;
var inject6 = allVue11.inject;
var DatePickerVue2 = {
  name: "DatePicker",
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  model: {
    event: "changemodel"
  },
  // @ts-ignore
  emits: {
    "change": null,
    "changemodel": null,
    "update:modelValue": null,
    "iconclick": null,
    "focus": null,
    "blur": null,
    "keydown": null,
    "open": null,
    "close": null
  },
  props: {
    defaultShow: {
      type: Boolean,
      default: false
    },
    modelValue: {
      type: Date,
      default: void 0
    },
    defaultValue: {
      type: Date,
      default: void 0
    },
    disabled: {
      type: Boolean,
      default: false
    },
    dateInput: {
      type: [String, Object, Function],
      default: function _default14() {
        return void 0;
      }
    },
    calendar: {
      type: [String, Object, Function],
      default: function _default15() {
        return void 0;
      }
    },
    toggleButton: {
      type: [String, Object, Function],
      default: function _default16() {
        return void 0;
      }
    },
    label: String,
    placeholder: String,
    popup: {
      type: [String, Object, Function],
      default: function _default17() {
        return void 0;
      }
    },
    rounded: {
      type: String,
      default: "medium",
      validator: function validator4(value2) {
        return ["small", "medium", "large", "full"].includes(value2);
      }
    },
    fillMode: {
      type: String,
      default: "solid",
      validator: function validator5(value2) {
        return ["solid", "flat", "outline"].includes(value2);
      }
    },
    size: {
      type: String,
      default: "medium",
      validator: function validator6(value2) {
        return ["small", "medium", "large"].includes(value2);
      }
    },
    focusedDate: Date,
    format: {
      type: [Object, String],
      default: function _default18() {
        return "d";
      }
    },
    formatPlaceholder: [Object, String],
    id: String,
    max: {
      type: Date,
      default: function _default19() {
        return cloneDate2(MAX_DATE);
      }
    },
    min: {
      type: Date,
      default: function _default20() {
        return cloneDate2(MIN_DATE);
      }
    },
    name: String,
    popupSettings: {
      type: Object,
      default: function _default21() {
        return {};
      }
    },
    show: {
      type: Boolean,
      default: void 0
    },
    tabIndex: {
      type: Number,
      default: 0
    },
    title: {
      type: String,
      default: function _default22() {
        return "";
      }
    },
    value: Date,
    weekNumber: Boolean,
    width: [Number, String],
    validityStyles: {
      type: Boolean,
      default: true
    },
    validationMessage: String,
    required: Boolean,
    validate: Boolean,
    valid: {
      type: Boolean,
      default: void 0
    },
    ariaLabel: String
  },
  data: function data5() {
    return {
      isFocused: false,
      currentValue: void 0,
      currentShow: void 0,
      valueDuringOnChange: void 0,
      showDuringOnChange: void 0,
      shouldFocusDateInput: false
    };
  },
  created: function created4() {
    validatePackage(packageMetadata);
    this._popupId = guid();
    this._anchor = guid();
    this._dateInput = null;
    this._calendar = null;
    this.$data.currentValue = this.$props.defaultValue;
    this.$data.currentShow = this.$props.defaultShow;
  },
  mounted: function mounted5() {
    this._dateInput = getRef(this, "dateInput");
    if (this.$refs.calendar || this.calendarRef) {
      this._calendar = getRef(this, "calendar");
    }
    if (this.computedShow) {
      this.$forceUpdate();
    }
  },
  updated: function updated5() {
    if (this.$refs.calendar || this.calendarRef) {
      this._calendar = getRef(this, "calendar");
    }
    if (this.computedShow) {
      if (this._calendar && this._calendar.$el && !this._oldShow) {
        this._calendar.focus({
          preventScroll: true
        });
      }
    } else {
      if (this._dateInput && this._dateInput.$el && this.$data.shouldFocusDateInput) {
        this._dateInput.focus({
          preventScroll: true
        });
      }
    }
    this.$data.shouldFocusDateInput = false;
  },
  watch: {
    show: function show(_newShow, oldShow) {
      this._oldShow = oldShow;
    },
    currentShow: function currentShow(_newShow, oldShow) {
      this._oldShow = oldShow;
    }
  },
  computed: {
    computedValue: {
      get: function get11() {
        var value2 = this.$data.valueDuringOnChange !== void 0 ? this.$data.valueDuringOnChange : this.$props.value !== void 0 ? this.$props.value : this.$props.modelValue !== void 0 ? this.$props.modelValue : this.$data.currentValue;
        return value2 !== null ? cloneDate2(value2) : null;
      }
    },
    computedShow: {
      get: function get12() {
        return this.$data.showDuringOnChange !== void 0 ? this.$data.showDuringOnChange : this.$props.show !== void 0 ? this.$props.show : this.$data.currentShow;
      }
    }
  },
  methods: {
    focus: function focus3() {
      if (this._dateInput) {
        this._dateInput.focus();
      }
    },
    handleFocus: function handleFocus4(event2) {
      this._oldShow = this.computedShow;
      this.$data.isFocused = true;
      this.$emit("focus", event2);
    },
    handleBlur: function handleBlur4(event2) {
      this.$data.isFocused = false;
      this.createBlurTimeout();
      this.$emit("blur", event2);
    },
    calendarBlur: function calendarBlur() {
      this.$emit("blur", event);
      clearTimeout(this._blurTimeout);
      this.createBlurTimeout();
    },
    calendarFocus: function calendarFocus() {
      this.$emit("focus", event);
      clearTimeout(this._blurTimeout);
    },
    createBlurTimeout: function createBlurTimeout() {
      var _this = this;
      this._blurTimeout = setTimeout(function() {
        if (_this._dateInput && canUseDOM && document.activeElement !== _this._dateInput._element) {
          _this.setShow(false);
        }
      }, 200);
    },
    validity: function validity2() {
      var value2 = this.computedValue;
      var inRange2 = isInDateRange(value2, this.$props.min, this.$props.max);
      var customError = this.$props.validationMessage !== void 0;
      var isValid = (!this.$props.required || value2 !== null) && inRange2;
      var valid = this.$props.valid !== void 0 ? this.$props.valid : isValid;
      return {
        customError,
        rangeOverflow: value2 && this.$props.max.getTime() < value2.getTime() || false,
        rangeUnderflow: value2 && value2.getTime() < this.$props.min.getTime() || false,
        valid,
        valueMissing: value2 === null
      };
    },
    nextValue: function nextValue(nextProps, nextState) {
      return nextProps.value !== void 0 ? nextProps.value : nextState.value;
    },
    nextShow: function nextShow(nextProps, nextState) {
      return nextProps.show !== void 0 ? nextProps.show : nextState.show;
    },
    setShow: function setShow(show2) {
      if (this.computedShow === show2) {
        return;
      }
      this.$data.currentShow = show2;
      this.$emit(show2 ? "open" : "close", {
        component: this
      });
    },
    mergeTime: function mergeTime(value2) {
      return this.computedValue && value2 ? setTime(value2, this.computedValue) : value2;
    },
    handleInputValueChange: function handleInputValueChange(event2) {
      this.handleValueChange(event2.value, event2);
    },
    handleCalendarValueChange: function handleCalendarValueChange(event2) {
      var value2 = this.mergeTime(event2.value);
      this.handleValueChange(value2, event2);
    },
    getDateInputText: function getDateInputText() {
      return this.computedValue ? true : this._dateInput ? this._dateInput._element.value : "";
    },
    handleValueChange: function handleValueChange(value2, event2) {
      this.$data.currentValue = cloneDate2(value2 || void 0);
      this.$data.valueDuringOnChange = value2;
      this.$data.showDuringOnChange = false;
      this.$data.shouldFocusDateInput = true;
      this.$emit("changemodel", this.computedValue);
      this.$emit("update:modelValue", this.computedValue);
      this.$emit("change", {
        event: event2.event,
        value: this.computedValue,
        show: this.computedShow,
        component: this,
        target: {
          name: this.$props.name,
          value: this.computedValue,
          valueAsDate: this.computedValue
        },
        validity: this.validity()
      });
      this.$data.valueDuringOnChange = void 0;
      this.$data.showDuringOnChange = void 0;
      this.setShow(false);
    },
    handleIconClick: function handleIconClick(event2) {
      event2.stopPropagation();
      event2.preventDefault();
      if (this.$props.disabled) {
        return;
      }
      this.$data.shouldFocusDateInput = true;
      this.$emit("iconclick", event2);
      this.setShow(!this.computedShow);
    },
    handleIconMouseDown: function handleIconMouseDown(event2) {
      event2.stopPropagation();
      event2.preventDefault();
    },
    handleKeyDown: function handleKeyDown2(event2) {
      var altKey = event2.altKey, keyCode = event2.keyCode;
      if (keyCode === Keys.tab && this._dateInput && event2.target !== this._dateInput._element) {
        event2.preventDefault();
        this.$data.shouldFocusDateInput = true;
        this.setShow(false);
        return;
      }
      if (keyCode === Keys.esc) {
        this.$data.shouldFocusDateInput = true;
        this.setShow(false);
        return;
      }
      if (altKey && (keyCode === Keys.up || keyCode === Keys.down)) {
        event2.preventDefault();
        event2.stopPropagation();
        this.$data.shouldFocusDateInput = keyCode === Keys.up;
        this.setShow(keyCode === Keys.down);
      }
      this.$emit("keydown", event2);
    }
  },
  // @ts-ignore
  setup: !isV311 ? void 0 : function() {
    var v3 = !!isV311;
    var listRef = ref2(null);
    var kendoAnchorRef = ref2(null);
    var kendoLocalizationService = inject6("kendoLocalizationService", {});
    return {
      v3,
      listRef,
      kendoAnchorRef,
      kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render11(createElement) {
    var _a11;
    var h = gh11 || createElement;
    var defaultSlot = getDefaultSlots(this);
    var _b4 = this.$props, disabled = _b4.disabled, tabIndex = _b4.tabIndex, title = _b4.title, id = _b4.id, format = _b4.format, formatPlaceholder = _b4.formatPlaceholder, min = _b4.min, max = _b4.max, weekNumber = _b4.weekNumber, focusedDate2 = _b4.focusedDate, width = _b4.width, name = _b4.name, validationMessage = _b4.validationMessage, required = _b4.required, validityStyles = _b4.validityStyles, size = _b4.size, fillMode = _b4.fillMode, rounded = _b4.rounded, ariaLabel = _b4.ariaLabel;
    var _c3 = this.$props.popupSettings, popupClass = _c3.popupClass, animate = _c3.animate, appendTo = _c3.appendTo;
    var show2 = this.computedShow;
    var value2 = this.computedValue;
    var sanitizedValue = value2 && getDate(value2);
    var isValid = !this.$props.validityStyles || this.validity().valid;
    var popupClassNames = classNames("k-calendar-container k-group k-reset", popupClass);
    var toggleButton = this.$props.toggleButton ? templateRendering.call(this, this.$props.toggleButton, getListeners.call(this)) : void 0;
    var toggleButtonDefaultRendering = (
      // @ts-ignore
      h(ToggleButton, {
        type: "button",
        attrs: this.v3 ? void 0 : {
          type: "button",
          tabIndex: -1,
          icon: "calendar",
          svgIcon: calendarIcon,
          title: provideLocalizationService(this).toLanguageString(toggleCalendar, messages2[toggleCalendar]),
          "aria-label": provideLocalizationService(this).toLanguageString(toggleCalendar, messages2[toggleCalendar]),
          rounded: null
        },
        tabIndex: -1,
        icon: "calendar",
        svgIcon: calendarIcon,
        onMousedown: this.handleIconMouseDown,
        on: this.v3 ? void 0 : {
          "mousedown": this.handleIconMouseDown,
          "click": this.handleIconClick
        },
        onClick: this.handleIconClick,
        title: provideLocalizationService(this).toLanguageString(toggleCalendar, messages2[toggleCalendar]),
        "aria-label": provideLocalizationService(this).toLanguageString(toggleCalendar, messages2[toggleCalendar]),
        rounded: null,
        "class": "k-input-button"
      })
    );
    var toggleButtonRendering = getTemplate.call(this, {
      h,
      template: toggleButton,
      defaultRendering: toggleButtonDefaultRendering,
      defaultSlots: h(Icon, {
        name: "calendar",
        attrs: this.v3 ? void 0 : {
          name: "calendar",
          icon: calendarIcon
        },
        icon: calendarIcon
      }),
      additionalListeners: {
        click: this.handleIconClick
      }
    });
    var dateInput = this.$props.dateInput ? templateRendering.call(this, this.$props.dateInput, getListeners.call(this)) : void 0;
    var dateInputDefaultRendering = (
      // @ts-ignore
      h(DateInput, {
        ref: setRef(this, "dateInput"),
        placeholder: this.$props.placeholder,
        attrs: this.v3 ? void 0 : {
          placeholder: this.$props.placeholder,
          disabled,
          format,
          formatPlaceholder,
          id,
          max,
          min,
          name,
          size: null,
          rounded: null,
          fillMode: null,
          required,
          tabIndex: !show2 ? tabIndex : -1,
          title,
          valid: this.validity().valid,
          validationMessage,
          validityStyles,
          value: value2,
          ariaHasPopup: "grid",
          ariaExpanded: show2,
          ariaRole: "combobox",
          ariaControls: this._popupId,
          ariaLabel
        },
        disabled,
        format,
        formatPlaceholder,
        id,
        max,
        min,
        name,
        size: null,
        rounded: null,
        fillMode: null,
        onChange: this.handleInputValueChange,
        on: this.v3 ? void 0 : {
          "change": this.handleInputValueChange
        },
        required,
        tabIndex: !show2 ? tabIndex : -1,
        title,
        valid: this.validity().valid,
        validationMessage,
        validityStyles,
        value: value2,
        ariaHasPopup: "grid",
        ariaExpanded: show2,
        ariaRole: "combobox",
        ariaControls: this._popupId,
        ariaLabel
      })
    );
    var dateInputRendering = getTemplate.call(this, {
      h,
      template: dateInput,
      defaultRendering: dateInputDefaultRendering
    });
    var calendar = this.$props.calendar ? templateRendering.call(this, this.$props.calendar, getListeners.call(this)) : void 0;
    var calendarDefaultRendering = (
      // @ts-ignore
      h(Calendar, {
        ref: setRef(this, "calendar"),
        onKeydown: this.handleKeyDown,
        on: this.v3 ? void 0 : {
          "keydown": this.handleKeyDown,
          "focus": this.calendarFocus,
          "blur": this.calendarBlur,
          "change": this.handleCalendarValueChange
        },
        onFocus: this.calendarFocus,
        onBlur: this.calendarBlur,
        disabled,
        attrs: this.v3 ? void 0 : {
          disabled,
          value: sanitizedValue,
          min,
          max,
          weekNumber,
          focusedDate: focusedDate2
        },
        value: sanitizedValue,
        min,
        max,
        weekNumber,
        focusedDate: focusedDate2,
        onChange: this.handleCalendarValueChange
      })
    );
    var calendarRendering = getTemplate.call(this, {
      h,
      template: calendar,
      defaultRendering: calendarDefaultRendering
    });
    var popup = this.$props.popup ? templateRendering.call(this, this.$props.popup, getListeners.call(this)) : void 0;
    var popupDefaultRendering = (
      // @ts-ignore function children
      h(Popup, {
        show: show2,
        attrs: this.v3 ? void 0 : {
          show: show2,
          anchor: this._anchor,
          id: this._popupId,
          anchorAlign: {
            horizontal: "left",
            vertical: "bottom"
          },
          popupAlign: {
            horizontal: "left",
            vertical: "top"
          },
          animate,
          appendTo
        },
        anchor: this._anchor,
        "class": popupClassNames,
        id: this._popupId,
        anchorAlign: {
          horizontal: "left",
          vertical: "bottom"
        },
        popupAlign: {
          horizontal: "left",
          vertical: "top"
        },
        animate,
        appendTo
      }, this.v3 ? function() {
        return [calendarRendering];
      } : [calendarRendering])
    );
    var popupRendering = getTemplate.call(this, {
      h,
      template: popup,
      defaultRendering: popupDefaultRendering,
      defaultSlots: calendarRendering
    });
    var datepicker = h("span", {
      ref: setRef(this, "kendoAnchor", this._anchor),
      role: "group",
      attrs: this.v3 ? void 0 : {
        role: "group"
      },
      "class": classNames("k-input", "k-datepicker", (_a11 = {}, _a11["k-input-".concat(kendoThemeMaps.sizeMap[size] || size)] = size, _a11["k-input-".concat(fillMode)] = fillMode, _a11["k-rounded-".concat(kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _a11["k-invalid"] = !isValid, _a11["k-required"] = this.required, _a11["k-disabled"] = this.$props.disabled, _a11["k-focus"] = this.$data.isFocused, _a11)),
      onKeydown: this.handleKeyDown,
      on: this.v3 ? void 0 : {
        "keydown": this.handleKeyDown,
        "focusin": this.handleFocus,
        "focusout": this.handleBlur
      },
      onFocusin: this.handleFocus,
      onFocusout: this.handleBlur
    }, [dateInputRendering, toggleButtonRendering, popupRendering]);
    return this.$props.label ? (
      // @ts-ignore function children
      h(FloatingLabel, {
        label: this.$props.label,
        attrs: this.v3 ? void 0 : {
          label: this.$props.label,
          editorId: id,
          editorValid: isValid,
          editorValue: this.getDateInputText(),
          editorPlaceholder: this.$props.placeholder,
          editorDisabled: this.$props.disabled
        },
        editorId: id,
        editorValid: isValid,
        editorValue: this.getDateInputText(),
        editorPlaceholder: this.$props.placeholder,
        editorDisabled: this.$props.disabled,
        style: {
          width
        }
      }, this.v3 ? function() {
        return [datepicker];
      } : [datepicker])
    ) : datepicker;
  }
};
var DatePicker = DatePickerVue2;

// node_modules/@progress/kendo-vue-dateinputs/dist/es/virtualization/services/RowHeightService.js
var __spreadArray = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var update = function(arr, idx, value2) {
  return __spreadArray(__spreadArray([], arr.slice(0, idx + 1), true), arr.slice(idx + 1).map(function(x) {
    return x + value2;
  }), true);
};
var RowHeightService = (
  /** @class */
  function() {
    function RowHeightService2(total, rowHeight, detailRowHeight) {
      if (total === void 0) {
        total = 0;
      }
      this.total = total;
      this.rowHeight = rowHeight;
      this.detailRowHeight = detailRowHeight;
      this.offsets = [];
      this.heights = [];
      var agg = 0;
      for (var idx = 0; idx < total; idx++) {
        this.offsets.push(agg);
        agg += rowHeight;
        this.heights.push(rowHeight);
      }
    }
    RowHeightService2.prototype.height = function(rowIndex) {
      return this.heights[rowIndex];
    };
    RowHeightService2.prototype.expandDetail = function(rowIndex) {
      if (this.height(rowIndex) === this.rowHeight) {
        this.updateRowHeight(rowIndex, this.detailRowHeight);
      }
    };
    RowHeightService2.prototype.collapseDetail = function(rowIndex) {
      if (this.height(rowIndex) > this.rowHeight) {
        this.updateRowHeight(rowIndex, this.detailRowHeight * -1);
      }
    };
    RowHeightService2.prototype.index = function(position) {
      for (var i = 0; i < this.offsets.length; i++) {
        if (position === this.offsets[i]) {
          return i;
        }
        if (position < this.offsets[i]) {
          return i - 1;
        }
      }
      return this.total - 1;
    };
    RowHeightService2.prototype.offset = function(rowIndex) {
      return this.offsets[rowIndex];
    };
    RowHeightService2.prototype.totalHeight = function() {
      return this.heights.reduce(function(prev, curr) {
        return prev + curr;
      }, 0);
    };
    RowHeightService2.prototype.updateRowHeight = function(rowIndex, value2) {
      this.heights[rowIndex] += value2;
      this.offsets = update(this.offsets, rowIndex, value2);
    };
    return RowHeightService2;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/virtualization/services/ScrollerService.js
var normalize2 = function(x) {
  return Math.max(x, 0);
};
var ScrollAction = (
  /** @class */
  /* @__PURE__ */ function() {
    function ScrollAction2(offset2) {
      this.offset = offset2;
    }
    return ScrollAction2;
  }()
);
var PageAction = (
  /** @class */
  /* @__PURE__ */ function() {
    function PageAction2(skip) {
      this.skip = skip;
    }
    return PageAction2;
  }()
);
var ScrollerService = (
  /** @class */
  function() {
    function ScrollerService2(onScrollAction, onPageAction) {
      this.onScrollAction = onScrollAction;
      this.onPageAction = onPageAction;
      this.firstLoaded = 0;
      this.bottomOffset = 0;
      this.topOffset = 0;
    }
    ScrollerService2.prototype.create = function(rowHeightService, skip, take, total, topOffset, bottomOffset, direction) {
      if (topOffset === void 0) {
        topOffset = 0;
      }
      if (bottomOffset === void 0) {
        bottomOffset = 0;
      }
      if (direction === void 0) {
        direction = "vertical";
      }
      this.rowHeightService = rowHeightService;
      this.firstLoaded = skip;
      this.lastLoaded = skip + take;
      this.take = take;
      this.total = total;
      this.lastScrollTop = 0;
      this.topOffset = topOffset;
      this.bottomOffset = bottomOffset;
      this.direction = direction;
      var offsetBufferRows = this.rowsForHeight(topOffset);
      var skipWithOffset = normalize2(skip - offsetBufferRows);
      this.onScrollAction(new ScrollAction(this.rowOffset(skipWithOffset)));
      this.onPageAction(new PageAction(skipWithOffset));
    };
    ScrollerService2.prototype.onScroll = function(_a11) {
      var scrollLeft = _a11.scrollLeft, scrollTop = _a11.scrollTop, offsetHeight = _a11.offsetHeight, offsetWidth = _a11.offsetWidth;
      var scrollPosition = this.direction === "vertical" ? scrollTop : scrollLeft;
      var offsetSize = this.direction === "vertical" ? offsetHeight : offsetWidth;
      if (this.lastScrollTop === scrollPosition) {
        return;
      }
      var up = this.lastScrollTop >= scrollPosition;
      this.lastScrollTop = scrollPosition;
      var firstItemIndex = this.rowHeightService.index(normalize2(scrollPosition - this.topOffset));
      var lastItemIndex = this.rowHeightService.index(normalize2(scrollPosition + offsetSize - this.bottomOffset));
      if (!up && lastItemIndex >= this.lastLoaded && this.lastLoaded < this.total) {
        this.firstLoaded = firstItemIndex;
        this.onScrollAction(new ScrollAction(this.rowOffset(firstItemIndex)));
        this.lastLoaded = Math.min(this.firstLoaded + this.take, this.total);
        this.onPageAction(new PageAction(this.firstLoaded));
      }
      if (up && firstItemIndex <= this.firstLoaded) {
        var nonVisibleBuffer = Math.floor(this.take * 0.3);
        this.firstLoaded = normalize2(firstItemIndex - nonVisibleBuffer);
        this.onScrollAction(new ScrollAction(this.rowOffset(this.firstLoaded)));
        this.lastLoaded = Math.min(this.firstLoaded + this.take, this.total);
        this.onPageAction(new PageAction(this.firstLoaded));
      }
    };
    ScrollerService2.prototype.rowOffset = function(index) {
      return this.rowHeightService.offset(index) + this.topOffset;
    };
    ScrollerService2.prototype.rowsForHeight = function(height) {
      return Math.ceil(height / this.rowHeightService.height(0));
    };
    return ScrollerService2;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/virtualization/Virtualization.js
var _a8;
var _b;
var _c;
var allVue12 = vue_runtime_esm_bundler_exports;
var gh12 = allVue12.h;
var isV312 = allVue12.version && allVue12.version[0] === "3";
var ScrollDirection;
(function(ScrollDirection2) {
  ScrollDirection2[ScrollDirection2["Backward"] = 0] = "Backward";
  ScrollDirection2[ScrollDirection2["Forward"] = 1] = "Forward";
})(ScrollDirection || (ScrollDirection = {}));
var scrollModifiers = (_a8 = {}, _a8[ScrollDirection.Forward] = function(step) {
  return function(value2) {
    return value2 + step;
  };
}, _a8[ScrollDirection.Backward] = function(step) {
  return function(value2) {
    return value2 - step;
  };
}, _a8);
var scrollNormalizers = (_b = {}, _b[ScrollDirection.Forward] = function(end2) {
  return function(value2) {
    return Math.min(value2, end2);
  };
}, _b[ScrollDirection.Backward] = function(end2) {
  return function(value2) {
    return Math.max(value2, end2);
  };
}, _b);
var scrollValidators = (_c = {}, _c[ScrollDirection.Forward] = function(end2) {
  return function(start2) {
    return start2 < end2;
  };
}, _c[ScrollDirection.Backward] = function(end2) {
  return function(start2) {
    return start2 > end2;
  };
}, _c);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/timepicker/services/DayPeriodService.js
var setHours2 = function(date2, hours) {
  var clone = cloneDate2(date2);
  clone.setHours(hours);
  return clone;
};
var isAM = function(value2) {
  return value2 !== null && value2 < 12;
};
var isPM = function(value2) {
  return value2 !== null && (!value2 || value2 > 11);
};
var inRange = function(value2, min, max) {
  return !min && !max || value2 >= min && value2 <= max;
};
var inReverseRange = function(value2, min, max) {
  return !min && !max || value2 >= min || value2 <= max;
};
var DayPeriodService = (
  /** @class */
  function() {
    function DayPeriodService2(intl2) {
      this.intl = intl2;
    }
    DayPeriodService2.prototype.apply = function(value2, candidate) {
      var hour = value2.getHours();
      var hourAM = isAM(hour);
      var candidateAM = isAM(candidate.getHours());
      if (hourAM && candidateAM || !hourAM && !candidateAM) {
        return value2;
      }
      var _a11 = this.normalizedRange(), min = _a11[0], _b4 = _a11[1], max = _b4 === void 0 ? 24 : _b4;
      var result = hour + (candidateAM ? -12 : 12);
      return setHours2(value2, Math.min(Math.max(min, result), max || 24));
    };
    DayPeriodService2.prototype.configure = function(settings) {
      var _a11 = settings.min, min = _a11 === void 0 ? this.min : _a11, _b4 = settings.max, max = _b4 === void 0 ? this.max : _b4, _c3 = settings.part, part = _c3 === void 0 ? this.part : _c3;
      this.min = min;
      this.max = max;
      this.part = part;
    };
    DayPeriodService2.prototype.data = function(_) {
      var names = this.part.names;
      if (!names) {
        return [];
      }
      var data16 = [];
      var _a11 = this.normalizedRange(), min = _a11[0], max = _a11[1];
      var dayPeriod = this.intl.dateFormatNames(names);
      if (isAM(min)) {
        data16.push({ text: dayPeriod.am, value: setHours2(this.min, min) });
      }
      if (isPM(max)) {
        data16.push({ text: dayPeriod.pm, value: setHours2(this.min, Math.max(12, max)) });
      }
      return this.min.getHours() !== min ? data16.reverse() : data16;
    };
    DayPeriodService2.prototype.isRangeChanged = function(_, __) {
      return false;
    };
    DayPeriodService2.prototype.limitRange = function(min, max, _) {
      return [min, max];
    };
    DayPeriodService2.prototype.total = function() {
      var _a11 = this.normalizedRange(), min = _a11[0], max = _a11[1];
      if (!min && !max) {
        return 2;
      }
      if (min > 11 || max < 12) {
        return 1;
      }
      return 2;
    };
    DayPeriodService2.prototype.selectedIndex = function(value2) {
      if (!this.valueInList(value2)) {
        return -1;
      }
      var index = Math.floor(value2.getHours() / 12);
      return this.min.getHours() === this.normalizedRange()[0] ? index : index === 0 ? 1 : 0;
    };
    DayPeriodService2.prototype.valueInList = function(value2) {
      var reverse = this.min.getHours() !== this.normalizedRange()[0];
      var isInRange4 = reverse ? inReverseRange : inRange;
      return isInRange4(value2.getHours(), this.min.getHours(), this.max.getHours());
    };
    DayPeriodService2.prototype.normalizedRange = function() {
      var minHour = this.min.getHours();
      var maxHour = this.max.getHours();
      return [
        Math.min(minHour, maxHour),
        Math.max(minHour, maxHour)
      ];
    };
    return DayPeriodService2;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/timepicker/services/DOMService.js
var DOMService2 = (
  /** @class */
  function() {
    function DOMService3() {
      this.didCalculate = false;
    }
    DOMService3.prototype.ensureHeights = function() {
      if (this.timeListHeight !== void 0) {
        return;
      }
      this.calculateHeights();
    };
    DOMService3.prototype.calculateHeights = function(container) {
      if (!canUseDOM) {
        return;
      }
      var div = domContainerFactory("div");
      var ul = domContainerFactory("ul");
      var li = domContainerFactory("li");
      var listItem = function() {
        return li("<span>02</span>", "k-item");
      };
      var list = function() {
        return ul([listItem()], "k-reset");
      };
      var scrollable = function() {
        return div([list()], "k-time-container k-content k-scrollable");
      };
      var timeListWrapper = function() {
        return div([div([scrollable()], "k-time-list")], "k-time-list-wrapper", { left: "-10000px", position: "absolute" });
      };
      var timeWrapper = timeListWrapper();
      var listContainer = container && container.querySelector(".k-time-container");
      var hostContainer = listContainer || document.body;
      var wrapper = hostContainer.appendChild(timeWrapper);
      this.timeListHeight = listContainer.offsetHeight;
      this.itemHeight = wrapper.querySelector("li").offsetHeight;
      hostContainer.removeChild(wrapper);
      this.didCalculate = true;
    };
    return DOMService3;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/timepicker/services/HoursService.js
var HOURS_IN_DAY = 24;
var clampToRange = function(rangeValue) {
  return function(value2) {
    return value2 % rangeValue;
  };
};
var clamp = clampToRange(HOURS_IN_DAY);
var stepper = function(start2, step) {
  return function(idx) {
    return clamp(start2 + idx * step);
  };
};
var distanceFromMin = function(value2, min) {
  return clamp(HOURS_IN_DAY + value2 - min);
};
var limit = function(borderValue) {
  return function(barrier, value2) {
    var useBarrier = !value2 || getDate(barrier).getTime() === getDate(value2).getTime();
    return useBarrier ? barrier : setHours(barrier, borderValue);
  };
};
var limitDown = limit(0);
var limitUp = limit(HOURS_IN_DAY - 1);
var HoursService = (
  /** @class */
  function() {
    function HoursService2(intl2) {
      this.intl = intl2;
      this.boundRange = false;
      this.insertUndividedMax = false;
    }
    HoursService2.prototype.apply = function(value2, candidate) {
      return setHours(value2, candidate.getHours());
    };
    HoursService2.prototype.configure = function(settings) {
      var _this = this;
      var _a11 = settings.boundRange, boundRange = _a11 === void 0 ? this.boundRange : _a11, _b4 = settings.insertUndividedMax, insertUndividedMax = _b4 === void 0 ? this.insertUndividedMax : _b4, _c3 = settings.min, min = _c3 === void 0 ? this.min : _c3, _d = settings.max, max = _d === void 0 ? this.max : _d, part = settings.part, _e = settings.step, step = _e === void 0 ? this.step : _e;
      this.boundRange = boundRange;
      this.insertUndividedMax = insertUndividedMax;
      this.toListItem = function(hour) {
        var date2 = setHours(MIDNIGHT_DATE, hour);
        return {
          text: _this.intl.formatDate(date2, part.pattern),
          value: date2
        };
      };
      this.min = min;
      this.max = max;
      this.step = step;
    };
    HoursService2.prototype.data = function(selectedValue) {
      var _this = this;
      var min = this.range(selectedValue)[0];
      var getHour = stepper(min, this.step);
      var convertToItem = function(idx) {
        return _this.toListItem(getHour(idx));
      };
      var data16 = range2(0, this.countFromMin(selectedValue)).map(convertToItem);
      this.addLast(data16);
      if (selectedValue) {
        this.addMissing(data16, selectedValue);
      }
      return data16;
    };
    HoursService2.prototype.isRangeChanged = function(min, max) {
      return !isEqual(this.min, min) || !isEqual(this.max, max);
    };
    HoursService2.prototype.limitRange = function(min, max, value2) {
      return this.boundRange ? [limitDown(min, value2), limitUp(max, value2)] : [min, max];
    };
    HoursService2.prototype.total = function(value2) {
      var last = this.insertUndividedMax && this.isLastMissing(value2) ? 1 : 0;
      var missing = this.isMissing(value2) ? 1 : 0;
      return this.countFromMin(value2) + missing + last;
    };
    HoursService2.prototype.selectedIndex = function(value2) {
      return Math.ceil(this.divideByStep(value2));
    };
    HoursService2.prototype.valueInList = function(value2) {
      if (!value2) {
        return true;
      }
      var matchMax = this.insertUndividedMax && this.lastHour(value2) === value2.getHours();
      return matchMax || !this.isMissing(value2);
    };
    HoursService2.prototype.addLast = function(data16, value2) {
      if (this.insertUndividedMax && this.isLastMissing(value2)) {
        data16.push(this.toListItem(this.lastHour(value2)));
      }
      return data16;
    };
    HoursService2.prototype.addMissing = function(data16, value2) {
      if (this.valueInList(value2)) {
        return data16;
      }
      var missingItem = this.toListItem(value2.getHours());
      data16.splice(this.selectedIndex(value2), 0, missingItem);
      return data16;
    };
    HoursService2.prototype.countFromMin = function(value2) {
      var _a11 = this.range(value2), min = _a11[0], max = _a11[1];
      return Math.floor(distanceFromMin(max, min) / this.step) + 1;
    };
    HoursService2.prototype.isMissing = function(value2) {
      if (!value2) {
        return false;
      }
      return this.selectedIndex(value2) !== this.divideByStep(value2);
    };
    HoursService2.prototype.isLastMissing = function(value2) {
      return this.isMissing(setHours(this.max, this.lastHour(value2)));
    };
    HoursService2.prototype.divideByStep = function(value2) {
      return distanceFromMin(value2.getHours(), this.min.getHours()) / this.step;
    };
    HoursService2.prototype.lastHour = function(value2) {
      return this.range(value2)[1];
    };
    HoursService2.prototype.range = function(value2) {
      var _a11 = this.limitRange(this.min, this.max, value2), min = _a11[0], max = _a11[1];
      return [min.getHours(), max.getHours()];
    };
    return HoursService2;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/timepicker/services/MinutesService.js
var MINUTES_IN_HOUR = 60;
var clampToRange2 = function(rangeValue) {
  return function(value2) {
    return value2 % rangeValue;
  };
};
var clamp2 = clampToRange2(MINUTES_IN_HOUR);
var stepper2 = function(start2, step) {
  return function(idx) {
    return clamp2(start2 + idx * step);
  };
};
var distanceFromMin2 = function(value2, min) {
  return clamp2(MINUTES_IN_HOUR + value2 - min);
};
var limit2 = function(borderValue) {
  return function(barrier, value2) {
    var useBarrier = !value2 || barrier.getHours() === value2.getHours();
    return useBarrier ? barrier : setMinutes(barrier, borderValue);
  };
};
var limitDown2 = limit2(0);
var limitUp2 = limit2(MINUTES_IN_HOUR - 1);
var MinutesService = (
  /** @class */
  function() {
    function MinutesService2(intl2) {
      this.intl = intl2;
      this.insertUndividedMax = false;
    }
    MinutesService2.prototype.apply = function(value2, candidate) {
      return setMinutes(value2, candidate.getMinutes());
    };
    MinutesService2.prototype.configure = function(settings) {
      var _this = this;
      var _a11 = settings.insertUndividedMax, insertUndividedMax = _a11 === void 0 ? this.insertUndividedMax : _a11, _b4 = settings.min, min = _b4 === void 0 ? this.min : _b4, _c3 = settings.max, max = _c3 === void 0 ? this.max : _c3, part = settings.part, _d = settings.step, step = _d === void 0 ? this.step : _d;
      this.insertUndividedMax = insertUndividedMax;
      this.toListItem = function(minute) {
        var date2 = setMinutes(MIDNIGHT_DATE, minute);
        return {
          text: _this.intl.formatDate(date2, part.pattern),
          value: date2
        };
      };
      this.min = min;
      this.max = max;
      this.step = step;
    };
    MinutesService2.prototype.data = function(selectedValue) {
      var _this = this;
      var min = this.range(selectedValue)[0];
      var getMinute = stepper2(min, this.step);
      var convertToItem = function(idx) {
        return _this.toListItem(getMinute(idx));
      };
      var data16 = range2(0, this.countFromMin(selectedValue)).map(convertToItem);
      this.addLast(data16);
      if (selectedValue) {
        this.addMissing(data16, selectedValue);
      }
      return data16;
    };
    MinutesService2.prototype.isRangeChanged = function(min, max) {
      return !isEqual(this.min, min) || !isEqual(this.max, max);
    };
    MinutesService2.prototype.limitRange = function(min, max, value2) {
      return [limitDown2(min, value2), limitUp2(max, value2)];
    };
    MinutesService2.prototype.total = function(value2) {
      var last = this.insertUndividedMax && this.isLastMissing(value2) ? 1 : 0;
      var missing = this.isMissing(value2) ? 1 : 0;
      return this.countFromMin(value2) + missing + last;
    };
    MinutesService2.prototype.selectedIndex = function(value2) {
      return Math.ceil(this.divideByStep(value2));
    };
    MinutesService2.prototype.valueInList = function(value2) {
      if (!value2) {
        return true;
      }
      var matchMax = this.insertUndividedMax && this.lastMinute(value2) === value2.getMinutes();
      return matchMax || !this.isMissing(value2);
    };
    MinutesService2.prototype.addLast = function(data16, value2) {
      if (this.insertUndividedMax && this.isLastMissing(value2)) {
        data16.push(this.toListItem(this.lastMinute(value2)));
      }
      return data16;
    };
    MinutesService2.prototype.addMissing = function(data16, value2) {
      if (this.valueInList(value2)) {
        return data16;
      }
      var missingItem = this.toListItem(value2.getMinutes());
      data16.splice(this.selectedIndex(value2), 0, missingItem);
      return data16;
    };
    MinutesService2.prototype.countFromMin = function(value2) {
      var _a11 = this.range(value2), min = _a11[0], max = _a11[1];
      return Math.floor(distanceFromMin2(max, min) / this.step) + 1;
    };
    MinutesService2.prototype.isMissing = function(value2) {
      if (!value2) {
        return false;
      }
      return this.selectedIndex(value2) !== this.divideByStep(value2);
    };
    MinutesService2.prototype.isLastMissing = function(value2) {
      return this.isMissing(setMinutes(this.max, this.lastMinute(value2)));
    };
    MinutesService2.prototype.divideByStep = function(value2) {
      return distanceFromMin2(value2.getMinutes(), this.min.getMinutes()) / this.step;
    };
    MinutesService2.prototype.lastMinute = function(value2) {
      return this.range(value2)[1];
    };
    MinutesService2.prototype.range = function(value2) {
      var _a11 = this.limitRange(this.min, this.max, value2), min = _a11[0], max = _a11[1];
      return [min.getMinutes(), max.getMinutes()];
    };
    return MinutesService2;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/timepicker/services/SecondsService.js
var SECONDS_IN_HOUR = 60;
var clampToRange3 = function(rangeValue) {
  return function(value2) {
    return value2 % rangeValue;
  };
};
var clamp3 = clampToRange3(SECONDS_IN_HOUR);
var stepper3 = function(start2, step) {
  return function(idx) {
    return clamp3(start2 + idx * step);
  };
};
var distanceFromMin3 = function(value2, min) {
  return clamp3(SECONDS_IN_HOUR + value2 - min);
};
var limit3 = function(borderValue) {
  return function(barrier, value2) {
    var useBarrier = !value2 || barrier.getMinutes() === value2.getMinutes() && barrier.getHours() === value2.getHours();
    return useBarrier ? barrier : setSeconds(barrier, borderValue);
  };
};
var limitDown3 = limit3(0);
var limitUp3 = limit3(SECONDS_IN_HOUR - 1);
var SecondsService = (
  /** @class */
  function() {
    function SecondsService2(intl2) {
      this.intl = intl2;
      this.insertUndividedMax = false;
    }
    SecondsService2.prototype.apply = function(value2, candidate) {
      return setSeconds(value2, candidate.getSeconds());
    };
    SecondsService2.prototype.configure = function(settings) {
      var _this = this;
      var _a11 = settings.insertUndividedMax, insertUndividedMax = _a11 === void 0 ? this.insertUndividedMax : _a11, _b4 = settings.min, min = _b4 === void 0 ? this.min : _b4, _c3 = settings.max, max = _c3 === void 0 ? this.max : _c3, part = settings.part, _d = settings.step, step = _d === void 0 ? this.step : _d;
      this.insertUndividedMax = insertUndividedMax;
      this.toListItem = function(minute) {
        var date2 = setSeconds(MIDNIGHT_DATE, minute);
        return {
          text: _this.intl.formatDate(date2, part.pattern),
          value: date2
        };
      };
      this.min = min;
      this.max = max;
      this.step = step;
    };
    SecondsService2.prototype.data = function(selectedValue) {
      var _this = this;
      var min = this.range(selectedValue)[0];
      var getSecond = stepper3(min, this.step);
      var convertToItem = function(idx) {
        return _this.toListItem(getSecond(idx));
      };
      var data16 = range2(0, this.countFromMin(selectedValue)).map(convertToItem);
      this.addLast(data16);
      if (selectedValue) {
        this.addMissing(data16, selectedValue);
      }
      return data16;
    };
    SecondsService2.prototype.isRangeChanged = function(min, max) {
      return !isEqual(this.min, min) || !isEqual(this.max, max);
    };
    SecondsService2.prototype.limitRange = function(min, max, value2) {
      return [limitDown3(min, value2), limitUp3(max, value2)];
    };
    SecondsService2.prototype.total = function(value2) {
      var last = this.insertUndividedMax && this.isLastMissing(value2) ? 1 : 0;
      var missing = this.isMissing(value2) ? 1 : 0;
      return this.countFromMin(value2) + missing + last;
    };
    SecondsService2.prototype.selectedIndex = function(value2) {
      return Math.ceil(this.divideByStep(value2));
    };
    SecondsService2.prototype.valueInList = function(value2) {
      if (!value2) {
        return true;
      }
      var matchMax = this.insertUndividedMax && this.lastSecond(value2) === value2.getSeconds();
      return matchMax || !this.isMissing(value2);
    };
    SecondsService2.prototype.divideByStep = function(value2) {
      return distanceFromMin3(value2.getSeconds(), this.min.getSeconds()) / this.step;
    };
    SecondsService2.prototype.addLast = function(data16, value2) {
      if (this.insertUndividedMax && this.isLastMissing(value2)) {
        data16.push(this.toListItem(this.lastSecond(value2)));
      }
      return data16;
    };
    SecondsService2.prototype.addMissing = function(data16, value2) {
      if (this.valueInList(value2)) {
        return data16;
      }
      var missingItem = this.toListItem(value2.getSeconds());
      data16.splice(this.selectedIndex(value2), 0, missingItem);
      return data16;
    };
    SecondsService2.prototype.countFromMin = function(value2) {
      var _a11 = this.range(value2), min = _a11[0], max = _a11[1];
      return Math.floor(distanceFromMin3(max, min) / this.step) + 1;
    };
    SecondsService2.prototype.isMissing = function(value2) {
      if (!value2) {
        return false;
      }
      return this.selectedIndex(value2) !== this.divideByStep(value2);
    };
    SecondsService2.prototype.isLastMissing = function(value2) {
      return this.isMissing(setSeconds(this.max, this.lastSecond(value2)));
    };
    SecondsService2.prototype.lastSecond = function(value2) {
      return this.range(value2)[1];
    };
    SecondsService2.prototype.range = function(value2) {
      var _a11 = this.limitRange(this.min, this.max, value2), min = _a11[0], max = _a11[1];
      return [min.getSeconds(), max.getSeconds()];
    };
    return SecondsService2;
  }()
);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/timepicker/TimeList.js
var _a9;
var _b2;
var allVue13 = vue_runtime_esm_bundler_exports;
var gh13 = allVue13.h;
var isV313 = allVue13.version && allVue13.version[0] === "3";
var inject7 = allVue13.inject;
var getters = (_a9 = {}, _a9[Keys.end] = function(data16, _) {
  return data16[data16.length - 1];
}, _a9[Keys.home] = function(data16, _) {
  return data16[0];
}, _a9[Keys.up] = function(data16, index) {
  return data16[index - 1];
}, _a9[Keys.down] = function(data16, index) {
  return data16[index + 1];
}, _a9);
var services2 = (_b2 = {}, _b2[TIME_PART.dayperiod] = DayPeriodService, _b2[TIME_PART.hour] = HoursService, _b2[TIME_PART.minute] = MinutesService, _b2[TIME_PART.second] = SecondsService, _b2);

// node_modules/@progress/kendo-vue-dateinputs/dist/es/timepicker/TimePart.js
var allVue14 = vue_runtime_esm_bundler_exports;
var gh14 = allVue14.h;
var isV314 = allVue14.version && allVue14.version[0] === "3";
var inject8 = allVue14.inject;
var formatRegExp2 = new RegExp("".concat(TIME_PART.hour, "|").concat(TIME_PART.minute, "|").concat(TIME_PART.second, "|").concat(TIME_PART.dayperiod, "|literal"));
var Direction2;
(function(Direction4) {
  Direction4[Direction4["Left"] = 0] = "Left";
  Direction4[Direction4["Right"] = 1] = "Right";
})(Direction2 || (Direction2 = {}));

// node_modules/@progress/kendo-vue-dateinputs/dist/es/timepicker/TimeSelector.js
var allVue15 = vue_runtime_esm_bundler_exports;
var gh15 = allVue15.h;
var isV315 = allVue15.version && allVue15.version[0] === "3";
var inject9 = allVue15.inject;
var Direction3;
(function(Direction4) {
  Direction4[Direction4["Left"] = 0] = "Left";
  Direction4[Direction4["Right"] = 1] = "Right";
})(Direction3 || (Direction3 = {}));

// node_modules/@progress/kendo-vue-dateinputs/dist/es/timepicker/TimePicker.js
var allVue16 = vue_runtime_esm_bundler_exports;
var gh16 = allVue16.h;
var isV316 = allVue16.version && allVue16.version[0] === "3";
var ref3 = allVue16.ref;
var inject10 = allVue16.inject;

// node_modules/@progress/kendo-vue-dateinputs/dist/es/daterangepicker/DateRangePicker.js
var allVue17 = vue_runtime_esm_bundler_exports;
var gh17 = allVue17.h;
var isV317 = allVue17.version && allVue17.version[0] === "3";
var ref4 = allVue17.ref;
var inject11 = allVue17.inject;

// node_modules/@progress/kendo-vue-dateinputs/dist/es/datetimepicker/DateTimeSelector.js
var allVue18 = vue_runtime_esm_bundler_exports;
var gh18 = allVue18.h;
var isV318 = allVue18.version && allVue18.version[0] === "3";
var ref5 = allVue18.ref;
var inject12 = allVue18.inject;

// node_modules/@progress/kendo-vue-dateinputs/dist/es/datetimepicker/DateTimePicker.js
var allVue19 = vue_runtime_esm_bundler_exports;
var gh19 = allVue19.h;
var isV319 = allVue19.version && allVue19.version[0] === "3";
var ref6 = allVue19.ref;
var inject13 = allVue19.inject;

// node_modules/@progress/kendo-vue-dateinputs/dist/es/common/PickerWrap.js
var allVue20 = vue_runtime_esm_bundler_exports;
var gh20 = allVue20.h;
var isV320 = allVue20.version && allVue20.version[0] === "3";

// node_modules/@progress/kendo-vue-data-tools/dist/es/filter/filters/DateFilter.js
var __assign3 = function() {
  __assign3 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign3.apply(this, arguments);
};
var allVue21 = vue_runtime_esm_bundler_exports;
var gh21 = allVue21.h;
var isV321 = allVue21.version && allVue21.version[0] === "3";
var DateFilterVue2 = {
  name: "KendoDateFilter",
  props: {
    filter: {
      type: Object,
      required: true
    }
  },
  // @ts-ignore
  setup: !isV321 ? void 0 : function() {
    var v3 = !!isV321;
    return {
      v3
    };
  },
  render: function render12(createElement) {
    var h = gh21 || createElement;
    var filter = this.$props.filter;
    return (
      // @ts-ignore
      h(DatePicker, {
        value: filter.value || null,
        attrs: this.v3 ? void 0 : {
          value: filter.value || null
        },
        onChange: this.onChange,
        on: this.v3 ? void 0 : {
          "change": this.onChange
        }
      })
    );
  },
  methods: {
    onChange: function onChange3(event2) {
      this.$emit("filterchange", {
        nextFilter: __assign3(__assign3({}, this.$props.filter), {
          value: event2.value
        })
      });
    }
  }
};
var DateFilter = DateFilterVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/filter/filters/EnumFilter.js
var __assign4 = function() {
  __assign4 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign4.apply(this, arguments);
};
var allVue22 = vue_runtime_esm_bundler_exports;
var gh22 = allVue22.h;
var isV322 = allVue22.version && allVue22.version[0] === "3";
var EnumFilterVue2 = {
  name: "KendoEnumFilter",
  props: {
    filter: {
      type: Object,
      required: true
    },
    dataItems: Array,
    defaultItem: Object,
    ariaLabel: String
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV322 ? void 0 : function() {
    var v3 = !!isV322;
    return {
      v3
    };
  },
  render: function render13(createElement) {
    var h = gh22 || createElement;
    var locService = provideLocalizationService(this);
    var _a11 = this.$props, filter = _a11.filter, _b4 = _a11.dataItems, dataItems = _b4 === void 0 ? [] : _b4, defaultItem = _a11.defaultItem, _c3 = _a11.ariaLabel, ariaLabel = _c3 === void 0 ? locService.toLanguageString(filterEnumFilterDropdownAriaLabel, messages[filterEnumFilterDropdownAriaLabel]) : _c3;
    var locData = dataItems.map(function(item) {
      return __assign4(__assign4({}, item), {
        text: locService.toLanguageString(item.text, messages[item.text] || item.text)
      });
    });
    return (
      // @ts-ignore
      h(DropDownList, {
        value: locData.find(function(i) {
          return i.value === filter.value;
        }) || null,
        attrs: this.v3 ? void 0 : {
          value: locData.find(function(i) {
            return i.value === filter.value;
          }) || null,
          defaultItem,
          dataItems: locData,
          textField: "text",
          ariaLabel
        },
        onChange: this.onChange,
        on: this.v3 ? void 0 : {
          "change": this.onChange
        },
        defaultItem,
        dataItems: locData,
        textField: "text",
        ariaLabel
      })
    );
  },
  methods: {
    onChange: function onChange4(event2) {
      this.$emit("filterchange", {
        nextFilter: __assign4(__assign4({}, this.$props.filter), {
          value: event2.value.value
        })
      });
    }
  }
};
var EnumFilter = EnumFilterVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/filter/filters/BooleanFilter.js
var allVue23 = vue_runtime_esm_bundler_exports;
var gh23 = allVue23.h;
var isV323 = allVue23.version && allVue23.version[0] === "3";
var BooleanFilterVue2 = {
  name: "KendoBooleanFilter",
  props: {
    filter: {
      type: Object,
      required: true
    },
    dataItems: {
      type: Array,
      default: function _default23() {
        return void 0;
      }
    },
    defaultItem: Object
  },
  data: function data6() {
    return {
      currentData: [{
        text: filterIsTrue,
        value: true
      }, {
        text: filterIsFalse,
        value: false
      }]
    };
  },
  // @ts-ignore
  setup: !isV323 ? void 0 : function() {
    var v3 = !!isV323;
    return {
      v3
    };
  },
  render: function render14(createElement) {
    var h = gh23 || createElement;
    return (
      // @ts-ignore
      h(EnumFilter, {
        filter: this.$props.filter,
        attrs: this.v3 ? void 0 : {
          filter: this.$props.filter,
          dataItems: this.$props.dataItems || this.currentData,
          defaultItem: this.$props.defaultItem
        },
        onFilterchange: this.handleFilterChange,
        on: this.v3 ? void 0 : {
          "filterchange": this.handleFilterChange
        },
        dataItems: this.$props.dataItems || this.currentData,
        defaultItem: this.$props.defaultItem
      })
    );
  },
  methods: {
    handleFilterChange: function handleFilterChange(event2) {
      this.$emit("filterchange", event2);
    }
  }
};
var BooleanFilter = BooleanFilterVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/filter/operators.js
var __spreadArray2 = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var textOperators = [
  { text: filterContainsOperator, operator: "contains" },
  { text: filterNotContainsOperator, operator: "doesnotcontain" },
  { text: filterEqOperator, operator: "eq" },
  { text: filterNotEqOperator, operator: "neq" },
  { text: filterStartsWithOperator, operator: "startswith" },
  { text: filterEndsWithOperator, operator: "endswith" },
  { text: filterIsNullOperator, operator: "isnull" },
  { text: filterIsNotNullOperator, operator: "isnotnull" },
  { text: filterIsEmptyOperator, operator: "isempty" },
  { text: filterIsNotEmptyOperator, operator: "isnotempty" }
];
var numericOperators = [
  { text: filterEqOperator, operator: "eq" },
  { text: filterNotEqOperator, operator: "neq" },
  { text: filterGteOperator, operator: "gte" },
  { text: filterGtOperator, operator: "gt" },
  { text: filterLteOperator, operator: "lte" },
  { text: filterLtOperator, operator: "lt" },
  { text: filterIsNullOperator, operator: "isnull" },
  { text: filterIsNotNullOperator, operator: "isnotnull" }
];
var dateOperators = [
  { text: filterEqOperator, operator: "eq" },
  { text: filterNotEqOperator, operator: "neq" },
  { text: filterAfterOrEqualOperator, operator: "gte" },
  { text: filterAfterOperator, operator: "gt" },
  { text: filterBeforeOperator, operator: "lt" },
  { text: filterBeforeOrEqualOperator, operator: "lte" },
  { text: filterIsNullOperator, operator: "isnull" },
  { text: filterIsNotNullOperator, operator: "isnotnull" }
];
var booleanOperators = [
  { text: filterEqOperator, operator: "eq" },
  { text: filterNotEqOperator, operator: "neq" }
];
var Operators = (
  /** @class */
  function() {
    function Operators2() {
    }
    Object.defineProperty(Operators2, "text", {
      /**
       * An array containing the operators for the TextFilter component.
       *
       * The operators are:
       *
       * - { text: 'filter.containsOperator', operator: 'contains' }
       * - { text: 'filter.notContainsOperator', operator: 'doesnotcontain' }
       * - { text: 'filter.eqOperator', operator: 'eq' }
       * - { text: 'filter.notEqOperator', operator: 'neq' }
       * - { text: 'filter.startsWithOperator', operator: 'startswith' }
       * - { text: 'filter.endsWithOperator', operator: 'endswith' }
       * - { text: 'filter.isNullOperator', operator: 'isnull' }
       * - { text: 'filter.isNotNullOperator', operator: 'isnotnull' }
       * - { text: 'filter.isEmptyOperator', operator: 'isempty' }
       * - { text: 'filter.isNotEmptyOperator', operator: 'isnotempty' }
       */
      get: function() {
        return __spreadArray2([], textOperators, true);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Operators2, "numeric", {
      /**
       * An array containing the operators for the NumericFilter component.
       *
       * The operators are:
       *
       * - { text: 'filter.eqOperator', operator: 'eq' }
       * - { text: 'filter.notEqOperator', operator: 'neq' }
       * - { text: 'filter.gteOperator', operator: 'gte' }
       * - { text: 'filter.gtOperator', operator: 'gt' }
       * - { text: 'filter.lteOperator', operator: 'lte' }
       * - { text: 'filter.ltOperator', operator: 'lt' }
       * - { text: 'filter.isNullOperator', operator: 'isnull' }
       * - { text: 'filter.isNotNullOperator', operator: 'isnotnull' }
       */
      get: function() {
        return __spreadArray2([], numericOperators, true);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Operators2, "date", {
      /**
       * An array containing the operators for the DateFilter component.
       *
       * The operators are:
       *
       * - { text: 'filter.eqOperator', operator: 'eq' }
       * - { text: 'filter.notEqOperator', operator: 'neq' }
       * - { text: 'filter.afterOrEqualOperator', operator: 'gte' }
       * - { text: 'filter.afterOperator', operator: 'gt' }
       * - { text: 'filter.beforeOperator', operator: 'lt' }
       * - { text: 'filter.beforeOrEqualOperator', operator: 'lte' }
       * - { text: 'filter.isNullOperator', operator: 'isnull' }
       * - { text: 'filter.isNotNullOperator', operator: 'isnotnull' }
       */
      get: function() {
        return __spreadArray2([], dateOperators, true);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Operators2, "boolean", {
      /**
       * An array containing the operators for the BooleanFilter component.
       *
       * The operators are:
       *
       * - { text: 'filter.eqOperator', operator: 'eq' }
       * - { text: 'filter.notEqOperator', operator: 'neq' }
       */
      get: function() {
        return __spreadArray2([], booleanOperators, true);
      },
      enumerable: false,
      configurable: true
    });
    return Operators2;
  }()
);
var stringOperator = function(operator) {
  return operator === "contains" || operator === "doesnotcontain" || operator === "startswith" || operator === "endswith";
};
var unaryOperator = function(operator) {
  return operator === "isnull" || operator === "isnotnull" || operator === "isempty" || operator === "isnotempty";
};

// node_modules/@progress/kendo-vue-data-tools/dist/es/filter/Expression.js
var __assign5 = function() {
  __assign5 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign5.apply(this, arguments);
};
var __rest = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var allVue24 = vue_runtime_esm_bundler_exports;
var gh24 = allVue24.h;
var isV324 = allVue24.version && allVue24.version[0] === "3";
var ExpressionVue2 = {
  name: "KendoExpression",
  // @ts-ignore
  emits: {
    change: null,
    remove: null
  },
  props: {
    filter: {
      type: Object,
      required: true
    },
    fields: {
      type: Array,
      required: true
    }
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV324 ? void 0 : function() {
    var v3 = !!isV324;
    return {
      v3
    };
  },
  render: function render15(createElement) {
    var _this = this;
    var h = gh24 || createElement;
    var _a11 = this.$props, fields = _a11.fields, filter = _a11.filter;
    var field = fields.find(function(f) {
      return f.name === filter.field;
    });
    var locService = provideLocalizationService(this);
    var operators2 = (field && field.operators || []).map(function(o) {
      return __assign5(__assign5({}, o), {
        text: locService.toLanguageString(o.text, messages[o.text] || o.text)
      });
    });
    var defaultRendering = null;
    var filterEditors = function filterEditors2(filterName, filterRender) {
      switch (filterName) {
        case "numeric":
          defaultRendering = // @ts-ignore
          h(NumericFilter, {
            filter,
            attrs: this.v3 ? void 0 : {
              filter
            },
            onFilterchange: this.onInputChange,
            on: this.v3 ? void 0 : {
              "filterchange": this.onInputChange
            }
          });
          break;
        case "date":
          defaultRendering = // @ts-ignore
          h(DateFilter, {
            filter,
            attrs: this.v3 ? void 0 : {
              filter
            },
            onFilterchange: this.onInputChange,
            on: this.v3 ? void 0 : {
              "filterchange": this.onInputChange
            }
          });
          break;
        case "boolean":
          defaultRendering = // @ts-ignore
          h(BooleanFilter, {
            filter,
            attrs: this.v3 ? void 0 : {
              filter
            },
            onFilterchange: this.onInputChange,
            on: this.v3 ? void 0 : {
              "filterchange": this.onInputChange
            }
          });
          break;
        default:
          defaultRendering = // @ts-ignore
          h(TextFilter, {
            filter,
            attrs: this.v3 ? void 0 : {
              filter
            },
            onFilterchange: this.onInputChange,
            on: this.v3 ? void 0 : {
              "filterchange": this.onInputChange
            }
          });
          break;
      }
      return getTemplate.call(this, {
        h,
        template: filterRender,
        defaultRendering,
        additionalProps: {
          filter
        },
        additionalListeners: {
          filterchange: this.onInputChange
        }
      });
    };
    return h("div", {
      "class": "k-filter-toolbar"
    }, [
      // @ts-ignore function children 
      h(Toolbar, {
        keyboardNavigation: false,
        attrs: this.v3 ? void 0 : {
          keyboardNavigation: false,
          ariaLabel: filter.ariaLabel ? filter.ariaLabel : void 0
        },
        ariaLabel: filter.ariaLabel ? filter.ariaLabel : void 0
      }, this.v3 ? function() {
        return [
          // @ts-ignore function children 
          h(ToolbarItem, {
            "class": "k-filter-field"
          }, _this.v3 ? function() {
            return [
              // @ts-ignore 
              h(DropDownList, {
                "class": "k-filter-dropdown",
                dataItems: fields,
                attrs: _this.v3 ? void 0 : {
                  dataItems: fields,
                  textField: "label",
                  value: fields.find(function(f) {
                    return f.name === filter.field;
                  }),
                  ariaLabel: locService.toLanguageString(filterExpressionDropdownAriaLabel, messages[filterExpressionDropdownAriaLabel])
                },
                textField: "label",
                value: fields.find(function(f) {
                  return f.name === filter.field;
                }),
                onChange: _this.onFieldChange,
                on: _this.v3 ? void 0 : {
                  "change": _this.onFieldChange
                },
                ariaLabel: locService.toLanguageString(filterExpressionDropdownAriaLabel, messages[filterExpressionDropdownAriaLabel])
              })
            ];
          } : [h(DropDownList, {
            "class": "k-filter-dropdown",
            dataItems: fields,
            attrs: _this.v3 ? void 0 : {
              dataItems: fields,
              textField: "label",
              value: fields.find(function(f) {
                return f.name === filter.field;
              }),
              ariaLabel: locService.toLanguageString(filterExpressionDropdownAriaLabel, messages[filterExpressionDropdownAriaLabel])
            },
            textField: "label",
            value: fields.find(function(f) {
              return f.name === filter.field;
            }),
            onChange: _this.onFieldChange,
            on: _this.v3 ? void 0 : {
              "change": _this.onFieldChange
            },
            ariaLabel: locService.toLanguageString(filterExpressionDropdownAriaLabel, messages[filterExpressionDropdownAriaLabel])
          })]),
          // @ts-ignore function children 
          h(ToolbarItem, {
            "class": "k-filter-operator"
          }, _this.v3 ? function() {
            return [
              // @ts-ignore
              h(DropDownList, {
                dataItems: operators2,
                attrs: _this.v3 ? void 0 : {
                  dataItems: operators2,
                  textField: "text",
                  value: operators2.find(function(o) {
                    return o.operator === filter.operator;
                  }),
                  ariaLabel: locService.toLanguageString(filterExpressionOperatorDropdownAriaLabel, messages[filterExpressionOperatorDropdownAriaLabel])
                },
                textField: "text",
                value: operators2.find(function(o) {
                  return o.operator === filter.operator;
                }),
                onChange: _this.onOperatorChange,
                on: _this.v3 ? void 0 : {
                  "change": _this.onOperatorChange
                },
                ariaLabel: locService.toLanguageString(filterExpressionOperatorDropdownAriaLabel, messages[filterExpressionOperatorDropdownAriaLabel])
              })
            ];
          } : [h(DropDownList, {
            dataItems: operators2,
            attrs: _this.v3 ? void 0 : {
              dataItems: operators2,
              textField: "text",
              value: operators2.find(function(o) {
                return o.operator === filter.operator;
              }),
              ariaLabel: locService.toLanguageString(filterExpressionOperatorDropdownAriaLabel, messages[filterExpressionOperatorDropdownAriaLabel])
            },
            textField: "text",
            value: operators2.find(function(o) {
              return o.operator === filter.operator;
            }),
            onChange: _this.onOperatorChange,
            on: _this.v3 ? void 0 : {
              "change": _this.onOperatorChange
            },
            ariaLabel: locService.toLanguageString(filterExpressionOperatorDropdownAriaLabel, messages[filterExpressionOperatorDropdownAriaLabel])
          })]),
          // @ts-ignore function children 
          h(ToolbarItem, {
            "class": "k-filter-value"
          }, _this.v3 ? function() {
            return [field && filterEditors.call(_this, field.filter, field.filterRender)];
          } : [field && filterEditors.call(_this, field.filter, field.filterRender)]),
          // @ts-ignore
          h(Button, {
            title: locService.toLanguageString(filterClose, messages[filterClose]),
            attrs: _this.v3 ? void 0 : {
              title: locService.toLanguageString(filterClose, messages[filterClose]),
              icon: "x",
              svgIcon: xIcon,
              fillMode: "flat",
              type: "button"
            },
            icon: "x",
            svgIcon: xIcon,
            fillMode: "flat",
            type: "button",
            "class": "k-toolbar-button",
            onClick: _this.onFilterRemove,
            on: _this.v3 ? void 0 : {
              "click": _this.onFilterRemove
            }
          })
        ];
      } : [h(ToolbarItem, {
        "class": "k-filter-field"
      }, _this.v3 ? function() {
        return [h(DropDownList, {
          "class": "k-filter-dropdown",
          dataItems: fields,
          attrs: _this.v3 ? void 0 : {
            dataItems: fields,
            textField: "label",
            value: fields.find(function(f) {
              return f.name === filter.field;
            }),
            ariaLabel: locService.toLanguageString(filterExpressionDropdownAriaLabel, messages[filterExpressionDropdownAriaLabel])
          },
          textField: "label",
          value: fields.find(function(f) {
            return f.name === filter.field;
          }),
          onChange: _this.onFieldChange,
          on: _this.v3 ? void 0 : {
            "change": _this.onFieldChange
          },
          ariaLabel: locService.toLanguageString(filterExpressionDropdownAriaLabel, messages[filterExpressionDropdownAriaLabel])
        })];
      } : [h(DropDownList, {
        "class": "k-filter-dropdown",
        dataItems: fields,
        attrs: _this.v3 ? void 0 : {
          dataItems: fields,
          textField: "label",
          value: fields.find(function(f) {
            return f.name === filter.field;
          }),
          ariaLabel: locService.toLanguageString(filterExpressionDropdownAriaLabel, messages[filterExpressionDropdownAriaLabel])
        },
        textField: "label",
        value: fields.find(function(f) {
          return f.name === filter.field;
        }),
        onChange: _this.onFieldChange,
        on: _this.v3 ? void 0 : {
          "change": _this.onFieldChange
        },
        ariaLabel: locService.toLanguageString(filterExpressionDropdownAriaLabel, messages[filterExpressionDropdownAriaLabel])
      })]), h(ToolbarItem, {
        "class": "k-filter-operator"
      }, _this.v3 ? function() {
        return [h(DropDownList, {
          dataItems: operators2,
          attrs: _this.v3 ? void 0 : {
            dataItems: operators2,
            textField: "text",
            value: operators2.find(function(o) {
              return o.operator === filter.operator;
            }),
            ariaLabel: locService.toLanguageString(filterExpressionOperatorDropdownAriaLabel, messages[filterExpressionOperatorDropdownAriaLabel])
          },
          textField: "text",
          value: operators2.find(function(o) {
            return o.operator === filter.operator;
          }),
          onChange: _this.onOperatorChange,
          on: _this.v3 ? void 0 : {
            "change": _this.onOperatorChange
          },
          ariaLabel: locService.toLanguageString(filterExpressionOperatorDropdownAriaLabel, messages[filterExpressionOperatorDropdownAriaLabel])
        })];
      } : [h(DropDownList, {
        dataItems: operators2,
        attrs: _this.v3 ? void 0 : {
          dataItems: operators2,
          textField: "text",
          value: operators2.find(function(o) {
            return o.operator === filter.operator;
          }),
          ariaLabel: locService.toLanguageString(filterExpressionOperatorDropdownAriaLabel, messages[filterExpressionOperatorDropdownAriaLabel])
        },
        textField: "text",
        value: operators2.find(function(o) {
          return o.operator === filter.operator;
        }),
        onChange: _this.onOperatorChange,
        on: _this.v3 ? void 0 : {
          "change": _this.onOperatorChange
        },
        ariaLabel: locService.toLanguageString(filterExpressionOperatorDropdownAriaLabel, messages[filterExpressionOperatorDropdownAriaLabel])
      })]), h(ToolbarItem, {
        "class": "k-filter-value"
      }, _this.v3 ? function() {
        return [field && filterEditors.call(_this, field.filter, field.filterRender)];
      } : [field && filterEditors.call(_this, field.filter, field.filterRender)]), h(Button, {
        title: locService.toLanguageString(filterClose, messages[filterClose]),
        attrs: _this.v3 ? void 0 : {
          title: locService.toLanguageString(filterClose, messages[filterClose]),
          icon: "x",
          svgIcon: xIcon,
          fillMode: "flat",
          type: "button"
        },
        icon: "x",
        svgIcon: xIcon,
        fillMode: "flat",
        type: "button",
        "class": "k-toolbar-button",
        onClick: _this.onFilterRemove,
        on: _this.v3 ? void 0 : {
          "click": _this.onFilterRemove
        }
      })])
    ]);
  },
  methods: {
    onFieldChange: function onFieldChange(event2) {
      var nextFieldName = event2.value.name;
      var nextField = this.$props.fields.find(function(f) {
        return f.name === nextFieldName;
      });
      var prevFilter = this.$props.filter;
      var operator = nextField && !nextField.operators.some(function(o) {
        return o.operator === prevFilter.operator;
      }) ? nextField.operators[0].operator : prevFilter.operator;
      var nextFilter = {
        field: nextFieldName,
        operator
      };
      if (!unaryOperator(operator)) {
        nextFilter.value = stringOperator(operator) ? "" : null;
      }
      this.triggerOnFilterChange(prevFilter, nextFilter, event2);
    },
    onOperatorChange: function onOperatorChange(event2) {
      var operator = event2.value.operator;
      var prevFilter = this.$props.filter;
      var nextFilter;
      if (unaryOperator(operator)) {
        var value2 = prevFilter.value, prevFilterNoValue = __rest(prevFilter, ["value"]);
        nextFilter = __assign5(__assign5({}, prevFilterNoValue), {
          operator
        });
      } else {
        nextFilter = __assign5(__assign5({}, prevFilter), {
          operator
        });
      }
      this.triggerOnFilterChange(prevFilter, nextFilter, event2);
    },
    onInputChange: function onInputChange(event2) {
      var prevFilter = this.$props.filter;
      var nextFilter = event2.nextFilter;
      if (unaryOperator(nextFilter.operator)) {
        var field = this.$props.fields.find(function(f) {
          return f.name === nextFilter.field;
        });
        nextFilter = __assign5(__assign5({}, nextFilter), {
          operator: field && field.operators[0].operator || nextFilter.operator
        });
      }
      this.triggerOnFilterChange(prevFilter, nextFilter, event2);
    },
    triggerOnFilterChange: function triggerOnFilterChange(prevFilter, nextFilter, event2) {
      var changeEvent = {
        prevFilter,
        nextFilter,
        event: event2.event,
        target: this
      };
      this.$emit("change", changeEvent);
    },
    onFilterRemove: function onFilterRemove(event2) {
      var removeEvent = {
        filter: this.$props.filter,
        event: event2.event,
        target: this
      };
      this.$emit("remove", removeEvent);
    }
  }
};
var Expression = ExpressionVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/filter/GroupToolbar.js
var __assign6 = function() {
  __assign6 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign6.apply(this, arguments);
};
var __spreadArray3 = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var allVue25 = vue_runtime_esm_bundler_exports;
var gh25 = allVue25.h;
var isV325 = allVue25.version && allVue25.version[0] === "3";
var GroupToolbarVue2 = {
  name: "KendoFilterGroup",
  // @ts-ignore
  emits: {
    change: null,
    remove: null
  },
  props: {
    filter: {
      type: Object,
      required: true
    },
    fields: {
      type: Array,
      required: true
    },
    defaultGroupFilter: {
      type: Object,
      required: true
    },
    ariaLabel: {
      type: String,
      default: void 0
    }
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV325 ? void 0 : function() {
    var v3 = !!isV325;
    return {
      v3
    };
  },
  render: function render16(createElement) {
    var _this = this;
    var h = gh25 || createElement;
    var filter = this.$props.filter;
    var locService = provideLocalizationService(this);
    return h("div", {
      "class": "k-filter-toolbar"
    }, [
      // @ts-ignore function children   
      h(Toolbar, {
        keyboardNavigation: false,
        attrs: this.v3 ? void 0 : {
          keyboardNavigation: false,
          role: "toolbar",
          "aria-label": this.$props.ariaLabel
        },
        role: "toolbar",
        "aria-label": this.$props.ariaLabel
      }, this.v3 ? function() {
        return [
          // @ts-ignore function children 
          h(ButtonGroup, {
            "class": "k-toolbar-button-group"
          }, _this.v3 ? function() {
            return [
              // @ts-ignore function children 
              h(Button, {
                togglable: true,
                attrs: _this.v3 ? void 0 : {
                  togglable: true,
                  selected: filter.logic === "and",
                  type: "button"
                },
                onClick: _this.onLogicAnd,
                on: _this.v3 ? void 0 : {
                  "click": _this.onLogicAnd
                },
                "class": "k-toolbar-button",
                selected: filter.logic === "and",
                type: "button"
              }, _this.v3 ? function() {
                return [locService.toLanguageString(filterAndLogic, messages[filterAndLogic])];
              } : [locService.toLanguageString(filterAndLogic, messages[filterAndLogic])]),
              // @ts-ignore function children 
              h(Button, {
                togglable: true,
                attrs: _this.v3 ? void 0 : {
                  togglable: true,
                  selected: filter.logic === "or",
                  type: "button"
                },
                onClick: _this.onLogicOr,
                on: _this.v3 ? void 0 : {
                  "click": _this.onLogicOr
                },
                "class": "k-toolbar-button",
                selected: filter.logic === "or",
                type: "button"
              }, _this.v3 ? function() {
                return [locService.toLanguageString(filterOrLogic, messages[filterOrLogic])];
              } : [locService.toLanguageString(filterOrLogic, messages[filterOrLogic])])
            ];
          } : [h(Button, {
            togglable: true,
            attrs: _this.v3 ? void 0 : {
              togglable: true,
              selected: filter.logic === "and",
              type: "button"
            },
            onClick: _this.onLogicAnd,
            on: _this.v3 ? void 0 : {
              "click": _this.onLogicAnd
            },
            "class": "k-toolbar-button",
            selected: filter.logic === "and",
            type: "button"
          }, _this.v3 ? function() {
            return [locService.toLanguageString(filterAndLogic, messages[filterAndLogic])];
          } : [locService.toLanguageString(filterAndLogic, messages[filterAndLogic])]), h(Button, {
            togglable: true,
            attrs: _this.v3 ? void 0 : {
              togglable: true,
              selected: filter.logic === "or",
              type: "button"
            },
            onClick: _this.onLogicOr,
            on: _this.v3 ? void 0 : {
              "click": _this.onLogicOr
            },
            "class": "k-toolbar-button",
            selected: filter.logic === "or",
            type: "button"
          }, _this.v3 ? function() {
            return [locService.toLanguageString(filterOrLogic, messages[filterOrLogic])];
          } : [locService.toLanguageString(filterOrLogic, messages[filterOrLogic])])]),
          // @ts-ignore function children 
          h(Button, {
            title: locService.toLanguageString(filterAddExpression, messages[filterAddExpression]),
            attrs: _this.v3 ? void 0 : {
              title: locService.toLanguageString(filterAddExpression, messages[filterAddExpression]),
              icon: "filter-add-expression",
              svgIcon: filterAddExpressionIcon,
              type: "button"
            },
            icon: "filter-add-expression",
            svgIcon: filterAddExpressionIcon,
            type: "button",
            "class": "k-toolbar-button",
            onClick: _this.onAddExpression,
            on: _this.v3 ? void 0 : {
              "click": _this.onAddExpression
            }
          }),
          // @ts-ignore function children 
          h(Button, {
            title: locService.toLanguageString(filterAddGroup, messages[filterAddGroup]),
            attrs: _this.v3 ? void 0 : {
              title: locService.toLanguageString(filterAddGroup, messages[filterAddGroup]),
              icon: "filter-add-group",
              svgIcon: filterAddGroupIcon,
              type: "button"
            },
            icon: "filter-add-group",
            svgIcon: filterAddGroupIcon,
            type: "button",
            "class": "k-toolbar-button",
            onClick: _this.onAddGroup,
            on: _this.v3 ? void 0 : {
              "click": _this.onAddGroup
            }
          }),
          // @ts-ignore function children 
          h(Button, {
            title: locService.toLanguageString(filterClose, messages[filterClose]),
            attrs: _this.v3 ? void 0 : {
              title: locService.toLanguageString(filterClose, messages[filterClose]),
              icon: "x",
              svgIcon: xIcon,
              fillMode: "flat",
              type: "button"
            },
            icon: "x",
            svgIcon: xIcon,
            fillMode: "flat",
            type: "button",
            "class": "k-toolbar-button",
            onClick: _this.onGroupRemove,
            on: _this.v3 ? void 0 : {
              "click": _this.onGroupRemove
            }
          })
        ];
      } : [h(ButtonGroup, {
        "class": "k-toolbar-button-group"
      }, _this.v3 ? function() {
        return [h(Button, {
          togglable: true,
          attrs: _this.v3 ? void 0 : {
            togglable: true,
            selected: filter.logic === "and",
            type: "button"
          },
          onClick: _this.onLogicAnd,
          on: _this.v3 ? void 0 : {
            "click": _this.onLogicAnd
          },
          "class": "k-toolbar-button",
          selected: filter.logic === "and",
          type: "button"
        }, _this.v3 ? function() {
          return [locService.toLanguageString(filterAndLogic, messages[filterAndLogic])];
        } : [locService.toLanguageString(filterAndLogic, messages[filterAndLogic])]), h(Button, {
          togglable: true,
          attrs: _this.v3 ? void 0 : {
            togglable: true,
            selected: filter.logic === "or",
            type: "button"
          },
          onClick: _this.onLogicOr,
          on: _this.v3 ? void 0 : {
            "click": _this.onLogicOr
          },
          "class": "k-toolbar-button",
          selected: filter.logic === "or",
          type: "button"
        }, _this.v3 ? function() {
          return [locService.toLanguageString(filterOrLogic, messages[filterOrLogic])];
        } : [locService.toLanguageString(filterOrLogic, messages[filterOrLogic])])];
      } : [h(Button, {
        togglable: true,
        attrs: _this.v3 ? void 0 : {
          togglable: true,
          selected: filter.logic === "and",
          type: "button"
        },
        onClick: _this.onLogicAnd,
        on: _this.v3 ? void 0 : {
          "click": _this.onLogicAnd
        },
        "class": "k-toolbar-button",
        selected: filter.logic === "and",
        type: "button"
      }, _this.v3 ? function() {
        return [locService.toLanguageString(filterAndLogic, messages[filterAndLogic])];
      } : [locService.toLanguageString(filterAndLogic, messages[filterAndLogic])]), h(Button, {
        togglable: true,
        attrs: _this.v3 ? void 0 : {
          togglable: true,
          selected: filter.logic === "or",
          type: "button"
        },
        onClick: _this.onLogicOr,
        on: _this.v3 ? void 0 : {
          "click": _this.onLogicOr
        },
        "class": "k-toolbar-button",
        selected: filter.logic === "or",
        type: "button"
      }, _this.v3 ? function() {
        return [locService.toLanguageString(filterOrLogic, messages[filterOrLogic])];
      } : [locService.toLanguageString(filterOrLogic, messages[filterOrLogic])])]), h(Button, {
        title: locService.toLanguageString(filterAddExpression, messages[filterAddExpression]),
        attrs: _this.v3 ? void 0 : {
          title: locService.toLanguageString(filterAddExpression, messages[filterAddExpression]),
          icon: "filter-add-expression",
          svgIcon: filterAddExpressionIcon,
          type: "button"
        },
        icon: "filter-add-expression",
        svgIcon: filterAddExpressionIcon,
        type: "button",
        "class": "k-toolbar-button",
        onClick: _this.onAddExpression,
        on: _this.v3 ? void 0 : {
          "click": _this.onAddExpression
        }
      }), h(Button, {
        title: locService.toLanguageString(filterAddGroup, messages[filterAddGroup]),
        attrs: _this.v3 ? void 0 : {
          title: locService.toLanguageString(filterAddGroup, messages[filterAddGroup]),
          icon: "filter-add-group",
          svgIcon: filterAddGroupIcon,
          type: "button"
        },
        icon: "filter-add-group",
        svgIcon: filterAddGroupIcon,
        type: "button",
        "class": "k-toolbar-button",
        onClick: _this.onAddGroup,
        on: _this.v3 ? void 0 : {
          "click": _this.onAddGroup
        }
      }), h(Button, {
        title: locService.toLanguageString(filterClose, messages[filterClose]),
        attrs: _this.v3 ? void 0 : {
          title: locService.toLanguageString(filterClose, messages[filterClose]),
          icon: "x",
          svgIcon: xIcon,
          fillMode: "flat",
          type: "button"
        },
        icon: "x",
        svgIcon: xIcon,
        fillMode: "flat",
        type: "button",
        "class": "k-toolbar-button",
        onClick: _this.onGroupRemove,
        on: _this.v3 ? void 0 : {
          "click": _this.onGroupRemove
        }
      })])
    ]);
  },
  methods: {
    onGroupRemove: function onGroupRemove() {
      this.$emit("remove", {
        filter: this.$props.filter
      });
    },
    onAddExpression: function onAddExpression() {
      var prevFilter = this.$props.filter;
      var firstField = this.$props.fields[0];
      var newExpression = {
        field: firstField.name,
        operator: firstField.operators[0].operator
      };
      newExpression.value = stringOperator(newExpression.operator) ? "" : null;
      this.$emit("change", {
        nextFilter: __assign6(__assign6({}, prevFilter), {
          filters: __spreadArray3(__spreadArray3([], prevFilter.filters, true), [newExpression], false)
        }),
        prevFilter
      });
    },
    onAddGroup: function onAddGroup() {
      var prevFilter = this.$props.filter;
      this.$emit("change", {
        nextFilter: __assign6(__assign6({}, prevFilter), {
          filters: __spreadArray3(__spreadArray3([], prevFilter.filters, true), [__assign6({}, this.$props.defaultGroupFilter)], false)
        }),
        prevFilter
      });
    },
    onLogicAnd: function onLogicAnd() {
      this.changeLogic("and");
    },
    onLogicOr: function onLogicOr() {
      this.changeLogic("or");
    },
    changeLogic: function changeLogic(logic) {
      var prevFilter = this.$props.filter;
      if (prevFilter.logic !== logic) {
        this.$emit("change", {
          nextFilter: __assign6(__assign6({}, prevFilter), {
            logic
          }),
          prevFilter
        });
      }
    }
  }
};
var GroupToolbar = GroupToolbarVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/filter/GroupFilters.js
var __assign7 = function() {
  __assign7 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign7.apply(this, arguments);
};
var allVue26 = vue_runtime_esm_bundler_exports;
var gh26 = allVue26.h;
var isV326 = allVue26.version && allVue26.version[0] === "3";
var GroupFilterVue2 = {
  name: "KendoFilterGroup",
  // @ts-ignore
  emits: {
    change: null,
    remove: null
  },
  props: {
    filter: {
      type: Object,
      required: true
    },
    fields: {
      type: Array,
      required: true
    },
    defaultGroupFilter: {
      type: Object,
      required: true
    }
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV326 ? void 0 : function() {
    var v3 = !!isV326;
    return {
      v3
    };
  },
  render: function render17(createElement) {
    var h = gh26 || createElement;
    var localizationService = provideLocalizationService(this);
    var _a11 = this.$props, fields = _a11.fields, filter = _a11.filter, filterRender = _a11.filterRender;
    return filter.filters.length > 0 ? h("ul", {
      "class": "k-filter-lines",
      role: "group",
      attrs: this.v3 ? void 0 : {
        role: "group"
      }
    }, [filter.filters.map(function(f, idx) {
      return h("li", {
        key: idx,
        "class": "k-filter-item",
        role: "treeitem",
        attrs: this.v3 ? void 0 : {
          role: "treeitem"
        }
      }, [isCompositeFilterDescriptor(f) ? [
        // @ts-ignore
        h(GroupToolbar, {
          filter: f,
          attrs: this.v3 ? void 0 : {
            filter: f,
            fields,
            ariaLabel: localizationService.toLanguageString(filterGroupFilterAriaLabel, messages[filterGroupFilterAriaLabel]),
            defaultGroupFilter: this.$props.defaultGroupFilter
          },
          fields,
          ariaLabel: localizationService.toLanguageString(filterGroupFilterAriaLabel, messages[filterGroupFilterAriaLabel]),
          onChange: this.onChange,
          on: this.v3 ? void 0 : {
            "change": this.onChange,
            "remove": this.onRemove
          },
          onRemove: this.onRemove,
          defaultGroupFilter: this.$props.defaultGroupFilter
        }),
        h(GroupFilter, {
          filter: f,
          attrs: this.v3 ? void 0 : {
            filter: f,
            fields,
            defaultGroupFilter: this.$props.defaultGroupFilter
          },
          fields,
          onChange: this.onChange,
          on: this.v3 ? void 0 : {
            "change": this.onChange,
            "remove": this.onRemove
          },
          onRemove: this.onRemove,
          defaultGroupFilter: this.$props.defaultGroupFilter
        })
      ] : (
        // @ts-ignore
        h(Expression, {
          filter: f,
          attrs: this.v3 ? void 0 : {
            filter: f,
            fields,
            filterRender
          },
          fields,
          filterRender,
          onChange: this.onChange,
          on: this.v3 ? void 0 : {
            "change": this.onChange,
            "remove": this.onRemove
          },
          onRemove: this.onRemove
        })
      )]);
    }, this)]) : null;
  },
  methods: {
    replaceFilter: function replaceFilter(prevFilter, nextFilter) {
      var filter = this.$props.filter;
      var filters = filter.filters.map(function(f) {
        return f === prevFilter ? nextFilter : f;
      });
      return __assign7(__assign7({}, filter), {
        filters
      });
    },
    onChange: function onChange5(event2) {
      var nextFilter = this.replaceFilter(event2.prevFilter, event2.nextFilter);
      var changeEvent = {
        nextFilter,
        prevFilter: this.$props.filter,
        event: event2.event,
        target: this
      };
      this.$emit("change", changeEvent);
    },
    onRemove: function onRemove(event2) {
      var prevFilter = this.$props.filter;
      var filters = prevFilter.filters.filter(function(f) {
        return f !== event2.filter;
      });
      var changeEvent = {
        nextFilter: __assign7(__assign7({}, prevFilter), {
          filters
        }),
        prevFilter,
        event: event2.event,
        target: this
      };
      this.$emit("change", changeEvent);
    }
  }
};
var GroupFilter = GroupFilterVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/package-metadata.js
var packageMetadata2 = {
  name: "@progress/kendo-vue-data-tools",
  productName: "Kendo UI for Vue",
  productCodes: ["KENDOUIVUE", "KENDOUICOMPLETE"],
  publishDate: 1718172938,
  version: "",
  licensingDocsUrl: "https://www.telerik.com/kendo-vue-ui/my-license/?utm_medium=product&utm_source=kendovue&utm_campaign=kendo-ui-vue-purchase-license-keys-warning"
};

// node_modules/@progress/kendo-vue-data-tools/dist/es/filter/Filter.js
var __assign8 = function() {
  __assign8 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign8.apply(this, arguments);
};
var allVue27 = vue_runtime_esm_bundler_exports;
var gh27 = allVue27.h;
var isV327 = allVue27.version && allVue27.version[0] === "3";
var FilterVue2 = {
  name: "KendoFilter",
  // @ts-ignore
  emits: {
    change: null,
    "changemodel": null,
    "update:modelValue": null
  },
  model: {
    event: "changemodel"
  },
  props: {
    fields: {
      type: Array,
      required: true
    },
    modelValue: {
      type: Object,
      default: void 0
    },
    value: Object,
    defaultGroupFilter: Object,
    upperToolbarAriaLabel: {
      type: String,
      default: void 0
    }
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  created: function created5() {
    validatePackage(packageMetadata2);
  },
  // @ts-ignore
  setup: !isV327 ? void 0 : function() {
    var v3 = !!isV327;
    return {
      v3
    };
  },
  computed: {
    computedValue: function computedValue2() {
      var value2;
      if (this.$props.value !== void 0) {
        value2 = this.$props.value;
      } else if (this.$props.modelValue !== void 0) {
        value2 = this.$props.modelValue;
      }
      return value2;
    }
  },
  render: function render18(createElement) {
    var locService = provideLocalizationService(this);
    var h = gh27 || createElement;
    var fields = this.$props.fields.map(function(field) {
      return __assign8(__assign8({}, field), {
        filterRender: templateRendering.call(this, field.filterRender, getListeners.call(this))
      });
    }, this);
    return h("div", {
      "class": "k-filter"
    }, [h("ul", {
      "class": "k-filter-container",
      role: "tree",
      attrs: this.v3 ? void 0 : {
        role: "tree",
        ariaLabel: locService.toLanguageString(filterAriaLabel, messages[filterAriaLabel])
      },
      ariaLabel: locService.toLanguageString(filterAriaLabel, messages[filterAriaLabel])
    }, [h("li", {
      "class": "k-filter-group-main",
      role: "treeitem",
      attrs: this.v3 ? void 0 : {
        role: "treeitem"
      }
    }, [
      // @ts-ignore function children
      h(GroupToolbar, {
        "aria-label": this.$props.upperToolbarAriaLabel,
        attrs: this.v3 ? void 0 : {
          "aria-label": this.$props.upperToolbarAriaLabel,
          filter: this.computedValue,
          fields,
          defaultGroupFilter: this.$props.defaultGroupFilter || {
            logic: "and",
            filters: []
          }
        },
        filter: this.computedValue,
        fields,
        onChange: this.onFilterChange,
        on: this.v3 ? void 0 : {
          "change": this.onFilterChange,
          "remove": this.onGroupRemove
        },
        onRemove: this.onGroupRemove,
        defaultGroupFilter: this.$props.defaultGroupFilter || {
          logic: "and",
          filters: []
        }
      }),
      // @ts-ignore function children
      h(GroupFilter, {
        filter: this.computedValue,
        attrs: this.v3 ? void 0 : {
          filter: this.computedValue,
          fields,
          defaultGroupFilter: this.$props.defaultGroupFilter || {
            logic: "and",
            filters: []
          }
        },
        fields,
        onChange: this.onFilterChange,
        on: this.v3 ? void 0 : {
          "change": this.onFilterChange,
          "remove": this.onGroupRemove
        },
        onRemove: this.onGroupRemove,
        defaultGroupFilter: this.$props.defaultGroupFilter || {
          logic: "and",
          filters: []
        }
      })
    ])])]);
  },
  methods: {
    onFilterChange: function onFilterChange(event2) {
      var changeEvent = {
        filter: event2.nextFilter,
        event: event2.event,
        target: this
      };
      this.$emit("changemodel", event2.nextFilter);
      this.$emit("update:modelValue", event2.nextFilter);
      this.$emit("change", changeEvent);
    },
    onGroupRemove: function onGroupRemove2(event2) {
      var nextFilter = __assign8(__assign8({}, this.computedValue), {
        filters: []
      });
      var changeEvent = {
        filter: nextFilter,
        event: event2.event,
        target: this
      };
      this.$emit("changemodel", nextFilter);
      this.$emit("update:modelValue", nextFilter);
      this.$emit("change", changeEvent);
    }
  }
};
var Filter = FilterVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/interfaces/ColumnProps.js
var ColumnDefaultProps = {
  filterable: true,
  editable: true,
  sortable: true,
  resizable: true,
  reorderable: true,
  groupable: true
};

// node_modules/@progress/kendo-vue-data-tools/dist/es/filterCommon.js
var filterLogicList = [
  { text: "grid.filterAndLogic", operator: "and" },
  { text: "grid.filterOrLogic", operator: "or" }
];
var operators = {
  "text": [
    { text: "grid.filterContainsOperator", operator: "contains" },
    { text: "grid.filterNotContainsOperator", operator: "doesnotcontain" },
    { text: "grid.filterEqOperator", operator: "eq" },
    { text: "grid.filterNotEqOperator", operator: "neq" },
    { text: "grid.filterStartsWithOperator", operator: "startswith" },
    { text: "grid.filterEndsWithOperator", operator: "endswith" },
    { text: "grid.filterIsNullOperator", operator: "isnull" },
    { text: "grid.filterIsNotNullOperator", operator: "isnotnull" },
    { text: "grid.filterIsEmptyOperator", operator: "isempty" },
    { text: "grid.filterIsNotEmptyOperator", operator: "isnotempty" }
  ],
  "numeric": [
    { text: "grid.filterEqOperator", operator: "eq" },
    { text: "grid.filterNotEqOperator", operator: "neq" },
    { text: "grid.filterGteOperator", operator: "gte" },
    { text: "grid.filterGtOperator", operator: "gt" },
    { text: "grid.filterLteOperator", operator: "lte" },
    { text: "grid.filterLtOperator", operator: "lt" },
    { text: "grid.filterIsNullOperator", operator: "isnull" },
    { text: "grid.filterIsNotNullOperator", operator: "isnotnull" }
  ],
  "date": [
    { text: "grid.filterEqOperator", operator: "eq" },
    { text: "grid.filterNotEqOperator", operator: "neq" },
    { text: "grid.filterAfterOrEqualOperator", operator: "gte" },
    { text: "grid.filterAfterOperator", operator: "gt" },
    { text: "grid.filterBeforeOperator", operator: "lt" },
    { text: "grid.filterBeforeOrEqualOperator", operator: "lte" },
    { text: "grid.filterIsNullOperator", operator: "isnull" },
    { text: "grid.filterIsNotNullOperator", operator: "isnotnull" }
  ],
  "boolean": [
    { text: "grid.filterEqOperator", operator: "eq" }
  ]
};
var IsUnaryFilter = function(operator) {
  return operator === "isnull" || operator === "isnotnull" || operator === "isempty" || operator === "isnotempty";
};
var operatorMap = function(iterable, service) {
  return iterable.map(function(operator) {
    return {
      text: service.toLanguageString(operator.text, messages[operator.text]),
      operator: operator.operator
    };
  });
};
var defaultBooleanOperator = "eq";
var booleanFilterValues = [
  { text: "grid.filterBooleanAll", operator: "" },
  { text: "grid.filterIsTrue", operator: true },
  { text: "grid.filterIsFalse", operator: false }
];
var defaultHideSecondFilter = {
  text: false,
  numeric: false,
  date: false,
  boolean: true
};
var cellInputChange = function(value2, e, props) {
  var defaultOperator = getDefaultOperator(props.operators);
  var operator = props.operator;
  switch (props.filterType) {
    case "numeric":
      if (!operator || IsUnaryFilter(operator)) {
        operator = defaultOperator;
      }
      if (value2 === null && operator === defaultOperator) {
        operator = "";
      }
      break;
    case "date":
      if (!operator || IsUnaryFilter(operator)) {
        operator = defaultOperator;
      }
      if (value2 === null && operator === defaultOperator) {
        operator = "";
      }
      break;
    case "text":
      if (!operator || IsUnaryFilter(operator)) {
        operator = defaultOperator;
      }
      if (!value2 && operator === defaultOperator) {
        operator = "";
      }
      break;
    default:
      return;
  }
  return { value: value2, operator, event: e };
};
var getDefaultOperator = function(filterOperators, filterType) {
  if (filterType) {
    return filterOperators[filterType][0].operator;
  } else {
    return filterOperators[0].operator;
  }
};
var getFilterType = function(filterType) {
  return filterType || "text";
};
var cellBoolDropdownChange = function(value2, e) {
  return {
    value: value2,
    operator: value2 === "" ? "" : defaultBooleanOperator,
    event: e
  };
};
var cellOperatorChange = function(operator, e, value2) {
  if (IsUnaryFilter(operator)) {
    value2 = null;
  }
  return { value: value2, operator, event: e };
};

// node_modules/@progress/kendo-vue-data-tools/dist/es/cells/FilterCell.js
var allVue28 = vue_runtime_esm_bundler_exports;
var gh28 = allVue28.h;
var isV328 = allVue28.version && allVue28.version[0] === "3";
var inject14 = allVue28.inject;
var FilterCellVue2 = {
  name: "KendoFilterCell",
  inheritAttrs: false,
  // @ts-ignore
  emits: {
    "change": null
  },
  props: {
    id: String,
    grid: Object,
    field: String,
    filterType: String,
    colSpan: Number,
    title: String,
    value: [String, Number, Boolean, Date],
    operator: [String, Function],
    operators: Array,
    booleanValues: Array,
    onChange: Function,
    render: [String, Function, Object],
    ariaLabel: String,
    size: String
  },
  inject: {
    kendoLocalizationService: {
      default: null
    },
    kendoIntlService: {
      default: null
    }
  },
  methods: {
    inputChange: function inputChange(value2, e) {
      var filter = cellInputChange(value2, e, this.$props);
      this.triggerChange(filter);
    },
    operatorChange: function operatorChange(operatorValue, e) {
      var filter = cellOperatorChange(operatorValue.value.operator, e, this.$props.value);
      this.triggerChange(filter);
    },
    boolDropdownChange: function boolDropdownChange(value2, e) {
      var filter = cellBoolDropdownChange(value2.value.operator, e);
      this.triggerChange(filter);
    },
    clear: function clear(e) {
      e.preventDefault();
      this.triggerChange({
        value: "",
        operator: "",
        event: e
      });
    },
    triggerChange: function triggerChange3(filter) {
      filter.field = this.$props.field;
      this.$emit("change", filter);
    }
  },
  // @ts-ignore
  setup: !isV328 ? void 0 : function() {
    var v3 = !!isV328;
    var kendoIntlService = inject14("kendoIntlService", {});
    var kendoLocalizationService = inject14("kendoLocalizationService", {});
    return {
      v3,
      kendoIntlService,
      kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render19(createElement) {
    var _this = this;
    var h = gh28 || createElement;
    var size = this.$props.size;
    var ls = provideLocalizationService(this);
    var selectedOperator = this.$props.operators.find(function(item) {
      return item.operator === _this.$props.operator;
    }) || null;
    var renderOperatorEditor = function renderOperatorEditor2() {
      if (this.$props.filterType === "boolean") {
        return;
      }
      return (
        // @ts-ignore
        h(DropDownList, {
          onChange: this.operatorChange,
          on: this.v3 ? void 0 : {
            "change": this.operatorChange
          },
          value: selectedOperator,
          attrs: this.v3 ? void 0 : {
            value: selectedOperator,
            size,
            icon: "filter",
            svgIcon: filterIcon,
            iconClassName: "k-button-icon",
            "data-items": this.$props.operators,
            textField: "text",
            title: ls.toLanguageString(columnMenuFilterChooseOperator, messages[columnMenuFilterChooseOperator]),
            popupSettings: {
              width: ""
            },
            "aria-label": this.ariaLabel || ls.toLanguageString(filterDropDownOperatorAriaLabel, messages[filterDropDownOperatorAriaLabel])
          },
          size,
          "class": "k-dropdown-operator",
          icon: "filter",
          svgIcon: filterIcon,
          iconClassName: "k-button-icon",
          "data-items": this.$props.operators,
          textField: "text",
          title: ls.toLanguageString(columnMenuFilterChooseOperator, messages[columnMenuFilterChooseOperator]),
          popupSettings: {
            width: ""
          },
          "aria-label": this.ariaLabel || ls.toLanguageString(filterDropDownOperatorAriaLabel, messages[filterDropDownOperatorAriaLabel])
        })
      );
    };
    var filterComponent = function filterComponent2(filterType, value2) {
      var _this2 = this;
      switch (filterType) {
        case "numeric":
          return (
            // @ts-ignore
            h(NumericTextBox, {
              size,
              attrs: this.v3 ? void 0 : {
                size,
                value: value2,
                title: this.$props.title,
                "aria-label": this.ariaLabel || ls.toLanguageString(filterNumericFilterAriaLabel, messages[filterNumericFilterAriaLabel])
              },
              value: value2,
              onChange: function onChange6(e) {
                _this2.inputChange(e.value, e.event);
              },
              on: this.v3 ? void 0 : {
                "change": function onChange6(e) {
                  _this2.inputChange(e.value, e.event);
                }
              },
              title: this.$props.title,
              "aria-label": this.ariaLabel || ls.toLanguageString(filterNumericFilterAriaLabel, messages[filterNumericFilterAriaLabel])
            })
          );
        case "date":
          return (
            // @ts-ignore
            h(DatePicker, {
              size,
              attrs: this.v3 ? void 0 : {
                size,
                value: value2,
                title: this.$props.title,
                "aria-label": this.ariaLabel || ls.toLanguageString(filterDateFilterAriaLabel, messages[filterDateFilterAriaLabel])
              },
              value: value2,
              onChange: function onChange6(e) {
                _this2.inputChange(e.value, e);
              },
              on: this.v3 ? void 0 : {
                "change": function onChange6(e) {
                  _this2.inputChange(e.value, e);
                }
              },
              title: this.$props.title,
              "aria-label": this.ariaLabel || ls.toLanguageString(filterDateFilterAriaLabel, messages[filterDateFilterAriaLabel])
            })
          );
        case "boolean":
          var booleanValues = this.$props.booleanValues;
          return (
            // @ts-ignore
            h(DropDownList, {
              onChange: this.boolDropdownChange,
              on: this.v3 ? void 0 : {
                "change": this.boolDropdownChange
              },
              size,
              attrs: this.v3 ? void 0 : {
                size,
                value: booleanValues.find(function(item) {
                  return item.operator === (value2 !== null ? value2 : "");
                }),
                "data-items": booleanValues,
                textField: "text",
                title: this.$props.title,
                "aria-label": this.ariaLabel || ls.toLanguageString(filterEnumFilterDropdownAriaLabel, messages[filterEnumFilterDropdownAriaLabel])
              },
              value: booleanValues.find(function(item) {
                return item.operator === (value2 !== null ? value2 : "");
              }),
              "data-items": booleanValues,
              textField: "text",
              title: this.$props.title,
              "aria-label": this.ariaLabel || ls.toLanguageString(filterEnumFilterDropdownAriaLabel, messages[filterEnumFilterDropdownAriaLabel])
            })
          );
        default:
          return h(TextBox, {
            size,
            attrs: this.v3 ? void 0 : {
              size,
              value: value2 || "",
              title: this.$props.title,
              "aria-label": this.ariaLabel || ls.toLanguageString(filterTextFilterAriaLabel, messages[filterTextFilterAriaLabel])
            },
            value: value2 || "",
            onInput: function onInput(e) {
              _this2.inputChange(e.target.value, e);
            },
            on: this.v3 ? void 0 : {
              "input": function onInput(e) {
                _this2.inputChange(e.target.value, e);
              }
            },
            title: this.$props.title,
            "aria-label": this.ariaLabel || ls.toLanguageString(filterTextFilterAriaLabel, messages[filterTextFilterAriaLabel])
          });
      }
    };
    var defaultRendering = h("div", {
      "class": "k-filtercell",
      style: this.$attrs.style
    }, [h("div", {
      "class": "k-filtercell-wrapper"
    }, [filterComponent.call(this, this.$props.filterType, this.$props.value), h("div", {
      "class": "k-filtercell-operator"
    }, [
      renderOperatorEditor.call(this),
      // @ts-ignore function children 
      h(Button, {
        size,
        attrs: this.v3 ? void 0 : {
          size,
          type: "button",
          icon: "filter-clear",
          svgIcon: filterClearIcon,
          title: ls.toLanguageString(columnMenuFilterClearButton, messages[columnMenuFilterClearButton])
        },
        type: "button",
        icon: "filter-clear",
        svgIcon: filterClearIcon,
        "class": {
          /* button is always visible if there is either value or operator */
          "k-disabled": !(!(this.$props.value === null || this.$props.value === "") || this.$props.operator)
        },
        title: ls.toLanguageString(columnMenuFilterClearButton, messages[columnMenuFilterClearButton]),
        onClick: this.clear,
        on: this.v3 ? void 0 : {
          "click": this.clear
        }
      })
    ])])]);
    var gridListeners = this.$props.grid ? getListeners.call(this.$props.grid) : null;
    var cellRenderFunction = templateRendering.call(this.$props.grid, this.$props.render, gridListeners);
    return getTemplate.call(this, {
      h,
      template: cellRenderFunction,
      defaultRendering,
      additionalProps: this.$props,
      additionalListeners: {
        change: this.triggerChange
      }
    });
  }
};
var FilterCell = FilterCellVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/navigation/constants.js
var __spreadArray4 = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var _a10;
var _b3;
var _c2;
var KEYBOARD_NAV_DATA_LEVEL = "data-keyboardnavlevel";
var KEYBOARD_NAV_DATA_SCOPE = "data-keyboardnavscope";
var KEYBOARD_NAV_DATA_HEADER = "data-keyboardnavheader";
var KEYBOARD_NAV_DATA_BODY = "data-keyboardnavbody";
var KEYBOARD_NAV_DATA_ID = "data-keyboardnavid";
var KEYBOARD_NAV_DATA_ZONE = "data-keyboardnavzone";
var KEYBOARD_NAV_FILTER_COL_SUFFIX = "_filter";
var FOCUSABLE_ELEMENTS_BASE = ["input:not([disabled]):not([type=hidden])", "select:not([disabled])", "textarea:not([disabled])", "button:not([disabled])", "a[href]", "area[href]", "summary", "iframe", "object", "embed", "audio[controls]", "video[controls]", "[contenteditable]"];
var FOCUSABLE_ELEMENTS = __spreadArray4(__spreadArray4([], FOCUSABLE_ELEMENTS_BASE, true), ["[tabindex]"], false);
var TABBABLE_ELEMENTS = __spreadArray4(__spreadArray4([], FOCUSABLE_ELEMENTS_BASE, true), ["[tabindex]"], false).map(function(selector) {
  return selector + ':not([tabindex="-1"])';
});
var tableKeyboardNavigationScopeAttributes = (_a10 = {}, _a10[KEYBOARD_NAV_DATA_SCOPE] = true, _a10);
var tableKeyboardNavigationHeaderAttributes = (_b3 = {}, _b3[KEYBOARD_NAV_DATA_HEADER] = true, _b3);
var tableKeyboardNavigationBodyAttributes = (_c2 = {}, _c2[KEYBOARD_NAV_DATA_BODY] = true, _c2);

// node_modules/@progress/kendo-vue-data-tools/dist/es/navigation/utils.js
var generateNavigatableId = function(navigationId, idPrefix, type) {
  if (type === void 0) {
    type = "cell";
  }
  return "".concat(idPrefix, "_").concat(navigationId, "_").concat(type);
};
var getNavigatableLevel = function(element3) {
  if (!element3) {
    return;
  }
  return parseInt(element3.getAttribute(KEYBOARD_NAV_DATA_LEVEL) || "", 10);
};
var getNavigatableId = function(element3) {
  if (!element3) {
    return;
  }
  var dataId = element3.getAttribute(KEYBOARD_NAV_DATA_ID);
  return dataId ? dataId : void 0;
};
var isNavigatable = function(element3) {
  if (!element3) {
    return false;
  }
  var dataId = element3.getAttribute(KEYBOARD_NAV_DATA_ID);
  return Boolean(dataId);
};
var getNavigatableElement = function(scope, options) {
  if (options === void 0) {
    options = { level: 0 };
  }
  return scope.querySelector("[".concat(KEYBOARD_NAV_DATA_LEVEL, "='").concat(options.level, "']"));
};
var getClosestNavigatableElement = function(target) {
  return target.parentElement && target.parentElement.closest("[".concat(KEYBOARD_NAV_DATA_LEVEL, "]"));
};
var getActiveElement = function(scope, activeId) {
  return scope.querySelector("[".concat(KEYBOARD_NAV_DATA_ID, "='").concat(activeId, "']"));
};
var getClosestScope = function(target) {
  return target.parentElement && target.parentElement.closest("[".concat(KEYBOARD_NAV_DATA_SCOPE, "]"));
};
var getHeaderElement = function(scope) {
  return scope.querySelector("[".concat(KEYBOARD_NAV_DATA_HEADER, "]"));
};
var getBodyElement = function(scope) {
  return scope.querySelector("[".concat(KEYBOARD_NAV_DATA_BODY, "]"));
};
var getFocusableElements = function(scope, options) {
  if (options === void 0) {
    options = { focusable: false };
  }
  var selectors = options.focusable ? FOCUSABLE_ELEMENTS : TABBABLE_ELEMENTS;
  return Array.from(scope.querySelectorAll(selectors.join(",")));
};
var getNavigatableElements = function(scope, options) {
  if (options === void 0) {
    options = { level: 0 };
  }
  if (!scope) {
    return [];
  }
  var selector = FOCUSABLE_ELEMENTS.map(function(el) {
    return el + "[".concat(KEYBOARD_NAV_DATA_LEVEL, "='").concat(options.level, "']");
  }).join(",");
  return Array.from(scope.querySelectorAll(selector));
};
var filterNavigatableElements = function(options) {
  if (options === void 0) {
    options = { level: 0 };
  }
  var selector = FOCUSABLE_ELEMENTS.map(function(sel) {
    return sel + "[".concat(KEYBOARD_NAV_DATA_LEVEL, "='").concat(options.level, "']");
  }).join(",");
  return function(element3) {
    return element3.matches(selector);
  };
};
var focusElement = function(options) {
  var elementForFocus = options.elementForFocus, event2 = options.event, kbContext = options.kbContext, prevElement = options.prevElement;
  if (kbContext && elementForFocus && elementForFocus.focus) {
    event2.preventDefault();
    elementForFocus.focus();
    if (isNavigatable(elementForFocus)) {
      elementForFocus.setAttribute("tabIndex", "0");
      kbContext.activeId = getNavigatableId(elementForFocus);
    }
    if (prevElement && isNavigatable(prevElement)) {
      prevElement.setAttribute("tabIndex", "-1");
    }
  }
};
var getIdPrefix = function(navigation) {
  return navigation ? navigation.idPrefix : "";
};
var findNextIdByRowIndex = function(initialRowIndex, cellIndex, elementId, matrix, isReverse) {
  if (!elementId) {
    return [];
  }
  var currentRowIndex = initialRowIndex + (isReverse ? -1 : 1);
  while (currentRowIndex >= 0 && currentRowIndex < matrix.length) {
    var currentId = matrix[currentRowIndex][cellIndex];
    if (currentId !== elementId) {
      return [currentId, [currentRowIndex, cellIndex]];
    }
    currentRowIndex = currentRowIndex + (isReverse ? -1 : 1);
  }
  return [];
};
var findNextIdByCellIndex = function(rowIndex, initialCellIndex, elementId, matrix, isReverse) {
  if (!elementId) {
    return [];
  }
  var currentCellIndex = initialCellIndex + (isReverse ? -1 : 1);
  while (currentCellIndex >= 0 && currentCellIndex < matrix[rowIndex].length) {
    var currentId = matrix[rowIndex][currentCellIndex];
    if (currentId !== elementId) {
      return [currentId, [rowIndex, currentCellIndex]];
    }
    currentCellIndex = currentCellIndex + (isReverse ? -1 : 1);
  }
  return [];
};
var findId = function(navigationMatrix, cellId) {
  if (!cellId) {
    return;
  }
  for (var rowIndex = 0; rowIndex < navigationMatrix.length; rowIndex++) {
    for (var cellIndex = 0; cellIndex < navigationMatrix[rowIndex].length; cellIndex++) {
      if (navigationMatrix[rowIndex][cellIndex] === cellId) {
        return [rowIndex, cellIndex];
      }
    }
  }
};
var getNextNavigationIndex = function(navigation) {
  return navigation ? navigation.navigationMatrix.length : 0;
};
var getFilterColumnId = function(columnId) {
  return columnId ? "".concat(columnId).concat(KEYBOARD_NAV_FILTER_COL_SUFFIX) : "";
};
var tableKeyboardNavigationTools = {
  generateNavigatableId,
  getNavigatableId,
  getNavigatableLevel,
  getNavigatableElement,
  getClosestNavigatableElement,
  getActiveElement,
  getClosestScope,
  getHeaderElement,
  getBodyElement,
  getFocusableElements,
  getNavigatableElements,
  filterNavigatableElements,
  focusElement,
  getIdPrefix,
  isNavigatable,
  findNextIdByRowIndex,
  findNextIdByCellIndex,
  findId,
  getNextNavigationIndex,
  getFilterColumnId
};

// node_modules/@progress/kendo-vue-data-tools/dist/es/header/HeaderThElement.js
var allVue29 = vue_runtime_esm_bundler_exports;
var gh29 = allVue29.h;
var isV329 = allVue29.version && allVue29.version[0] === "3";
var inject15 = allVue29.inject;
var HeaderThElementVue2 = {
  name: "KendoHeaderThElement",
  // @ts-ignore
  emits: {
    keydown: null
  },
  props: {
    ariaSort: {
      type: String,
      validator: function validator7(value2) {
        return ["none", "ascending", "descending"].includes(value2);
      }
    },
    ariaLabel: String,
    ariaColumnIndex: Number,
    ariaSelected: Boolean,
    colSpan: Number,
    rowSpan: Number,
    role: String,
    columnId: String,
    navigatable: Boolean
  },
  computed: {
    thClass: function thClass() {
      var _a11;
      var className = this.$props.className;
      return _a11 = {
        "k-table-th": true
      }, _a11[className] = className, _a11;
    }
  },
  inject: {
    getKeyboardNavigationAttributes: {
      default: noop
    }
  },
  // @ts-ignore
  setup: !isV329 ? void 0 : function() {
    var v3 = !!isV329;
    var kendoIntlService = inject15("kendoIntlService", {});
    var kendoLocalizationService = inject15("kendoLocalizationService", {});
    return {
      v3,
      kendoIntlService,
      kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render20(createElement) {
    var h = gh29 || createElement;
    var _a11 = this.$props, ariaSort = _a11.ariaSort, colSpan = _a11.colSpan, rowSpan = _a11.rowSpan, columnId = _a11.columnId, navigatable = _a11.navigatable, ariaColumnIndex = _a11.ariaColumnIndex, ariaLabel = _a11.ariaLabel, role = _a11.role, ariaSelected = _a11.ariaSelected;
    var navAttrs = this.getKeyboardNavigationAttributes(columnId, navigatable);
    var defaultSlot = getDefaultSlots(this);
    return h("th", {
      style: {
        top: "0px"
      },
      "aria-sort": ariaSort,
      attrs: this.v3 ? void 0 : {
        "aria-sort": ariaSort,
        "aria-label": ariaLabel,
        "aria-colindex": ariaColumnIndex,
        "aria-selected": ariaSelected,
        colspan: colSpan,
        rowspan: rowSpan,
        role,
        tabindex: navAttrs.tabIndex,
        "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
        "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
      },
      "aria-label": ariaLabel,
      "aria-colindex": ariaColumnIndex,
      "aria-selected": ariaSelected,
      colspan: colSpan,
      rowspan: rowSpan,
      "class": this.thClass,
      onKeydown: this.onKeyDown,
      on: this.v3 ? void 0 : {
        "keydown": this.onKeyDown
      },
      role,
      tabindex: navAttrs.tabIndex,
      "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
      "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
    }, [defaultSlot]);
  },
  methods: {
    onKeyDown: function onKeyDown(e) {
      this.$emit("keydown", e);
    }
  }
};
var HeaderThElement = HeaderThElementVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/header/FilterRow.js
var allVue30 = vue_runtime_esm_bundler_exports;
var gh30 = allVue30.h;
var isV330 = allVue30.version && allVue30.version[0] === "3";
var inject16 = allVue30.inject;
var FilterRowVue2 = {
  name: "kendoFilterRow",
  props: {
    grid: Object,
    columns: Array,
    filter: [Object, Array],
    filterOperators: Object,
    sort: [Object, Array],
    cellRender: [String, Function, Object],
    isRtl: Boolean,
    ariaRowIndex: Number,
    size: String
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  methods: {
    headerCellClassName: function headerCellClassName(field, locked) {
      var result = "k-table-th k-header" + (locked ? " k-grid-header-sticky" : "");
      if (this.$props.sort && this.$props.sort.filter(function(descriptor) {
        return descriptor.field === field;
      }).length > 0) {
        result += " k-sorted";
      }
      return result;
    },
    setFilter: function setFilter(value2, operator, field, e) {
      var filter = this.$props.filter;
      var filters = [];
      if (value2 !== "" && value2 !== null || operator !== "") {
        filters.push({
          field,
          operator,
          value: value2
        });
      }
      if (filter && (filter.filters || filter.length)) {
        var oldFilters = filter.length ? filter : filter.filters || [];
        oldFilters.forEach(function(f) {
          var descriptor = f;
          if (descriptor && descriptor.field !== field) {
            filters.push(descriptor);
          }
        });
      }
      var filtersResult = filters.length > 0 ? {
        logic: "and",
        filters
      } : null;
      this.$emit("filterchange", filtersResult, e);
    }
  },
  // @ts-ignore
  setup: !isV330 ? void 0 : function() {
    var v3 = !!isV330;
    var kendoLocalizationService = inject16("kendoLocalizationService", {});
    return {
      v3,
      kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render21(createElement) {
    var h = gh30 || createElement;
    var intl2 = provideLocalizationService(this);
    var oldFilters = this.$props.filter && this.$props.filter.filters ? this.$props.filter.filters : this.$props.filter.length ? this.$props.filter : [];
    var activeFilterValueFor = function activeFilterValueFor2(field, defaultValue) {
      if (defaultValue === void 0) {
        defaultValue = null;
      }
      var found = oldFilters.filter(function(filter) {
        return filter.field === field;
      })[0];
      return found ? found.value : defaultValue;
    };
    var activeOperatorFor = function activeOperatorFor2(field) {
      var found = oldFilters.filter(function(filter) {
        return filter.field === field;
      })[0];
      return found ? found.operator : null;
    };
    var serviceIndex = 0, index = -1;
    var filterCells = this.$props.columns.filter(function(c) {
      return c.children.length === 0;
    }).map(function(column) {
      var _this = this;
      var onChangeFn = function onChangeFn2(e) {
        _this.setFilter(e.value, e.operator, column.field, e);
      };
      var filterType = getFilterType(column.filter);
      var filterRender = h(FilterCell, {
        grid: this.$props.grid,
        attrs: this.v3 ? void 0 : {
          grid: this.$props.grid,
          field: column.field,
          size: this.$props.size,
          title: column.filterTitle,
          value: activeFilterValueFor(column.field, filterType === "text" ? "" : null),
          operator: activeOperatorFor(column.field),
          operators: operatorMap(this.$props.filterOperators[filterType] || [], intl2),
          booleanValues: operatorMap(booleanFilterValues, intl2),
          filterType,
          render: column.filterCell || this.$props.cellRender
        },
        field: column.field,
        size: this.$props.size,
        title: column.filterTitle,
        value: activeFilterValueFor(column.field, filterType === "text" ? "" : null),
        operator: activeOperatorFor(column.field),
        operators: operatorMap(this.$props.filterOperators[filterType] || [], intl2),
        booleanValues: operatorMap(booleanFilterValues, intl2),
        filterType,
        onChange: onChangeFn,
        on: this.v3 ? void 0 : {
          "change": onChangeFn
        },
        render: column.filterCell || this.$props.cellRender
      });
      var key = column.declarationIndex >= 0 ? ++index : --serviceIndex;
      var ariaAttrs = {
        ariaLabel: column.filterable ? intl2.toLanguageString(filterAriaLabel, messages[filterAriaLabel]) : void 0,
        ariaColumnIndex: column.ariaColumnIndex
      };
      var style = column.left !== void 0 ? !this.$props.isRtl ? {
        left: column.left + "px",
        right: column.right + "px"
      } : {
        left: column.right + "px",
        right: column.left + "px"
      } : {};
      var filterCell = (
        // @ts-ignore function children
        h(HeaderThElement, {
          key,
          columnId: tableKeyboardNavigationTools.getFilterColumnId(column.id),
          attrs: this.v3 ? void 0 : {
            columnId: tableKeyboardNavigationTools.getFilterColumnId(column.id),
            navigatable: column.navigatable,
            ariaLabel: ariaAttrs.ariaLabel,
            ariaColumnIndex: ariaAttrs.ariaColumnIndex
          },
          navigatable: column.navigatable,
          style,
          "class": this.headerCellClassName(column.field, column.locked) || void 0,
          ariaLabel: ariaAttrs.ariaLabel,
          ariaColumnIndex: ariaAttrs.ariaColumnIndex
        }, this.v3 ? function() {
          return [filterRender];
        } : [filterRender])
      );
      return column.filterable && filterCell || // @ts-ignore function children
      h(HeaderThElement, {
        key,
        columnId: tableKeyboardNavigationTools.getFilterColumnId(column.id),
        attrs: this.v3 ? void 0 : {
          columnId: tableKeyboardNavigationTools.getFilterColumnId(column.id),
          navigatable: column.navigatable,
          ariaLabel: ariaAttrs.ariaLabel,
          ariaColumnIndex: ariaAttrs.ariaColumnIndex
        },
        navigatable: column.navigatable,
        style,
        "class": this.headerCellClassName(column.field, column.locked) || void 0,
        ariaLabel: ariaAttrs.ariaLabel,
        ariaColumnIndex: ariaAttrs.ariaColumnIndex
      });
    }, this);
    return h("tr", {
      "class": "k-table-row k-filter-row",
      "aria-rowindex": this.ariaRowIndex,
      attrs: this.v3 ? void 0 : {
        "aria-rowindex": this.ariaRowIndex,
        role: "row"
      },
      role: "row"
    }, [filterCells]);
  }
};
var FilterRow = FilterRowVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/header/Header.js
var allVue31 = vue_runtime_esm_bundler_exports;
var gh31 = allVue31.h;
var isV331 = allVue31.version && allVue31.version[0] === "3";
var ref7 = allVue31.ref;
var HeaderVue22 = {
  name: "KendoHeader",
  props: {
    staticHeaders: Boolean,
    headerRow: Object,
    columnResize: Object,
    cols: Array,
    draggable: Boolean,
    size: String
  },
  data: function data7() {
    return {
      divStyle: {},
      element: null,
      headerWrap: null,
      table: null
    };
  },
  computed: {
    wrapperClass: function wrapperClass() {
      return {
        "k-grid-header": true,
        "k-grid-draggable-header": this.$props.draggable
      };
    },
    tableClass: function tableClass() {
      var _a11;
      var size = this.$props.size;
      return _a11 = {
        "k-table": true,
        "k-grid-header-table": true
      }, _a11["k-table-".concat(kendoThemeMaps.sizeMap[size] || size)] = size, _a11;
    }
  },
  mounted: function mounted6() {
    this.headerWrap = getRef(this, "headerWrap");
    this.table = getRef(this, "table");
    this.$props.columnResize.colGroupHeader = getRef(this, "colGroupHeader");
    var scrollbarWidth = new BrowserSupportService().scrollbarWidth;
    var rtl = isRtl(this.$el);
    if (this.$props.columnResize) {
      this.$props.columnResize.setIsRtl(rtl);
    }
    var padding = Math.max(0, scrollbarWidth) + "px";
    var right2 = rtl ? 0 : padding;
    var left2 = rtl ? padding : 0;
    this.divStyle = {
      padding: "0 ".concat(right2, " 0 ").concat(left2)
    };
  },
  methods: {
    setScrollLeft: function setScrollLeft(scrollLeft) {
      if (this.headerWrap) {
        this.headerWrap.scrollLeft = scrollLeft;
      }
    },
    setWidth: function setWidth(width) {
      if (this.table) {
        this.table.style.width = width + "px";
      }
    }
  },
  // @ts-ignore
  setup: !isV331 ? void 0 : function() {
    var v3 = !!isV331;
    var headerWrapRef = ref7(null);
    var tableRef = ref7(null);
    var colGroupHeaderRef = ref7(null);
    return {
      v3,
      headerWrapRef,
      tableRef,
      colGroupHeaderRef
    };
  },
  // @ts-ignore
  render: function render22(createElement) {
    var h = gh31 || createElement;
    if (!this.$props.staticHeaders) {
      return this.$props.headerRow;
    }
    return h("div", {
      "class": this.wrapperClass,
      style: this.divStyle,
      role: "presentation",
      attrs: this.v3 ? void 0 : {
        role: "presentation"
      }
    }, [h("div", {
      ref: setRef(this, "headerWrap"),
      "class": "k-grid-header-wrap",
      role: "presentation",
      attrs: this.v3 ? void 0 : {
        role: "presentation"
      }
    }, [h("table", {
      "class": this.tableClass,
      ref: setRef(this, "table"),
      role: "presentation",
      attrs: this.v3 ? void 0 : {
        role: "presentation"
      }
    }, [h("colgroup", {
      ref: setRef(this, "colGroupHeader")
    }, [this.$props.cols]), this.$props.headerRow])])]);
  }
};
var Header2 = HeaderVue22;

// node_modules/@progress/kendo-vue-data-tools/dist/es/header/HeaderCell.js
var allVue32 = vue_runtime_esm_bundler_exports;
var gh32 = allVue32.h;
var isV332 = allVue32.version && allVue32.version[0] === "3";
var HeaderCellVue2 = {
  name: "KendoHeaderCell",
  props: {
    field: String,
    title: String,
    sortable: [Boolean, Object],
    render: [Object, Function, String]
  },
  computed: {
    linkClass: function linkClass() {
      return {
        "k-link": true,
        "!k-cursor-default": !this.sortable
      };
    }
  },
  methods: {
    clickHandler: function clickHandler(event2) {
      if (this.sortable) {
        this.$emit("headercellclick", event2);
      }
    }
  },
  // @ts-ignore
  setup: !isV332 ? void 0 : function() {
    var v3 = !!isV332;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render23(createElement) {
    var h = gh32 || createElement;
    var defaultSlot = getDefaultSlots(this);
    var renderTemplate = this.$props.render;
    var textInCell = this.$props.title || this.$props.field || " ";
    var defaultRendering = getTemplate.call(this, {
      h,
      template: renderTemplate,
      defaultRendering: textInCell,
      additionalProps: this.$props,
      additionalListeners: {
        click: this.clickHandler
      }
    });
    return h("span", {
      "class": this.linkClass,
      onClick: this.clickHandler,
      on: this.v3 ? void 0 : {
        "click": this.clickHandler
      }
    }, [h("span", {
      "class": "k-column-title"
    }, [defaultRendering]), defaultSlot]);
  }
};
var HeaderCell = HeaderCellVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/interfaces/SortSettings.js
var __spreadArray5 = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var normalize3 = function() {
  var settings = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    settings[_i] = arguments[_i];
  }
  return Object.assign.apply(Object, __spreadArray5([{ allowUnsort: true, mode: "single" }], settings, false));
};

// node_modules/@progress/kendo-vue-data-tools/dist/es/drag/ColumnResizer.js
var allVue33 = vue_runtime_esm_bundler_exports;
var gh33 = allVue33.h;
var isV333 = allVue33.version && allVue33.version[0] === "3";
var ColumnResizerVue2 = {
  mounted: function mounted7() {
    if (this.$el) {
      this.draggable = this.$refs.draggable;
    }
  },
  methods: {
    drag: function drag(event2) {
      var element3 = this.draggable && this.draggable.element;
      if (element3) {
        this.$emit("resize", event2, element3, false);
      }
    },
    release: function release(event2) {
      var element3 = this.draggable && this.draggable.element;
      if (element3) {
        this.$emit("resize", event2, element3, true);
      }
    }
  },
  // @ts-ignore
  setup: !isV333 ? void 0 : function() {
    var v3 = !!isV333;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render24(createElement) {
    var _this = this;
    var h = gh33 || createElement;
    var resizeStyle = {
      // TODO: move to theme
      cursor: "col-resize",
      display: "block",
      height: "1000%",
      position: "absolute",
      // [this.props.isRtl ? 'left' : 'right']: 0,
      top: 0,
      width: ".5em"
    };
    return (
      // @ts-ignore  function children
      h(Draggable, {
        onDrag: this.drag,
        on: this.v3 ? void 0 : {
          "drag": this.drag,
          "release": this.release
        },
        onRelease: this.release,
        ref: "draggable"
      }, this.v3 ? function() {
        return [h("span", {
          "class": "k-column-resizer",
          draggable: false,
          attrs: _this.v3 ? void 0 : {
            draggable: false
          },
          style: resizeStyle
        })];
      } : [h("span", {
        "class": "k-column-resizer",
        draggable: false,
        attrs: _this.v3 ? void 0 : {
          draggable: false
        },
        style: resizeStyle
      })])
    );
  }
};
var ColumnResizer = ColumnResizerVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/drag/ColumnDraggable.js
var allVue34 = vue_runtime_esm_bundler_exports;
var gh34 = allVue34.h;
var isV334 = allVue34.version && allVue34.version[0] === "3";
var ColumnDraggableVue2 = {
  mounted: function mounted8() {
    if (this.$el) {
      this.draggable = this.$refs.draggable;
    }
  },
  methods: {
    onPress: function onPress(event2) {
      var element3 = this.draggable && this.draggable.element;
      if (element3) {
        this.$emit("pressHandler", event2, element3);
      }
    },
    onDrag: function onDrag(event2) {
      var element3 = this.draggable && this.draggable.element;
      if (element3) {
        this.$emit("dragHandler", event2, element3);
      }
    },
    onRelease: function onRelease(event2) {
      var element3 = this.draggable && this.draggable.element;
      if (element3) {
        this.$emit("releaseHandler", event2, element3);
      }
    }
  },
  // @ts-ignore
  setup: !isV334 ? void 0 : function() {
    var v3 = !!isV334;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render25(createElement) {
    var h = gh34 || createElement;
    var defaultSlot = getDefaultSlots(this);
    return (
      // @ts-ignore  function children
      h(Draggable, {
        onPress: this.onPress,
        on: this.v3 ? void 0 : {
          "press": this.onPress,
          "drag": this.onDrag,
          "release": this.onRelease
        },
        onDrag: this.onDrag,
        onRelease: this.onRelease,
        ref: "draggable"
      }, this.v3 ? function() {
        return [h("tr", {
          "class": "k-table-row"
        }, [defaultSlot])];
      } : [h("tr", {
        "class": "k-table-row"
      }, [defaultSlot])])
    );
  }
};
var ColumnDraggable = ColumnDraggableVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/columnmenu/ColumnMenuItem.js
var allVue35 = vue_runtime_esm_bundler_exports;
var gh35 = allVue35.h;
var isV335 = allVue35.version && allVue35.version[0] === "3";
var ColumnMenuItemVue2 = {
  props: {
    title: String,
    iconClass: String,
    icon: String,
    svgIcon: Object,
    selected: Boolean
  },
  methods: {
    onClick: function onClick(e) {
      this.$emit("menuitemclick", e);
    },
    onKeyDown: function onKeyDown2(event2) {
      if (event2.keyCode === Keys.enter) {
        this.$emit("menuitemclick", event2);
      }
    }
  },
  // @ts-ignore
  setup: !isV335 ? void 0 : function() {
    var v3 = !!isV335;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render26(createElement) {
    var h = gh35 || createElement;
    var _a11 = this.$props, title = _a11.title, iconClass = _a11.iconClass, selected = _a11.selected, icon = _a11.icon, svgIcon = _a11.svgIcon;
    return h("div", {
      tabindex: 0,
      attrs: this.v3 ? void 0 : {
        tabindex: 0
      },
      onKeydown: this.onKeyDown,
      on: this.v3 ? void 0 : {
        "keydown": this.onKeyDown,
        "click": this.onClick
      },
      onClick: this.onClick,
      "class": "k-columnmenu-item ".concat(selected ? "k-selected" : "")
    }, [iconClass && h(Icon, {
      "class": iconClass
    }), (icon || svgIcon) && h(Icon, {
      name: icon,
      attrs: this.v3 ? void 0 : {
        name: icon,
        icon: svgIcon
      },
      icon: svgIcon
    }), title]);
  }
};
var ColumnMenuItem = ColumnMenuItemVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/columnmenu/ColumnMenuItemGroup.js
var allVue36 = vue_runtime_esm_bundler_exports;
var gh36 = allVue36.h;
var isV336 = allVue36.version && allVue36.version[0] === "3";
var ColumnMenuItemGroupVue2 = {
  // @ts-ignore
  setup: !isV336 ? void 0 : function() {
    var v3 = !!isV336;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render27(createElement) {
    var h = gh36 || createElement;
    var defaultSlot = getDefaultSlots(this);
    return h("div", {
      "class": "k-columnmenu-item-wrapper"
    }, [defaultSlot]);
  }
};
var ColumnMenuItemGroup = ColumnMenuItemGroupVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/columnmenu/ColumnMenuSort.js
var allVue37 = vue_runtime_esm_bundler_exports;
var gh37 = allVue37.h;
var isV337 = allVue37.version && allVue37.version[0] === "3";
var inject17 = allVue37.inject;
var ASC_DIR = "asc";
var DESC_DIR = "desc";
var sortSeqMap = {
  true: {
    "asc": {
      "asc": "",
      "desc": "desc"
    },
    "desc": {
      "asc": "asc",
      "desc": ""
    },
    "": {
      "asc": "asc",
      "desc": "desc"
    }
  },
  false: {
    "asc": {
      "asc": "asc",
      "desc": "desc"
    },
    "desc": {
      "asc": "asc",
      "desc": "desc"
    },
    "": {
      "asc": "asc",
      "desc": "desc"
    }
  }
};
var sortIndex = function sortIndex2(field, sort) {
  if (!sort) {
    return -1;
  }
  return sort.findIndex(function(s) {
    return s.field === field;
  });
};
var sortedAsc = function sortedAsc2(sortedIndex, sort) {
  return !!(sort && sortedIndex > -1 && sort[sortedIndex].dir === ASC_DIR);
};
var sortedDesc = function sortedDesc2(sortedIndex, sort) {
  return !!(sort && sortedIndex > -1 && sort[sortedIndex].dir === DESC_DIR);
};
var ColumnMenuSortVue2 = {
  props: {
    sortable: [Boolean, Object],
    sort: {
      type: Array
    },
    column: Object,
    onSortchange: Function
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  methods: {
    onAscClick: function onAscClick(e) {
      this.onSort(e, ASC_DIR);
      this.$emit("closemenu");
    },
    onDescClick: function onDescClick(e) {
      this.onSort(e, DESC_DIR);
      this.$emit("closemenu");
    },
    onSort: function onSort(e, selectedDir) {
      e.preventDefault();
      if (!hasListener.call(this, "sortchange")) {
        return;
      }
      var _a11 = this.$props, column = _a11.column, sortable = _a11.sortable, sort = _a11.sort;
      var _b4 = normalize3(sortable || false, false), allowUnsort = _b4.allowUnsort, mode = _b4.mode;
      var oldDescriptor = (sort || []).filter(function(d) {
        return d.field === column.field;
      })[0];
      var dir = sortSeqMap[allowUnsort][oldDescriptor && oldDescriptor.dir || ""][selectedDir];
      var newDescriptor = mode === "single" ? [] : (this.$props.sort || []).filter(function(d) {
        return d.field !== column.field;
      });
      if (dir !== "" && column.field) {
        newDescriptor.push({
          field: column.field,
          dir
        });
      }
      this.$emit("sortchange", newDescriptor, {
        event: e,
        field: this.$props.column.field
      });
    }
  },
  // @ts-ignore
  setup: !isV337 ? void 0 : function() {
    var v3 = !!isV337;
    var kendoLocalizationService = inject17("kendoLocalizationService", {});
    return {
      v3,
      kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render28(createElement) {
    var _this = this;
    var h = gh37 || createElement;
    var _a11 = this.$props, sort = _a11.sort, column = _a11.column;
    var currentSortIndex = sortIndex(column.field, sort);
    var localizationService = provideLocalizationService(this);
    return (
      // @ts-ignore function children
      h(ColumnMenuItemGroup, this.v3 ? function() {
        return [
          // @ts-ignore
          h(ColumnMenuItem, {
            title: localizationService.toLanguageString(columnMenuSortAscending, messages[columnMenuSortAscending]),
            attrs: _this.v3 ? void 0 : {
              title: localizationService.toLanguageString(columnMenuSortAscending, messages[columnMenuSortAscending]),
              icon: "sort-asc-small",
              svgIcon: sortAscSmallIcon,
              selected: sortedAsc(currentSortIndex, sort)
            },
            icon: "sort-asc-small",
            svgIcon: sortAscSmallIcon,
            selected: sortedAsc(currentSortIndex, sort),
            onMenuitemclick: _this.onAscClick,
            on: _this.v3 ? void 0 : {
              "menuitemclick": _this.onAscClick
            }
          }),
          // @ts-ignore
          h(ColumnMenuItem, {
            title: localizationService.toLanguageString(columnMenuSortDescending, messages[columnMenuSortDescending]),
            attrs: _this.v3 ? void 0 : {
              title: localizationService.toLanguageString(columnMenuSortDescending, messages[columnMenuSortDescending]),
              icon: "sort-desc-small",
              svgIcon: sortDescSmallIcon,
              selected: sortedDesc(currentSortIndex, sort)
            },
            icon: "sort-desc-small",
            svgIcon: sortDescSmallIcon,
            selected: sortedDesc(currentSortIndex, sort),
            onMenuitemclick: _this.onDescClick,
            on: _this.v3 ? void 0 : {
              "menuitemclick": _this.onDescClick
            }
          })
        ];
      } : [h(ColumnMenuItem, {
        title: localizationService.toLanguageString(columnMenuSortAscending, messages[columnMenuSortAscending]),
        attrs: _this.v3 ? void 0 : {
          title: localizationService.toLanguageString(columnMenuSortAscending, messages[columnMenuSortAscending]),
          icon: "sort-asc-small",
          svgIcon: sortAscSmallIcon,
          selected: sortedAsc(currentSortIndex, sort)
        },
        icon: "sort-asc-small",
        svgIcon: sortAscSmallIcon,
        selected: sortedAsc(currentSortIndex, sort),
        onMenuitemclick: _this.onAscClick,
        on: _this.v3 ? void 0 : {
          "menuitemclick": _this.onAscClick
        }
      }), h(ColumnMenuItem, {
        title: localizationService.toLanguageString(columnMenuSortDescending, messages[columnMenuSortDescending]),
        attrs: _this.v3 ? void 0 : {
          title: localizationService.toLanguageString(columnMenuSortDescending, messages[columnMenuSortDescending]),
          icon: "sort-desc-small",
          svgIcon: sortDescSmallIcon,
          selected: sortedDesc(currentSortIndex, sort)
        },
        icon: "sort-desc-small",
        svgIcon: sortDescSmallIcon,
        selected: sortedDesc(currentSortIndex, sort),
        onMenuitemclick: _this.onDescClick,
        on: _this.v3 ? void 0 : {
          "menuitemclick": _this.onDescClick
        }
      })])
    );
  }
};
var ColumnMenuSort = ColumnMenuSortVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/columnmenu/ColumnMenuItemContent.js
var allVue38 = vue_runtime_esm_bundler_exports;
var gh38 = allVue38.h;
var isV338 = allVue38.version && allVue38.version[0] === "3";
var ColumnMenuItemContentVue2 = {
  props: {
    show: Boolean
  },
  // @ts-ignore
  setup: !isV338 ? void 0 : function() {
    var v3 = !!isV338;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render29(createElement) {
    var _this = this;
    var h = gh38 || createElement;
    var defaultSlot = getDefaultSlots(this);
    return h("div", {
      "class": "k-columnmenu-item-content"
    }, [
      // @ts-ignore function children
      h(Reveal, {
        appear: this.$props.show,
        attrs: this.v3 ? void 0 : {
          appear: this.$props.show
        },
        style: {
          position: "relative",
          display: "block"
        }
      }, this.v3 ? function() {
        return [_this.$props.show ? defaultSlot : null];
      } : [_this.$props.show ? defaultSlot : null])
    ]);
  }
};
var ColumnMenuItemContent = ColumnMenuItemContentVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/columnmenu/ColumnMenuFilterCell.js
var allVue39 = vue_runtime_esm_bundler_exports;
var gh39 = allVue39.h;
var isV339 = allVue39.version && allVue39.version[0] === "3";
var ColumnMenuFilterCellVue2 = {
  props: {
    field: String,
    filterType: String,
    value: [Object, String, Number, Date, Boolean],
    operator: String,
    operators: Array,
    booleanValues: Array
  },
  // @ts-ignore
  emits: {
    change: null,
    filtercellfocus: null
  },
  methods: {
    handleFocus: function handleFocus5(e) {
      this.$emit("filtercellfocus", e);
    },
    triggerChange: function triggerChange4(filter) {
      this.$emit("change", filter);
    },
    inputChange: function inputChange2(value2, e) {
      var filter = cellInputChange(value2, e, this.$props);
      this.triggerChange(filter);
    },
    boolDropdownChange: function boolDropdownChange2(value2, e) {
      var filter = cellBoolDropdownChange(value2.value.operator, e);
      this.triggerChange(filter);
    }
  },
  // @ts-ignore
  setup: !isV339 ? void 0 : function() {
    var v3 = !!isV339;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render30(createElement) {
    var _this = this;
    var h = gh39 || createElement;
    var _a11 = this.$props, filterType = _a11.filterType, value2 = _a11.value, booleanValues = _a11.booleanValues;
    switch (filterType) {
      case "numeric":
        return (
          // @ts-ignore
          h(NumericTextBox, {
            value: value2,
            attrs: this.v3 ? void 0 : {
              value: value2
            },
            onChange: function onChange6(e) {
              _this.inputChange(e.value, e.event);
            },
            on: this.v3 ? void 0 : {
              "change": function onChange6(e) {
                _this.inputChange(e.value, e.event);
              }
            }
          })
        );
      case "date":
        return (
          // @ts-ignore
          h(DatePicker, {
            value: value2,
            attrs: this.v3 ? void 0 : {
              value: value2
            },
            onFocus: this.handleFocus,
            on: this.v3 ? void 0 : {
              "focus": this.handleFocus,
              "change": function change(e) {
                _this.inputChange(e.value, e.event);
              }
            },
            onChange: function change(e) {
              _this.inputChange(e.value, e.event);
            }
          })
        );
      case "boolean":
        var noFilterSet_1 = function noFilterSet_12(filter) {
          return filter === null || filter === void 0;
        };
        return (
          // @ts-ignore
          h(DropDownList, {
            onChange: this.boolDropdownChange,
            on: this.v3 ? void 0 : {
              "change": this.boolDropdownChange
            },
            value: booleanValues.find(function(item) {
              return item.operator === (noFilterSet_1(value2) ? "" : value2);
            }),
            attrs: this.v3 ? void 0 : {
              value: booleanValues.find(function(item) {
                return item.operator === (noFilterSet_1(value2) ? "" : value2);
              }),
              "data-items": booleanValues,
              textField: "text"
            },
            "data-items": booleanValues,
            textField: "text"
          })
        );
      default:
        return h("span", {
          "class": "k-textbox k-input k-input-md k-rounded-md k-input-solid"
        }, [h("input", {
          "class": "k-input-inner",
          value: this.v3 ? value2 || "" : null,
          domProps: this.v3 ? void 0 : {
            "value": value2 || ""
          },
          onInput: function onInput(e) {
            _this.inputChange(e.target.value, e);
          },
          on: this.v3 ? void 0 : {
            "input": function onInput(e) {
              _this.inputChange(e.target.value, e);
            }
          }
        })]);
    }
  }
};
var ColumnMenuFilterCell = ColumnMenuFilterCellVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/columnmenu/ColumnMenuFilterOperators.js
var allVue40 = vue_runtime_esm_bundler_exports;
var gh40 = allVue40.h;
var isV340 = allVue40.version && allVue40.version[0] === "3";
var ColumnMenuFilterOperatorsVue2 = {
  props: {
    filterType: String,
    operator: String,
    operators: Array
  },
  // @ts-ignore
  emits: {
    change: null
  },
  methods: {
    triggerChange: function triggerChange5(filter) {
      this.$emit("change", filter);
    },
    operatorChange: function operatorChange2(operatorValue, e) {
      var filter = cellOperatorChange(operatorValue.value.operator, e, this.$props.value);
      this.triggerChange(filter);
    }
  },
  // @ts-ignore
  setup: !isV340 ? void 0 : function() {
    var v3 = !!isV340;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render31(createElement) {
    var _this = this;
    var h = gh40 || createElement;
    var ddlValue = this.$props.operators.find(function(item) {
      return item.operator === _this.$props.operator;
    }) || null;
    return this.$props.filterType !== "boolean" ? (
      // @ts-ignore
      h(DropDownList, {
        onChange: this.operatorChange,
        on: this.v3 ? void 0 : {
          "change": this.operatorChange
        },
        value: ddlValue,
        attrs: this.v3 ? void 0 : {
          value: ddlValue,
          "data-items": this.$props.operators,
          textField: "text"
        },
        "data-items": this.$props.operators,
        textField: "text"
      })
    ) : null;
  }
};
var ColumnMenuFilterOperators = ColumnMenuFilterOperatorsVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/columnmenu/ColumnMenuFilter.js
var __assign9 = function() {
  __assign9 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign9.apply(this, arguments);
};
var __spreadArray6 = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var allVue41 = vue_runtime_esm_bundler_exports;
var gh41 = allVue41.h;
var isV341 = allVue41.version && allVue41.version[0] === "3";
var inject18 = allVue41.inject;
var rootFilterOrDefault = function rootFilterOrDefault2(rootFilter) {
  return rootFilter || {
    filters: [],
    logic: "and"
  };
};
var filterGroupByField = function filterGroupByField2(field, filter) {
  var rootFilter = rootFilterOrDefault(filter);
  var compositeFilters = rootFilter.filters.filter(function(f) {
    if (isCompositeFilterDescriptor(f)) {
      return f.filters && f.filters.length && f.filters.length <= 2 && !f.filters.find(function(nf) {
        return isCompositeFilterDescriptor(nf) || nf.field !== field;
      });
    }
    return false;
  });
  return compositeFilters[0] || null;
};
var ColumnMenuFilterVue2 = {
  name: "KendoColumnMenuFilter",
  props: {
    column: Object,
    filter: Object,
    expanded: {
      type: Boolean,
      default: void 0
    },
    filterable: Boolean,
    filterOperators: {
      type: Object,
      default: function _default24() {
        return operators;
      }
    },
    hideSecondFilter: {
      type: [Boolean, Object],
      default: function _default25() {
        return void 0;
      }
    },
    filterUI: [String, Function, Object],
    onFilterchange: Function
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data8() {
    return {
      currentExpanded: false,
      filterGroup: null
    };
  },
  created: function created6() {
    var _this = this;
    var filterGroup;
    if (this.$props.column && this.$props.column.field) {
      var filterType = getFilterType(this.$props.column.filter);
      var defaultOperator = getDefaultOperator(this.$props.filterOperators, filterType);
      filterGroup = filterGroupByField(this.$props.column.field, this.$props.filter);
      filterGroup = filterGroup ? __assign9(__assign9({}, filterGroup), {
        filters: filterGroup.filters.map(function(f) {
          return __assign9({}, f);
        })
      }) : {
        logic: "and",
        filters: [{
          field: this.$props.column.field,
          operator: defaultOperator
        }, {
          field: this.$props.column.field,
          operator: defaultOperator
        }]
      };
      if (filterGroup.filters.filter(function(x) {
        return x.field === _this.$props.column.field;
      }).length === 1) {
        filterGroup.filters.splice(1, 0, {
          field: this.$props.column.field,
          operator: defaultOperator
        });
      }
    }
    this.currentExpanded = this.$props.expanded || false;
    this.filterGroup = filterGroup;
  },
  methods: {
    removeGroup: function removeGroup(group, rootFilter) {
      var filters = __spreadArray6([], rootFilter.filters, true);
      var groupIndex = filters.findIndex(function(f) {
        return f === group;
      });
      if (groupIndex > -1) {
        filters.splice(groupIndex, 1);
      }
      return __assign9(__assign9({}, rootFilter), {
        filters
      });
    },
    insertGroup: function insertGroup(group, rootFilter) {
      return __assign9(__assign9({}, rootFilter), {
        filters: __spreadArray6([group], rootFilter.filters, true)
      });
    },
    isControlled: function isControlled() {
      return this.$props.expanded !== void 0;
    },
    onFilterExpand: function onFilterExpand() {
      var isControlled2 = this.isControlled();
      var nextValue2 = !(isControlled2 ? this.$props.expanded : this.currentExpanded);
      this.$emit("expandchange", nextValue2);
      if (!isControlled2) {
        this.currentExpanded = nextValue2;
      }
    },
    filterChangeHandler: function filterChangeHandler(e, filterIndex) {
      this.filterChange(filterIndex || 0, e);
    },
    firstFilterChange: function firstFilterChange(e) {
      this.filterChange(0, e);
    },
    secondFilterChange: function secondFilterChange(e) {
      this.filterChange(1, e);
    },
    filterChange: function filterChange(filterIndex, e) {
      var filters = this.filterGroup.filters.map(function(f, i) {
        if (i === filterIndex) {
          return __assign9(__assign9({}, f), {
            value: e.value,
            operator: e.operator
          });
        }
        return f;
      });
      this.filterGroup = __assign9(__assign9({}, this.filterGroup), {
        filters
      });
    },
    logicChange: function logicChange(e) {
      this.filterGroup = __assign9(__assign9({}, this.filterGroup), {
        logic: e.target.value.operator
      });
    },
    clear: function clear2(e) {
      e.preventDefault();
      if (!hasListener.call(this, "filterchange")) {
        return;
      }
      var field = this.$props.column.field;
      var rootFilter = rootFilterOrDefault(this.$props.filter);
      var filterGroup = filterGroupByField(field, this.$props.filter);
      var rootFilters = rootFilter.filters.filter(function(f) {
        return f !== filterGroup;
      });
      if (!rootFilters.length) {
        this.$emit("filterchange", null, {
          event: e,
          field: this.$props.column.field
        });
      } else {
        this.$emit("filterchange", __assign9(__assign9({}, rootFilter), {
          filters: rootFilters
        }), {
          event: e,
          field: this.$props.column.field
        });
      }
      this.$emit("closemenu");
    },
    currentFilterGroup: function currentFilterGroup() {
      return __assign9(__assign9({}, this.filterGroup), {
        filters: this.filterGroup.filters.filter(function(nf) {
          return nf.value !== void 0 && nf.value !== null && nf.value !== "" || nf.value === null && nf.operator;
        })
      });
    },
    submit: function submit(e) {
      e.preventDefault();
      if (!hasListener.call(this, "filterchange")) {
        return;
      }
      var field = this.$props.column.field;
      var rootFilter = rootFilterOrDefault(this.$props.filter);
      var filterGroup = filterGroupByField(field, this.$props.filter);
      var currentFilterGroup2 = this.currentFilterGroup();
      var updatedFilter = null;
      if (filterGroup && currentFilterGroup2.filters.length > 0) {
        var rootFilters = rootFilter.filters.map(function(f) {
          if (f === filterGroup) {
            return currentFilterGroup2;
          }
          return f;
        });
        updatedFilter = __assign9(__assign9({}, rootFilter), {
          filters: rootFilters
        });
      } else if (currentFilterGroup2.filters.length === 0) {
        var rootFilters = rootFilter.filters.filter(function(f) {
          return f !== filterGroup;
        });
        if (rootFilters.length) {
          updatedFilter = __assign9(__assign9({}, rootFilter), {
            filters: rootFilters
          });
        }
      } else {
        updatedFilter = __assign9(__assign9({}, rootFilter), {
          filters: __spreadArray6(__spreadArray6([], rootFilter.filters, true), [currentFilterGroup2], false)
        });
      }
      this.$emit("filterchange", updatedFilter, {
        event: e,
        field: this.$props.column.field
      });
      this.$emit("closemenu");
    },
    handleFocus: function handleFocus6(e) {
      this.$emit("filterfocus", e);
    }
  },
  // @ts-ignore
  setup: !isV341 ? void 0 : function() {
    var v3 = !!isV341;
    var kendoLocalizationService = inject18("kendoLocalizationService", {});
    return {
      v3,
      kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render32(createElement) {
    var _this2 = this;
    var _this = this;
    var h = gh41 || createElement;
    var _a11 = this.$props, column = _a11.column, filterUI = _a11.filterUI, hideSecondFilter = _a11.hideSecondFilter, filterOperators = _a11.filterOperators;
    if (!column || !column.field) {
      return h("div");
    }
    var filterType = column.filter || "text";
    var currentHideSecondFilter = hideSecondFilter !== void 0 ? hideSecondFilter : defaultHideSecondFilter[filterType];
    var localizationService = provideLocalizationService(this);
    var filters = this.filterGroup.filters;
    var currentOperators = operatorMap(filterOperators[filterType], localizationService);
    var booleanValues = operatorMap(booleanFilterValues, localizationService);
    var firstFilterCellProps = {
      field: column.field,
      value: filters[0].value,
      operator: filters[0].operator,
      operators: currentOperators,
      booleanValues,
      filterType
    };
    var secondFilterCellProps = {
      field: column.field,
      value: filters[1].value,
      operator: filters[1].operator,
      operators: currentOperators,
      booleanValues,
      filterType
    };
    var filterLogic = this.filterGroup.logic;
    var logicData = operatorMap(filterLogicList, localizationService);
    var logicProps = {
      value: logicData.find(function(item) {
        return item.operator === (filterLogic === null ? "" : filterLogic);
      }),
      data: logicData
    };
    var isFilterValid = this.currentFilterGroup().filters.length !== 0;
    var expandState = this.isControlled() ? this.$props.expanded : this.currentExpanded;
    var firstField = firstFilterCellProps.field, firstValue = firstFilterCellProps.value, firstOperator = firstFilterCellProps.operator, firstBooleanValues = firstFilterCellProps.booleanValues, firstFilterType = firstFilterCellProps.filterType, secondField = secondFilterCellProps.field, secondValue = secondFilterCellProps.value, secondOperator = secondFilterCellProps.operator, secondBooleanValues = secondFilterCellProps.booleanValues, secondFilterType = secondFilterCellProps.filterType;
    var filterUIRender = filterUI && templateRendering.call(this, filterUI, getListeners.call(this));
    var render47 = getTemplate.call(this, {
      h,
      template: filterUIRender,
      defaultRendering: void 0,
      additionalProps: this.$props,
      additionalListeners: {
        change: this.filterChangeHandler,
        logicchange: this.logicChange
      }
    });
    return (
      // @ts-ignore function children
      h(ColumnMenuItemGroup, this.v3 ? function() {
        return [
          // @ts-ignore
          h(ColumnMenuItem, {
            title: localizationService.toLanguageString(columnMenuFilterTitle, messages[columnMenuFilterTitle]),
            attrs: _this2.v3 ? void 0 : {
              title: localizationService.toLanguageString(columnMenuFilterTitle, messages[columnMenuFilterTitle]),
              icon: "filter",
              svgIcon: filterIcon
            },
            icon: "filter",
            svgIcon: filterIcon,
            onMenuitemclick: _this2.onFilterExpand,
            on: _this2.v3 ? void 0 : {
              "menuitemclick": _this2.onFilterExpand
            }
          }),
          // @ts-ignore function children
          h(ColumnMenuItemContent, {
            show: !!expandState,
            attrs: _this2.v3 ? void 0 : {
              show: !!expandState
            }
          }, _this2.v3 ? function() {
            return [h("div", {
              "class": "kendo-grid-filter-menu-container"
            }, [h("form", {
              "class": "k-filter-menu k-border-up",
              onSubmit: _this2.submit,
              on: _this2.v3 ? void 0 : {
                "submit": _this2.submit,
                "reset": _this2.clear
              },
              onReset: _this2.clear
            }, [h("div", {
              "class": "k-filter-menu-container"
            }, [
              // @ts-ignore
              !filterUI && [h(ColumnMenuFilterOperators, {
                operator: firstOperator,
                attrs: _this2.v3 ? void 0 : {
                  operator: firstOperator,
                  filterType: firstFilterType,
                  operators: currentOperators
                },
                filterType: firstFilterType,
                onChange: function onChange6(e) {
                  _this.filterChangeHandler(e, 0);
                },
                on: _this2.v3 ? void 0 : {
                  "change": function onChange6(e) {
                    _this.filterChangeHandler(e, 0);
                  }
                },
                operators: currentOperators
              }), h(ColumnMenuFilterCell, {
                field: firstField,
                attrs: _this2.v3 ? void 0 : {
                  field: firstField,
                  value: firstValue,
                  operator: firstOperator,
                  booleanValues: firstBooleanValues,
                  filterType: firstFilterType,
                  operators: currentOperators
                },
                value: firstValue,
                operator: firstOperator,
                booleanValues: firstBooleanValues,
                filterType: firstFilterType,
                onFiltercellfocus: _this2.handleFocus,
                on: _this2.v3 ? void 0 : {
                  "filtercellfocus": _this2.handleFocus,
                  "change": function change(e) {
                    _this.filterChangeHandler(e, 0);
                  }
                },
                onChange: function change(e) {
                  _this.filterChangeHandler(e, 0);
                },
                operators: currentOperators
              })],
              !hideSecondFilter && !filterUI && [
                // @ts-ignore
                h(DropDownList, {
                  onChange: _this2.logicChange,
                  on: _this2.v3 ? void 0 : {
                    "change": _this2.logicChange
                  },
                  "class": "k-filter-and",
                  "data-items": logicProps.data,
                  attrs: _this2.v3 ? void 0 : {
                    "data-items": logicProps.data,
                    value: logicProps.value,
                    textField: "text"
                  },
                  value: logicProps.value,
                  textField: "text"
                }),
                // @ts-ignore
                h(ColumnMenuFilterOperators, {
                  operator: secondOperator,
                  attrs: _this2.v3 ? void 0 : {
                    operator: secondOperator,
                    filterType: secondFilterType,
                    operators: currentOperators
                  },
                  filterType: secondFilterType,
                  onChange: function onChange6(e) {
                    _this.filterChangeHandler(e, 1);
                  },
                  on: _this2.v3 ? void 0 : {
                    "change": function onChange6(e) {
                      _this.filterChangeHandler(e, 1);
                    }
                  },
                  operators: currentOperators
                }),
                // @ts-ignore
                h(ColumnMenuFilterCell, {
                  field: secondField,
                  attrs: _this2.v3 ? void 0 : {
                    field: secondField,
                    value: secondValue,
                    operator: secondOperator,
                    booleanValues: secondBooleanValues,
                    filterType: secondFilterType,
                    operators: currentOperators
                  },
                  value: secondValue,
                  operator: secondOperator,
                  booleanValues: secondBooleanValues,
                  filterType: secondFilterType,
                  onFiltercellfocus: _this2.handleFocus,
                  on: _this2.v3 ? void 0 : {
                    "filtercellfocus": _this2.handleFocus,
                    "change": function change(e) {
                      _this.filterChangeHandler(e, 1);
                    }
                  },
                  onChange: function change(e) {
                    _this.filterChangeHandler(e, 1);
                  },
                  operators: currentOperators
                })
              ],
              filterUI && render47,
              h("div", {
                "class": "k-columnmenu-actions"
              }, [
                // @ts-ignore function children
                h(Button, {
                  type: "reset",
                  attrs: _this2.v3 ? void 0 : {
                    type: "reset"
                  }
                }, _this2.v3 ? function() {
                  return [localizationService.toLanguageString(columnMenuFilterClearButton, messages[columnMenuFilterClearButton])];
                } : [localizationService.toLanguageString(columnMenuFilterClearButton, messages[columnMenuFilterClearButton])]),
                // @ts-ignore function children
                h(Button, {
                  themeColor: "primary",
                  attrs: _this2.v3 ? void 0 : {
                    themeColor: "primary",
                    disabled: !isFilterValid
                  },
                  disabled: !isFilterValid
                }, _this2.v3 ? function() {
                  return [localizationService.toLanguageString(columnMenuFilterSubmitButton, messages[columnMenuFilterSubmitButton])];
                } : [localizationService.toLanguageString(columnMenuFilterSubmitButton, messages[columnMenuFilterSubmitButton])])
              ])
            ])])])];
          } : [h("div", {
            "class": "kendo-grid-filter-menu-container"
          }, [h("form", {
            "class": "k-filter-menu k-border-up",
            onSubmit: _this2.submit,
            on: _this2.v3 ? void 0 : {
              "submit": _this2.submit,
              "reset": _this2.clear
            },
            onReset: _this2.clear
          }, [h("div", {
            "class": "k-filter-menu-container"
          }, [!filterUI && [h(ColumnMenuFilterOperators, {
            operator: firstOperator,
            attrs: _this2.v3 ? void 0 : {
              operator: firstOperator,
              filterType: firstFilterType,
              operators: currentOperators
            },
            filterType: firstFilterType,
            onChange: function onChange6(e) {
              _this.filterChangeHandler(e, 0);
            },
            on: _this2.v3 ? void 0 : {
              "change": function onChange6(e) {
                _this.filterChangeHandler(e, 0);
              }
            },
            operators: currentOperators
          }), h(ColumnMenuFilterCell, {
            field: firstField,
            attrs: _this2.v3 ? void 0 : {
              field: firstField,
              value: firstValue,
              operator: firstOperator,
              booleanValues: firstBooleanValues,
              filterType: firstFilterType,
              operators: currentOperators
            },
            value: firstValue,
            operator: firstOperator,
            booleanValues: firstBooleanValues,
            filterType: firstFilterType,
            onFiltercellfocus: _this2.handleFocus,
            on: _this2.v3 ? void 0 : {
              "filtercellfocus": _this2.handleFocus,
              "change": function change(e) {
                _this.filterChangeHandler(e, 0);
              }
            },
            onChange: function change(e) {
              _this.filterChangeHandler(e, 0);
            },
            operators: currentOperators
          })], !hideSecondFilter && !filterUI && [h(DropDownList, {
            onChange: _this2.logicChange,
            on: _this2.v3 ? void 0 : {
              "change": _this2.logicChange
            },
            "class": "k-filter-and",
            "data-items": logicProps.data,
            attrs: _this2.v3 ? void 0 : {
              "data-items": logicProps.data,
              value: logicProps.value,
              textField: "text"
            },
            value: logicProps.value,
            textField: "text"
          }), h(ColumnMenuFilterOperators, {
            operator: secondOperator,
            attrs: _this2.v3 ? void 0 : {
              operator: secondOperator,
              filterType: secondFilterType,
              operators: currentOperators
            },
            filterType: secondFilterType,
            onChange: function onChange6(e) {
              _this.filterChangeHandler(e, 1);
            },
            on: _this2.v3 ? void 0 : {
              "change": function onChange6(e) {
                _this.filterChangeHandler(e, 1);
              }
            },
            operators: currentOperators
          }), h(ColumnMenuFilterCell, {
            field: secondField,
            attrs: _this2.v3 ? void 0 : {
              field: secondField,
              value: secondValue,
              operator: secondOperator,
              booleanValues: secondBooleanValues,
              filterType: secondFilterType,
              operators: currentOperators
            },
            value: secondValue,
            operator: secondOperator,
            booleanValues: secondBooleanValues,
            filterType: secondFilterType,
            onFiltercellfocus: _this2.handleFocus,
            on: _this2.v3 ? void 0 : {
              "filtercellfocus": _this2.handleFocus,
              "change": function change(e) {
                _this.filterChangeHandler(e, 1);
              }
            },
            onChange: function change(e) {
              _this.filterChangeHandler(e, 1);
            },
            operators: currentOperators
          })], filterUI && render47, h("div", {
            "class": "k-columnmenu-actions"
          }, [h(Button, {
            type: "reset",
            attrs: _this2.v3 ? void 0 : {
              type: "reset"
            }
          }, _this2.v3 ? function() {
            return [localizationService.toLanguageString(columnMenuFilterClearButton, messages[columnMenuFilterClearButton])];
          } : [localizationService.toLanguageString(columnMenuFilterClearButton, messages[columnMenuFilterClearButton])]), h(Button, {
            themeColor: "primary",
            attrs: _this2.v3 ? void 0 : {
              themeColor: "primary",
              disabled: !isFilterValid
            },
            disabled: !isFilterValid
          }, _this2.v3 ? function() {
            return [localizationService.toLanguageString(columnMenuFilterSubmitButton, messages[columnMenuFilterSubmitButton])];
          } : [localizationService.toLanguageString(columnMenuFilterSubmitButton, messages[columnMenuFilterSubmitButton])])])])])])])
        ];
      } : [h(ColumnMenuItem, {
        title: localizationService.toLanguageString(columnMenuFilterTitle, messages[columnMenuFilterTitle]),
        attrs: _this2.v3 ? void 0 : {
          title: localizationService.toLanguageString(columnMenuFilterTitle, messages[columnMenuFilterTitle]),
          icon: "filter",
          svgIcon: filterIcon
        },
        icon: "filter",
        svgIcon: filterIcon,
        onMenuitemclick: _this2.onFilterExpand,
        on: _this2.v3 ? void 0 : {
          "menuitemclick": _this2.onFilterExpand
        }
      }), h(ColumnMenuItemContent, {
        show: !!expandState,
        attrs: _this2.v3 ? void 0 : {
          show: !!expandState
        }
      }, _this2.v3 ? function() {
        return [h("div", {
          "class": "kendo-grid-filter-menu-container"
        }, [h("form", {
          "class": "k-filter-menu k-border-up",
          onSubmit: _this2.submit,
          on: _this2.v3 ? void 0 : {
            "submit": _this2.submit,
            "reset": _this2.clear
          },
          onReset: _this2.clear
        }, [h("div", {
          "class": "k-filter-menu-container"
        }, [!filterUI && [h(ColumnMenuFilterOperators, {
          operator: firstOperator,
          attrs: _this2.v3 ? void 0 : {
            operator: firstOperator,
            filterType: firstFilterType,
            operators: currentOperators
          },
          filterType: firstFilterType,
          onChange: function onChange6(e) {
            _this.filterChangeHandler(e, 0);
          },
          on: _this2.v3 ? void 0 : {
            "change": function onChange6(e) {
              _this.filterChangeHandler(e, 0);
            }
          },
          operators: currentOperators
        }), h(ColumnMenuFilterCell, {
          field: firstField,
          attrs: _this2.v3 ? void 0 : {
            field: firstField,
            value: firstValue,
            operator: firstOperator,
            booleanValues: firstBooleanValues,
            filterType: firstFilterType,
            operators: currentOperators
          },
          value: firstValue,
          operator: firstOperator,
          booleanValues: firstBooleanValues,
          filterType: firstFilterType,
          onFiltercellfocus: _this2.handleFocus,
          on: _this2.v3 ? void 0 : {
            "filtercellfocus": _this2.handleFocus,
            "change": function change(e) {
              _this.filterChangeHandler(e, 0);
            }
          },
          onChange: function change(e) {
            _this.filterChangeHandler(e, 0);
          },
          operators: currentOperators
        })], !hideSecondFilter && !filterUI && [h(DropDownList, {
          onChange: _this2.logicChange,
          on: _this2.v3 ? void 0 : {
            "change": _this2.logicChange
          },
          "class": "k-filter-and",
          "data-items": logicProps.data,
          attrs: _this2.v3 ? void 0 : {
            "data-items": logicProps.data,
            value: logicProps.value,
            textField: "text"
          },
          value: logicProps.value,
          textField: "text"
        }), h(ColumnMenuFilterOperators, {
          operator: secondOperator,
          attrs: _this2.v3 ? void 0 : {
            operator: secondOperator,
            filterType: secondFilterType,
            operators: currentOperators
          },
          filterType: secondFilterType,
          onChange: function onChange6(e) {
            _this.filterChangeHandler(e, 1);
          },
          on: _this2.v3 ? void 0 : {
            "change": function onChange6(e) {
              _this.filterChangeHandler(e, 1);
            }
          },
          operators: currentOperators
        }), h(ColumnMenuFilterCell, {
          field: secondField,
          attrs: _this2.v3 ? void 0 : {
            field: secondField,
            value: secondValue,
            operator: secondOperator,
            booleanValues: secondBooleanValues,
            filterType: secondFilterType,
            operators: currentOperators
          },
          value: secondValue,
          operator: secondOperator,
          booleanValues: secondBooleanValues,
          filterType: secondFilterType,
          onFiltercellfocus: _this2.handleFocus,
          on: _this2.v3 ? void 0 : {
            "filtercellfocus": _this2.handleFocus,
            "change": function change(e) {
              _this.filterChangeHandler(e, 1);
            }
          },
          onChange: function change(e) {
            _this.filterChangeHandler(e, 1);
          },
          operators: currentOperators
        })], filterUI && render47, h("div", {
          "class": "k-columnmenu-actions"
        }, [h(Button, {
          type: "reset",
          attrs: _this2.v3 ? void 0 : {
            type: "reset"
          }
        }, _this2.v3 ? function() {
          return [localizationService.toLanguageString(columnMenuFilterClearButton, messages[columnMenuFilterClearButton])];
        } : [localizationService.toLanguageString(columnMenuFilterClearButton, messages[columnMenuFilterClearButton])]), h(Button, {
          themeColor: "primary",
          attrs: _this2.v3 ? void 0 : {
            themeColor: "primary",
            disabled: !isFilterValid
          },
          disabled: !isFilterValid
        }, _this2.v3 ? function() {
          return [localizationService.toLanguageString(columnMenuFilterSubmitButton, messages[columnMenuFilterSubmitButton])];
        } : [localizationService.toLanguageString(columnMenuFilterSubmitButton, messages[columnMenuFilterSubmitButton])])])])])])];
      } : [h("div", {
        "class": "kendo-grid-filter-menu-container"
      }, [h("form", {
        "class": "k-filter-menu k-border-up",
        onSubmit: _this2.submit,
        on: _this2.v3 ? void 0 : {
          "submit": _this2.submit,
          "reset": _this2.clear
        },
        onReset: _this2.clear
      }, [h("div", {
        "class": "k-filter-menu-container"
      }, [!filterUI && [h(ColumnMenuFilterOperators, {
        operator: firstOperator,
        attrs: _this2.v3 ? void 0 : {
          operator: firstOperator,
          filterType: firstFilterType,
          operators: currentOperators
        },
        filterType: firstFilterType,
        onChange: function onChange6(e) {
          _this.filterChangeHandler(e, 0);
        },
        on: _this2.v3 ? void 0 : {
          "change": function onChange6(e) {
            _this.filterChangeHandler(e, 0);
          }
        },
        operators: currentOperators
      }), h(ColumnMenuFilterCell, {
        field: firstField,
        attrs: _this2.v3 ? void 0 : {
          field: firstField,
          value: firstValue,
          operator: firstOperator,
          booleanValues: firstBooleanValues,
          filterType: firstFilterType,
          operators: currentOperators
        },
        value: firstValue,
        operator: firstOperator,
        booleanValues: firstBooleanValues,
        filterType: firstFilterType,
        onFiltercellfocus: _this2.handleFocus,
        on: _this2.v3 ? void 0 : {
          "filtercellfocus": _this2.handleFocus,
          "change": function change(e) {
            _this.filterChangeHandler(e, 0);
          }
        },
        onChange: function change(e) {
          _this.filterChangeHandler(e, 0);
        },
        operators: currentOperators
      })], !hideSecondFilter && !filterUI && [h(DropDownList, {
        onChange: _this2.logicChange,
        on: _this2.v3 ? void 0 : {
          "change": _this2.logicChange
        },
        "class": "k-filter-and",
        "data-items": logicProps.data,
        attrs: _this2.v3 ? void 0 : {
          "data-items": logicProps.data,
          value: logicProps.value,
          textField: "text"
        },
        value: logicProps.value,
        textField: "text"
      }), h(ColumnMenuFilterOperators, {
        operator: secondOperator,
        attrs: _this2.v3 ? void 0 : {
          operator: secondOperator,
          filterType: secondFilterType,
          operators: currentOperators
        },
        filterType: secondFilterType,
        onChange: function onChange6(e) {
          _this.filterChangeHandler(e, 1);
        },
        on: _this2.v3 ? void 0 : {
          "change": function onChange6(e) {
            _this.filterChangeHandler(e, 1);
          }
        },
        operators: currentOperators
      }), h(ColumnMenuFilterCell, {
        field: secondField,
        attrs: _this2.v3 ? void 0 : {
          field: secondField,
          value: secondValue,
          operator: secondOperator,
          booleanValues: secondBooleanValues,
          filterType: secondFilterType,
          operators: currentOperators
        },
        value: secondValue,
        operator: secondOperator,
        booleanValues: secondBooleanValues,
        filterType: secondFilterType,
        onFiltercellfocus: _this2.handleFocus,
        on: _this2.v3 ? void 0 : {
          "filtercellfocus": _this2.handleFocus,
          "change": function change(e) {
            _this.filterChangeHandler(e, 1);
          }
        },
        onChange: function change(e) {
          _this.filterChangeHandler(e, 1);
        },
        operators: currentOperators
      })], filterUI && render47, h("div", {
        "class": "k-columnmenu-actions"
      }, [h(Button, {
        type: "reset",
        attrs: _this2.v3 ? void 0 : {
          type: "reset"
        }
      }, _this2.v3 ? function() {
        return [localizationService.toLanguageString(columnMenuFilterClearButton, messages[columnMenuFilterClearButton])];
      } : [localizationService.toLanguageString(columnMenuFilterClearButton, messages[columnMenuFilterClearButton])]), h(Button, {
        themeColor: "primary",
        attrs: _this2.v3 ? void 0 : {
          themeColor: "primary",
          disabled: !isFilterValid
        },
        disabled: !isFilterValid
      }, _this2.v3 ? function() {
        return [localizationService.toLanguageString(columnMenuFilterSubmitButton, messages[columnMenuFilterSubmitButton])];
      } : [localizationService.toLanguageString(columnMenuFilterSubmitButton, messages[columnMenuFilterSubmitButton])])])])])])])])
    );
  }
};
var ColumnMenuFilter = ColumnMenuFilterVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/columnmenu/ColumnMenuContent.js
var allVue42 = vue_runtime_esm_bundler_exports;
var gh42 = allVue42.h;
var isV342 = allVue42.version && allVue42.version[0] === "3";
var ColumnMenuContentVue2 = {
  name: "KendoColumnMenuContent",
  inheritAttrs: false,
  props: {
    column: Object,
    sortable: [Boolean, Object],
    sort: {
      type: Array
    },
    filter: Object,
    filterOperators: Object,
    filterable: Boolean,
    render: [Boolean, String, Function, Object]
  },
  methods: {
    handleFocus: function handleFocus7(e) {
      this.$emit("contentfocus", e);
    },
    closeMenu: function closeMenu() {
      this.$emit("closemenu");
    },
    expandChange: function expandChange() {
      this.$emit("expandchange");
    },
    sortChange: function sortChange(newDescriptor, e) {
      this.$emit("sortchange", newDescriptor, e);
    },
    filterChange: function filterChange2(newDescriptor, e) {
      this.$emit("filterchange", newDescriptor, e);
    },
    contentKeyDown: function contentKeyDown(event2) {
      if (event2.keyCode === Keys.esc) {
        this.$emit("closemenu");
      }
    }
  },
  // @ts-ignore
  setup: !isV342 ? void 0 : function() {
    var v3 = !!isV342;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render33(createElement) {
    var h = gh42 || createElement;
    var renderTemplate = this.$props.render;
    var defaultRendering = h("div", {
      onKeydown: this.contentKeyDown,
      on: this.v3 ? void 0 : {
        "keydown": this.contentKeyDown
      },
      style: this.$attrs.style
    }, [
      // @ts-ignore
      h(ColumnMenuSort, {
        column: this.$props.column,
        attrs: this.v3 ? void 0 : {
          column: this.$props.column,
          sortable: this.$props.sortable,
          sort: this.$props.sort
        },
        sortable: this.$props.sortable,
        sort: this.$props.sort,
        onClosemenu: this.closeMenu,
        on: this.v3 ? void 0 : {
          "closemenu": this.closeMenu,
          "sortchange": this.sortChange
        },
        onSortchange: this.sortChange
      }),
      // @ts-ignore
      h(ColumnMenuFilter, {
        column: this.$props.column,
        attrs: this.v3 ? void 0 : {
          column: this.$props.column,
          filterable: this.$props.filterable,
          filter: this.$props.filter,
          filterOperators: this.$props.filterOperators
        },
        filterable: this.$props.filterable,
        filter: this.$props.filter,
        filterOperators: this.$props.filterOperators,
        onFilterfocus: this.handleFocus,
        on: this.v3 ? void 0 : {
          "filterfocus": this.handleFocus,
          "closemenu": this.closeMenu,
          "expandchange": this.expandChange,
          "filterchange": this.filterChange
        },
        onClosemenu: this.closeMenu,
        onExpandchange: this.expandChange,
        onFilterchange: this.filterChange
      })
    ]);
    return getTemplate.call(this, {
      h,
      template: typeof renderTemplate !== "boolean" && renderTemplate,
      defaultRendering,
      additionalProps: this.$props,
      additionalListeners: {
        closemenu: this.closeMenu,
        filterchange: this.filterChange,
        sortchange: this.sortChange,
        expandchange: this.expandChange,
        contentfocus: this.handleFocus
      }
    });
  }
};
var ColumnMenuContent = ColumnMenuContentVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/columnmenu/ColumnMenu.js
var allVue43 = vue_runtime_esm_bundler_exports;
var gh43 = allVue43.h;
var isV343 = allVue43.version && allVue43.version[0] === "3";
var inject19 = allVue43.inject;
var ColumnMenuVue2 = {
  name: "KendoColumnMenu",
  props: {
    animate: {
      type: [Boolean, Object],
      default: function _default26() {
        return true;
      }
    },
    column: Object,
    sortable: [Boolean, Object],
    sort: {
      type: Array
    },
    opened: Boolean,
    filter: Object,
    filterable: Boolean,
    filterOperators: Object,
    render: [Boolean, String, Function, Object]
  },
  inject: {
    kendoIntlService: {
      default: null
    },
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data9() {
    return {
      show: false,
      blurTimeout: void 0
    };
  },
  created: function created7() {
    this._anchor = guid();
  },
  computed: {
    currentOpen: function currentOpen() {
      return this.show || this.$props.opened;
    }
  },
  watch: {
    currentOpen: function currentOpen2(newOpened) {
      this.$nextTick(function() {
        this._content = this.$refs.content;
        if (newOpened && this._content) {
          var focusableElements = tableKeyboardNavigationTools.getFocusableElements(this._content, {
            focusable: true
          });
          if (focusableElements.length) {
            focusableElements[0].focus();
          } else {
            this._content.focus();
          }
        }
      });
    }
  },
  methods: {
    blur: function blur() {
      var _this = this;
      clearTimeout(this.blurTimeout);
      this.blurTimeout = setTimeout(function() {
        _this.closeMenu();
      }, 200);
    },
    focus: function focus4() {
      clearTimeout(this.blurTimeout);
    },
    handleFocus: function handleFocus8(_) {
      clearTimeout(this.blurTimeout);
    },
    anchorClick: function anchorClick(e) {
      e.preventDefault();
      this.show = !this.show;
    },
    closeMenu: function closeMenu2() {
      this.$emit("close");
      this.show = false;
    },
    sortChange: function sortChange2(newDescriptor, e) {
      this.$emit("sortchange", newDescriptor, e);
    },
    filterChange: function filterChange3(newDescriptor, e) {
      this.$emit("filterchange", newDescriptor, e);
    }
  },
  // @ts-ignore
  setup: !isV343 ? void 0 : function() {
    var v3 = !!isV343;
    var kendoLocalizationService = inject19("kendoLocalizationService", {});
    return {
      v3,
      kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render34(createElement) {
    var _this2 = this;
    var h = gh43 || createElement;
    var renderTemplate = this.$props.render;
    var ls = provideLocalizationService(this);
    return h("div", {
      style: {
        display: "inline"
      }
    }, [
      h("div", {
        "class": "k-grid-column-menu k-grid-filter",
        tabindex: 0,
        attrs: this.v3 ? void 0 : {
          tabindex: 0,
          title: "".concat(this.$props.column.field, " ").concat(ls.toLanguageString(columnMenu, messages[columnMenu]))
        },
        title: "".concat(this.$props.column.field, " ").concat(ls.toLanguageString(columnMenu, messages[columnMenu])),
        ref: setRef(this, "kendoAnchor", this._anchor),
        onClick: this.anchorClick,
        on: this.v3 ? void 0 : {
          "click": this.anchorClick
        }
      }, [h(Icon, {
        name: "more-vertical",
        attrs: this.v3 ? void 0 : {
          name: "more-vertical",
          icon: moreVerticalIcon
        },
        icon: moreVerticalIcon
      })]),
      // @ts-ignore function children
      h(Popup, {
        animate: this.$props.animate,
        attrs: this.v3 ? void 0 : {
          animate: this.$props.animate,
          anchor: this._anchor,
          show: this.currentOpen
        },
        anchor: this._anchor,
        show: this.currentOpen
      }, this.v3 ? function() {
        return [h("div", {
          ref: "content",
          "class": "k-column-menu k-grid-columnmenu-popup",
          tabindex: 0,
          attrs: _this2.v3 ? void 0 : {
            tabindex: 0
          },
          onFocusout: _this2.blur,
          on: _this2.v3 ? void 0 : {
            "focusout": _this2.blur,
            "focusin": _this2.focus
          },
          onFocusin: _this2.focus,
          style: {
            outline: "none",
            width: "230px"
          }
        }, [
          // @ts-ignore
          h(ColumnMenuContent, {
            column: _this2.$props.column,
            attrs: _this2.v3 ? void 0 : {
              column: _this2.$props.column,
              sortable: _this2.$props.sortable,
              sort: _this2.$props.sort,
              filter: _this2.$props.filter,
              filterable: _this2.$props.filterable,
              filterOperators: _this2.$props.filterOperators,
              render: renderTemplate
            },
            sortable: _this2.$props.sortable,
            sort: _this2.$props.sort,
            filter: _this2.$props.filter,
            filterable: _this2.$props.filterable,
            filterOperators: _this2.$props.filterOperators,
            render: renderTemplate,
            onContentfocus: _this2.handleFocus,
            on: _this2.v3 ? void 0 : {
              "contentfocus": _this2.handleFocus,
              "closemenu": _this2.closeMenu,
              "sortchange": _this2.sortChange,
              "filterchange": _this2.filterChange
            },
            onClosemenu: _this2.closeMenu,
            onSortchange: _this2.sortChange,
            onFilterchange: _this2.filterChange
          })
        ])];
      } : [h("div", {
        ref: "content",
        "class": "k-column-menu k-grid-columnmenu-popup",
        tabindex: 0,
        attrs: _this2.v3 ? void 0 : {
          tabindex: 0
        },
        onFocusout: _this2.blur,
        on: _this2.v3 ? void 0 : {
          "focusout": _this2.blur,
          "focusin": _this2.focus
        },
        onFocusin: _this2.focus,
        style: {
          outline: "none",
          width: "230px"
        }
      }, [h(ColumnMenuContent, {
        column: _this2.$props.column,
        attrs: _this2.v3 ? void 0 : {
          column: _this2.$props.column,
          sortable: _this2.$props.sortable,
          sort: _this2.$props.sort,
          filter: _this2.$props.filter,
          filterable: _this2.$props.filterable,
          filterOperators: _this2.$props.filterOperators,
          render: renderTemplate
        },
        sortable: _this2.$props.sortable,
        sort: _this2.$props.sort,
        filter: _this2.$props.filter,
        filterable: _this2.$props.filterable,
        filterOperators: _this2.$props.filterOperators,
        render: renderTemplate,
        onContentfocus: _this2.handleFocus,
        on: _this2.v3 ? void 0 : {
          "contentfocus": _this2.handleFocus,
          "closemenu": _this2.closeMenu,
          "sortchange": _this2.sortChange,
          "filterchange": _this2.filterChange
        },
        onClosemenu: _this2.closeMenu,
        onSortchange: _this2.sortChange,
        onFilterchange: _this2.filterChange
      })])])
    ]);
  }
};
var ColumnMenu = ColumnMenuVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/header/HeaderSelectionCell.js
var allVue44 = vue_runtime_esm_bundler_exports;
var gh44 = allVue44.h;
var isV344 = allVue44.version && allVue44.version[0] === "3";
var HeaderSelectionCellVue2 = {
  props: {
    field: String,
    title: String,
    sortable: [Boolean, Object],
    selectionValue: Boolean,
    render: [Object, Function, String]
  },
  // @ts-ignore
  emits: {
    selectionchange: null,
    headercellclick: null
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  created: function created8() {
    this.inputId = guid();
  },
  methods: {
    changeHandle: function changeHandle(e) {
      this.$emit("selectionchange", {
        field: this.$props.field,
        event: e
      });
    },
    clickHandler: function clickHandler2(event2) {
      if (this.$props.sortable) {
        this.$emit("headercellclick", event2);
      }
    }
  },
  // @ts-ignore
  setup: !isV344 ? void 0 : function() {
    var v3 = !!isV344;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render35(createElement) {
    var h = gh44 || createElement;
    var defaultSlot = getDefaultSlots(this);
    var renderTemplate = this.$props.render;
    var ls = provideLocalizationService(this);
    var selectAllRowsMessage = ls.toLanguageString(selectAllRows, messages[selectAllRows]);
    var input = h("input", {
      key: 0,
      checked: this.v3 ? this.$props.selectionValue : null,
      domProps: this.v3 ? void 0 : {
        "checked": this.$props.selectionValue
      },
      id: this.inputId,
      attrs: this.v3 ? void 0 : {
        id: this.inputId,
        type: "checkbox",
        "aria-label": selectAllRowsMessage
      },
      type: "checkbox",
      "class": "k-checkbox k-checkbox-md k-rounded-md",
      "aria-label": selectAllRowsMessage,
      onChange: this.changeHandle,
      on: this.v3 ? void 0 : {
        "change": this.changeHandle
      }
    });
    var defaultRendering = getTemplate.call(this, {
      h,
      template: renderTemplate,
      defaultRendering: input,
      additionalProps: this.$props,
      additionalListeners: {
        click: this.clickHandler,
        selectionchange: this.changeHandle
      }
    });
    return h("span", {
      "class": "k-link",
      onClick: this.clickHandler,
      on: this.v3 ? void 0 : {
        "click": this.clickHandler
      }
    }, [h("span", {
      "class": "k-column-title",
      title: this.$props.title,
      attrs: this.v3 ? void 0 : {
        title: this.$props.title
      }
    }, [defaultRendering]), defaultSlot]);
  }
};
var HeaderSelectionCell = HeaderSelectionCellVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/header/HeaderRow.js
var allVue45 = vue_runtime_esm_bundler_exports;
var gh45 = allVue45.h;
var isV345 = allVue45.version && allVue45.version[0] === "3";
var ariaSortMap = {
  "none": "none",
  "asc": "ascending",
  "desc": "descending"
};
var sortSeqMap2 = {
  true: {
    "asc": "desc",
    "desc": "",
    "": "asc"
  },
  false: {
    "asc": "desc",
    "desc": "asc",
    "": "asc"
  }
};
var HeaderRowVue2 = {
  name: "KendoHeaderRow",
  props: {
    grid: Object,
    cellRender: [String, Function, Object],
    groupable: [Boolean, Object],
    reorderable: Boolean,
    sortable: [Boolean, Object],
    sort: {
      type: Array
    },
    selectedField: String,
    filter: Object,
    filterable: Boolean,
    filterOperators: Object,
    filterChange: Function,
    filterRow: Object,
    columns: Array,
    columnsMap: Array,
    columnResize: Object,
    columnMenu: [Boolean, String, Function, Object],
    columnMenuAnimate: {
      type: [Boolean, Object],
      default: function _default27() {
        return true;
      }
    },
    size: String,
    isRtl: Boolean,
    onSortChange: Function
  },
  inject: {
    onNavFocus: {
      default: noop
    }
  },
  data: function data10() {
    return {
      columnMenuOpened: {}
    };
  },
  created: function created9() {
    this.serviceIndex = 0;
    this.index = -1;
    this._element = null;
    this.cellClick = this.cellClick.bind(this);
  },
  methods: {
    pressHandler: function pressHandler(event2, element3) {
      this.$emit("pressHandler", event2, element3);
    },
    dragHandler: function dragHandler(event2, element3) {
      this.$emit("dragHandler", event2, element3);
    },
    releaseHandler: function releaseHandler(event2) {
      this.$emit("releaseHandler", event2);
    },
    selectionChangeHandler: function selectionChangeHandler(options) {
      this.$emit("selectionchange", options);
    },
    cellClick: function cellClick(e, column) {
      e.preventDefault();
      if (!hasListener.call(this, "sortChange")) {
        return;
      }
      var _a11 = normalize3(this.$props.sortable || false, column.sortable || false), allowUnsort = _a11.allowUnsort, mode = _a11.mode;
      var oldDescriptor = (this.$props.sort || []).filter(function(d) {
        return d.field === column.field;
      })[0];
      var dir = sortSeqMap2[allowUnsort][oldDescriptor && oldDescriptor.dir || ""];
      var newDescriptor = mode === "single" ? [] : (this.$props.sort || []).filter(function(d) {
        return d.field !== column.field;
      });
      if (dir !== "" && column.field) {
        newDescriptor.push({
          field: column.field,
          dir
        });
      }
      this.sortChangeHandler(newDescriptor, {
        event: e,
        field: column.field
      });
    },
    sortChangeHandler: function sortChangeHandler(newDescriptor, e) {
      this.$emit("sortChange", newDescriptor, e);
    },
    filterChangeHandler: function filterChangeHandler2(newDescriptor, e) {
      this.$emit("filterChange", newDescriptor, e);
    },
    cellClass: function cellClass(field, headerClassName, locked) {
      var customClass = headerClassName ? " " + headerClassName : "";
      var result = "k-header" + (locked ? " k-grid-header-sticky" : "") + customClass;
      if (this.$props.sort && this.$props.sort.filter(function(descriptor) {
        return descriptor.field === field;
      }).length > 0) {
        result += " k-sorted";
      }
      return result;
    },
    cellKeyDown: function cellKeyDown(event2, column) {
      var _a11;
      if (event2.defaultPrevented) {
        return;
      }
      if (event2.keyCode === Keys.enter) {
        this.cellClick(event2, column);
      }
      if (event2.altKey && event2.keyCode === Keys.down) {
        if (column.field) {
          event2.preventDefault();
          this.columnMenuOpened = (_a11 = {}, _a11[column.field] = true, _a11);
        }
      }
    },
    getTemplate: function getTemplate2(template) {
      return templateRendering.call(this.$props.grid, template, getListeners.call(this.$props.grid));
    },
    columnMenuClose: function columnMenuClose() {
      this.onNavFocus({});
      this.columnMenuOpened = {};
    }
  },
  computed: {
    element: {
      get: function get13() {
        return this._element;
      }
    },
    theadClasses: {
      get: function get14() {
        return {
          "k-table-thead": true,
          "k-grid-header": true
        };
      }
    }
  },
  // @ts-ignore
  setup: !isV345 ? void 0 : function() {
    var v3 = !!isV345;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render36(createElement) {
    var h = gh45 || createElement;
    this.serviceIndex = 0;
    this.index = -1;
    var cells = function cells2(rowIndexes) {
      return rowIndexes.map(function(columnIndex) {
        var _this2 = this;
        var _this = this;
        var column = this.$props.columns[columnIndex];
        var sortable = this.$props.sortable && column.sortable;
        var sortIndex3 = this.$props.sort ? this.$props.sort.findIndex(function(s) {
          return s.field === column.field;
        }) : -1;
        var sortDir = sortIndex3 >= 0 ? this.$props.sort[sortIndex3].dir || "none" : "none";
        var sortIconRenderer = function sortIconRenderer2(iconSortIndex) {
          if (!this.$props.sort) {
            return null;
          }
          var currentDir = iconSortIndex >= 0 ? this.$props.sort[iconSortIndex].dir : "";
          return iconSortIndex >= 0 && [h(Icon, {
            key: 1,
            name: "sort-".concat(currentDir, "-small"),
            attrs: this.v3 ? void 0 : {
              name: "sort-".concat(currentDir, "-small"),
              icon: currentDir === "asc" ? sortAscSmallIcon : sortDescSmallIcon
            },
            icon: currentDir === "asc" ? sortAscSmallIcon : sortDescSmallIcon
          }), this.$props.sort.length > 1 && h("span", {
            key: 2,
            "class": "k-sort-order"
          }, [iconSortIndex + 1])];
        };
        var sortIcon = sortIconRenderer.call(this, sortIndex3);
        var columnMenu2 = column.columnMenu || column.columnMenu === false ? column.columnMenu : this.$props.columnMenu;
        var className = (column.kFirst ? "k-first " : "") + this.cellClass(column.field, column.headerClassName, column.locked) + (columnMenu2 ? " k-filterable" : "");
        var columnMenuRender = !columnMenu2 || typeof columnMenu2 === "boolean" ? !!columnMenu2 : this.getTemplate(columnMenu2);
        var style = column.left !== void 0 ? !this.$props.isRtl ? {
          left: column.left + "px",
          right: column.right + "px"
        } : {
          left: column.right + "px",
          right: column.left + "px"
        } : {};
        var ariaAttrs = column.isAccessible ? {
          ariaSort: ariaSortMap[sortDir],
          role: "columnheader",
          ariaColumnIndex: column.ariaColumnIndex,
          ariaSelected: false
        } : {
          "role": "presentation"
        };
        var key = column.declarationIndex >= 0 ? ++this.index : --this.serviceIndex;
        return (
          // @ts-ignore function children
          h(HeaderThElement, {
            ariaSort: ariaAttrs.ariaSort,
            attrs: this.v3 ? void 0 : {
              ariaSort: ariaAttrs.ariaSort,
              role: ariaAttrs.role,
              ariaColumnIndex: ariaAttrs.ariaColumnIndex,
              ariaSelected: ariaAttrs.ariaSelected,
              colSpan: column.colSpan,
              rowSpan: column.rowSpan,
              columnId: column.id,
              navigatable: column.navigatable
            },
            role: ariaAttrs.role,
            ariaColumnIndex: ariaAttrs.ariaColumnIndex,
            ariaSelected: ariaAttrs.ariaSelected,
            key,
            colSpan: column.colSpan,
            rowSpan: column.rowSpan,
            "class": className,
            style,
            columnId: column.id,
            navigatable: column.navigatable,
            onKeydown: function onKeydown(e) {
              return _this.cellKeyDown(e, column);
            },
            on: this.v3 ? void 0 : {
              "keydown": function onKeydown(e) {
                return _this.cellKeyDown(e, column);
              }
            }
          }, this.v3 ? function() {
            return [[
              // @ts-ignore
              column.children.length === 0 && columnMenu2 && h(ColumnMenu, {
                key: 0,
                column: {
                  field: column.field,
                  filter: column.filter
                },
                attrs: _this2.v3 ? void 0 : {
                  column: {
                    field: column.field,
                    filter: column.filter
                  },
                  opened: _this2.columnMenuOpened[column.field],
                  animate: _this2.$props.columnMenuAnimate,
                  sortable,
                  sort: _this2.$props.sort,
                  filter: _this2.$props.filter,
                  filterable: _this2.$props.filterable && column.filterable,
                  filterOperators: _this2.$props.filterOperators,
                  render: columnMenuRender
                },
                opened: _this2.columnMenuOpened[column.field],
                animate: _this2.$props.columnMenuAnimate,
                sortable,
                sort: _this2.$props.sort,
                onClose: _this2.columnMenuClose,
                on: _this2.v3 ? void 0 : {
                  "close": _this2.columnMenuClose,
                  "sortchange": _this2.sortChangeHandler,
                  "filterchange": _this2.filterChangeHandler
                },
                onSortchange: _this2.sortChangeHandler,
                filter: _this2.$props.filter,
                filterable: _this2.$props.filterable && column.filterable,
                filterOperators: _this2.$props.filterOperators,
                onFilterchange: _this2.filterChangeHandler,
                render: columnMenuRender
              }),
              column.internalHeaderCell && h("span", {
                "class": "k-cell-inner"
              }, [
                // @ts-ignore function children
                h(column.internalHeaderCell, {
                  key: 1,
                  field: column.field,
                  attrs: _this2.v3 ? void 0 : {
                    field: column.field,
                    sortable,
                    selectionValue: column.headerSelectionValue,
                    title: column.title,
                    render: (column.headerCell || _this2.$props.cellRender) && _this2.getTemplate(column.headerCell || _this2.$props.cellRender)
                  },
                  sortable,
                  onHeadercellclick: function onHeadercellclick(e) {
                    return _this.cellClick(e, column);
                  },
                  on: _this2.v3 ? void 0 : {
                    "headercellclick": function onHeadercellclick(e) {
                      return _this.cellClick(e, column);
                    },
                    "selectionchange": _this2.selectionChangeHandler
                  },
                  onSelectionchange: _this2.selectionChangeHandler,
                  selectionValue: column.headerSelectionValue,
                  title: column.title,
                  render: (column.headerCell || _this2.$props.cellRender) && _this2.getTemplate(column.headerCell || _this2.$props.cellRender)
                }, _this2.v3 ? function() {
                  return [sortIcon];
                } : [sortIcon])
              ]) || _this2.$props.selectedField && column.field === _this2.$props.selectedField && h("span", {
                "class": "k-cell-inner"
              }, [
                // @ts-ignore function children
                h(HeaderSelectionCell, {
                  key: 1,
                  field: column.field,
                  attrs: _this2.v3 ? void 0 : {
                    field: column.field,
                    sortable,
                    selectionValue: column.headerSelectionValue,
                    title: column.title,
                    render: (column.headerCell || _this2.$props.cellRender) && _this2.getTemplate(column.headerCell || _this2.$props.cellRender)
                  },
                  sortable,
                  onHeadercellclick: function onHeadercellclick(e) {
                    return _this.cellClick(e, column);
                  },
                  on: _this2.v3 ? void 0 : {
                    "headercellclick": function onHeadercellclick(e) {
                      return _this.cellClick(e, column);
                    },
                    "selectionchange": _this2.selectionChangeHandler
                  },
                  onSelectionchange: _this2.selectionChangeHandler,
                  selectionValue: column.headerSelectionValue,
                  title: column.title,
                  render: (column.headerCell || _this2.$props.cellRender) && _this2.getTemplate(column.headerCell || _this2.$props.cellRender)
                }, _this2.v3 ? function() {
                  return [sortIcon];
                } : [sortIcon])
              ]) || h("span", {
                "class": "k-cell-inner"
              }, [
                // @ts-ignore function children
                h(HeaderCell, {
                  key: 1,
                  field: column.field,
                  attrs: _this2.v3 ? void 0 : {
                    field: column.field,
                    sortable,
                    selectionValue: column.headerSelectionValue,
                    title: column.title,
                    render: (column.headerCell || _this2.$props.cellRender) && _this2.getTemplate(column.headerCell || _this2.$props.cellRender)
                  },
                  sortable,
                  onHeadercellclick: function onHeadercellclick(e) {
                    return _this.cellClick(e, column);
                  },
                  on: _this2.v3 ? void 0 : {
                    "headercellclick": function onHeadercellclick(e) {
                      return _this.cellClick(e, column);
                    }
                  },
                  selectionValue: column.headerSelectionValue,
                  title: column.title,
                  render: (column.headerCell || _this2.$props.cellRender) && _this2.getTemplate(column.headerCell || _this2.$props.cellRender)
                }, _this2.v3 ? function() {
                  return [sortIcon];
                } : [sortIcon])
              ]),
              _this2.$props.columnResize && _this2.$props.columnResize.resizable && column.resizable && h(ColumnResizer, {
                key: 2,
                onResize: function onResize(e, element3, end2) {
                  return _this.$props.columnResize && _this.$props.columnResize.dragHandler(e, column, element3, end2);
                },
                on: _this2.v3 ? void 0 : {
                  "resize": function onResize(e, element3, end2) {
                    return _this.$props.columnResize && _this.$props.columnResize.dragHandler(e, column, element3, end2);
                  }
                }
              })
            ]];
          } : [[column.children.length === 0 && columnMenu2 && h(ColumnMenu, {
            key: 0,
            column: {
              field: column.field,
              filter: column.filter
            },
            attrs: _this2.v3 ? void 0 : {
              column: {
                field: column.field,
                filter: column.filter
              },
              opened: _this2.columnMenuOpened[column.field],
              animate: _this2.$props.columnMenuAnimate,
              sortable,
              sort: _this2.$props.sort,
              filter: _this2.$props.filter,
              filterable: _this2.$props.filterable && column.filterable,
              filterOperators: _this2.$props.filterOperators,
              render: columnMenuRender
            },
            opened: _this2.columnMenuOpened[column.field],
            animate: _this2.$props.columnMenuAnimate,
            sortable,
            sort: _this2.$props.sort,
            onClose: _this2.columnMenuClose,
            on: _this2.v3 ? void 0 : {
              "close": _this2.columnMenuClose,
              "sortchange": _this2.sortChangeHandler,
              "filterchange": _this2.filterChangeHandler
            },
            onSortchange: _this2.sortChangeHandler,
            filter: _this2.$props.filter,
            filterable: _this2.$props.filterable && column.filterable,
            filterOperators: _this2.$props.filterOperators,
            onFilterchange: _this2.filterChangeHandler,
            render: columnMenuRender
          }), column.internalHeaderCell && h("span", {
            "class": "k-cell-inner"
          }, [h(column.internalHeaderCell, {
            key: 1,
            field: column.field,
            attrs: _this2.v3 ? void 0 : {
              field: column.field,
              sortable,
              selectionValue: column.headerSelectionValue,
              title: column.title,
              render: (column.headerCell || _this2.$props.cellRender) && _this2.getTemplate(column.headerCell || _this2.$props.cellRender)
            },
            sortable,
            onHeadercellclick: function onHeadercellclick(e) {
              return _this.cellClick(e, column);
            },
            on: _this2.v3 ? void 0 : {
              "headercellclick": function onHeadercellclick(e) {
                return _this.cellClick(e, column);
              },
              "selectionchange": _this2.selectionChangeHandler
            },
            onSelectionchange: _this2.selectionChangeHandler,
            selectionValue: column.headerSelectionValue,
            title: column.title,
            render: (column.headerCell || _this2.$props.cellRender) && _this2.getTemplate(column.headerCell || _this2.$props.cellRender)
          }, _this2.v3 ? function() {
            return [sortIcon];
          } : [sortIcon])]) || _this2.$props.selectedField && column.field === _this2.$props.selectedField && h("span", {
            "class": "k-cell-inner"
          }, [h(HeaderSelectionCell, {
            key: 1,
            field: column.field,
            attrs: _this2.v3 ? void 0 : {
              field: column.field,
              sortable,
              selectionValue: column.headerSelectionValue,
              title: column.title,
              render: (column.headerCell || _this2.$props.cellRender) && _this2.getTemplate(column.headerCell || _this2.$props.cellRender)
            },
            sortable,
            onHeadercellclick: function onHeadercellclick(e) {
              return _this.cellClick(e, column);
            },
            on: _this2.v3 ? void 0 : {
              "headercellclick": function onHeadercellclick(e) {
                return _this.cellClick(e, column);
              },
              "selectionchange": _this2.selectionChangeHandler
            },
            onSelectionchange: _this2.selectionChangeHandler,
            selectionValue: column.headerSelectionValue,
            title: column.title,
            render: (column.headerCell || _this2.$props.cellRender) && _this2.getTemplate(column.headerCell || _this2.$props.cellRender)
          }, _this2.v3 ? function() {
            return [sortIcon];
          } : [sortIcon])]) || h("span", {
            "class": "k-cell-inner"
          }, [h(HeaderCell, {
            key: 1,
            field: column.field,
            attrs: _this2.v3 ? void 0 : {
              field: column.field,
              sortable,
              selectionValue: column.headerSelectionValue,
              title: column.title,
              render: (column.headerCell || _this2.$props.cellRender) && _this2.getTemplate(column.headerCell || _this2.$props.cellRender)
            },
            sortable,
            onHeadercellclick: function onHeadercellclick(e) {
              return _this.cellClick(e, column);
            },
            on: _this2.v3 ? void 0 : {
              "headercellclick": function onHeadercellclick(e) {
                return _this.cellClick(e, column);
              }
            },
            selectionValue: column.headerSelectionValue,
            title: column.title,
            render: (column.headerCell || _this2.$props.cellRender) && _this2.getTemplate(column.headerCell || _this2.$props.cellRender)
          }, _this2.v3 ? function() {
            return [sortIcon];
          } : [sortIcon])]), _this2.$props.columnResize && _this2.$props.columnResize.resizable && column.resizable && h(ColumnResizer, {
            key: 2,
            onResize: function onResize(e, element3, end2) {
              return _this.$props.columnResize && _this.$props.columnResize.dragHandler(e, column, element3, end2);
            },
            on: _this2.v3 ? void 0 : {
              "resize": function onResize(e, element3, end2) {
                return _this.$props.columnResize && _this.$props.columnResize.dragHandler(e, column, element3, end2);
              }
            }
          })]])
        );
      }, this);
    };
    return h("thead", {
      role: "presentation",
      attrs: this.v3 ? void 0 : {
        role: "presentation",
        "data-keyboardnavheader": true
      },
      "class": this.theadClasses,
      "data-keyboardnavheader": true
    }, [this.$props.columnsMap.map(function(rowIndexes, index) {
      var _this3 = this;
      return (this.$props.groupable || this.$props.reorderable) && // @ts-ignore function children
      h(ColumnDraggable, {
        key: index,
        onPressHandler: this.pressHandler,
        on: this.v3 ? void 0 : {
          "pressHandler": this.pressHandler,
          "dragHandler": this.dragHandler,
          "releaseHandler": this.releaseHandler
        },
        onDragHandler: this.dragHandler,
        onReleaseHandler: this.releaseHandler
      }, this.v3 ? function() {
        return [cells.call(_this3, rowIndexes)];
      } : [cells.call(_this3, rowIndexes)]) || h("tr", {
        "class": "k-table-row",
        role: "row",
        attrs: this.v3 ? void 0 : {
          role: "row"
        }
      }, [cells.call(this, rowIndexes)]);
    }, this), this.$props.filterRow]);
  }
};
var HeaderRow = HeaderRowVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/header/utils/main.js
function nextColumn(columns, current) {
  var currentDepth = columns[current].depth;
  var next = null;
  for (var index = current + 1; index < columns.length; index++) {
    if (columns[index].depth === currentDepth) {
      next = columns[index];
      break;
    }
  }
  return next;
}
var getColumnWidth = function(column) {
  var width = column.width ? parseFloat(column.width.toString()) : 0;
  if (!width && column.children && column.children.length) {
    width = column.children.reduce(function(currentSum, child) {
      return getColumnWidth(child) + currentSum;
    }, 0);
  }
  return width;
};
function mapColumns(columns) {
  var columnsMap = [[]];
  var maxDepth = 0;
  for (var q = columns.length - 1; q >= 0; q--) {
    maxDepth = Math.max(maxDepth, columns[q].depth);
    columns[q].colSpan = columns[q].colSpan || 1;
    if (columns[q].parentIndex !== -1) {
      columns[columns[q].parentIndex].colSpan = (columns[columns[q].parentIndex].colSpan || 0) + columns[q].colSpan;
    }
  }
  var colIndexByLevel = [];
  var rowSpan = 1;
  columns.forEach(function(column2, i2) {
    columnsMap[column2.depth] = columnsMap[column2.depth] || [];
    var needKFirst = false;
    if (columnsMap[column2.depth].length === 0) {
      if (rowSpan <= 1) {
        rowSpan = 1 + (column2.children.length > 0 ? 0 : maxDepth - column2.depth);
      } else {
        rowSpan--;
        needKFirst = true;
      }
    }
    column2.rowSpan = 1 + (column2.children.length > 0 ? 0 : maxDepth - column2.depth);
    column2.kFirst = needKFirst;
    column2.index = columnsMap[column2.depth].length;
    columnsMap[column2.depth].push(i2);
    column2.ariaColumnIndex = colIndexByLevel[column2.depth] ? colIndexByLevel[column2.depth] + 1 : 1;
    for (var ci = column2.depth; ci < column2.depth + column2.rowSpan; ci++) {
      colIndexByLevel[ci] = (colIndexByLevel[ci] || 0) + column2.colSpan;
    }
  });
  var stickyLeftWidth = new Array(columnsMap.length).fill(0);
  var width = 0;
  columns.forEach(function(column2) {
    if (column2.locked) {
      column2.left = stickyLeftWidth[column2.depth];
      width = getColumnWidth(column2);
      if (column2.children.length === 0) {
        for (var i2 = column2.depth; i2 < stickyLeftWidth.length; i2++) {
          stickyLeftWidth[i2] += width;
        }
      } else {
        stickyLeftWidth[column2.depth] += width;
      }
    }
  });
  var stickyRightWidth = new Array(columnsMap.length).fill(0);
  for (var i = columns.length - 1; i >= 0; i--) {
    var column = columns[i];
    if (column.locked) {
      column.right = stickyRightWidth[column.depth];
      width = getColumnWidth(column);
      if (column.children.length === 0) {
        for (var j = column.depth; j < stickyRightWidth.length; j++) {
          stickyRightWidth[j] += width;
        }
      } else {
        stickyRightWidth[column.depth] += width;
      }
      var next = nextColumn(columns, i);
      column.rightBorder = !(next && next.locked);
    }
  }
  return columnsMap;
}
function readColumns(elements, idInfo, depth) {
  if (depth === void 0) {
    depth = 0;
  }
  var columns = [];
  if (!elements || !elements.length) {
    return [];
  }
  elements.forEach(function(columnProps) {
    var children2 = readColumns(columnProps.children || [], idInfo, depth + 1);
    columns.push(Object.assign({}, { depth }, ColumnDefaultProps, columnProps, {
      id: columnProps.id ? columnProps.id : generateNavigatableId("".concat(idInfo.prevId++), idInfo.idPrefix, "column"),
      declarationIndex: columns.length,
      children: children2,
      rowSpan: 0,
      colSpan: 0,
      isAccessible: true
    }));
  });
  var comparator = function(a, b) {
    return a.orderIndex === b.orderIndex ? a.declarationIndex - b.declarationIndex : (a.orderIndex || 0) - (b.orderIndex || 0);
  };
  columns.sort(comparator);
  if (depth === 0) {
    var ret_1 = [];
    var flat_1 = function(cols, pIndex) {
      return cols.forEach(function(c) {
        c.parentIndex = pIndex;
        flat_1(c.children, ret_1.push(c) - 1);
      });
    };
    flat_1(columns, -1);
    return ret_1;
  }
  return columns;
}
function isRtl2(element3) {
  return Boolean(element3 && getComputedStyle(element3).direction === "rtl");
}
function getIndex(event2, parent) {
  if (!parent || !event2 || !event2.originalEvent) {
    return -1;
  }
  var target = parent.ownerDocument ? parent.ownerDocument.elementFromPoint(event2.clientX, event2.originalEvent.clientY) : null;
  while (target && target.parentElement !== parent) {
    target = target.parentElement;
  }
  var children2 = parent.children;
  for (var i = 0; i < children2.length; i++) {
    if (children2[i] === target) {
      return i;
    }
  }
  return -1;
}

// node_modules/@progress/kendo-vue-data-tools/dist/es/header/HeaderTdElement.js
var allVue46 = vue_runtime_esm_bundler_exports;
var gh46 = allVue46.h;
var isV346 = allVue46.version && allVue46.version[0] === "3";
var inject20 = allVue46.inject;
var HeaderTdElementVue2 = {
  name: "KendoHeaderTdElement",
  // @ts-ignore
  emits: {
    keydown: null
  },
  props: {
    ariaColumnIndex: Number,
    role: String,
    columnId: String,
    navigatable: Boolean
  },
  computed: {
    tdClass: function tdClass() {
      var _a11;
      var className = this.$props.className;
      return _a11 = {
        "k-table-td": true
      }, _a11[className] = className, _a11;
    }
  },
  inject: {
    getKeyboardNavigationAttributes: {
      default: noop
    }
  },
  // @ts-ignore
  setup: !isV346 ? void 0 : function() {
    var v3 = !!isV346;
    var kendoIntlService = inject20("kendoIntlService", {});
    var kendoLocalizationService = inject20("kendoLocalizationService", {});
    return {
      v3,
      kendoIntlService,
      kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render37(createElement) {
    var h = gh46 || createElement;
    var _a11 = this.$props, columnId = _a11.columnId, navigatable = _a11.navigatable, ariaColumnIndex = _a11.ariaColumnIndex, role = _a11.role;
    var navAttrs = this.getKeyboardNavigationAttributes(columnId, navigatable);
    var defaultSlot = getDefaultSlots(this);
    return h("td", {
      style: {
        top: "0px"
      },
      "aria-colindex": ariaColumnIndex,
      attrs: this.v3 ? void 0 : {
        "aria-colindex": ariaColumnIndex,
        role,
        tabindex: navAttrs.tabIndex,
        "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
        "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
      },
      "class": this.tdClass,
      onKeydown: this.onKeyDown,
      on: this.v3 ? void 0 : {
        "keydown": this.onKeyDown
      },
      role,
      tabindex: navAttrs.tabIndex,
      "data-keyboardnavlevel": navAttrs[KEYBOARD_NAV_DATA_LEVEL],
      "data-keyboardnavid": navAttrs[KEYBOARD_NAV_DATA_ID]
    }, [defaultSlot]);
  },
  methods: {
    onKeyDown: function onKeyDown3(e) {
      this.$emit("keydown", e);
    }
  }
};
var HeaderTdElement = HeaderTdElementVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/virtualization/columns.js
var __spreadArray7 = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
function tableColumnsVirtualization(args) {
  var enabled = args.enabled, _a11 = args.columns, columns = _a11 === void 0 ? [] : _a11, tableViewPortWidth = args.tableViewPortWidth, scrollLeft = args.scrollLeft;
  var colSpans = columns.map(function() {
    return 1;
  });
  var hiddenColumns = columns.map(function() {
    return false;
  });
  if (!enabled) {
    return { colSpans, hiddenColumns };
  }
  var widths = columns.map(function(c) {
    return parseFloat((c.width || "").toString()) || 10;
  });
  var widthOfHiddenColumns = 0;
  for (var i = 0; i < columns.length; i++) {
    if (columns[i].locked) {
      continue;
    }
    var considerNext = i < widths.length - 1 ? widths[i + 1] : 0;
    if (widthOfHiddenColumns + widths[i] + considerNext < scrollLeft) {
      hiddenColumns[i] = true;
      widthOfHiddenColumns += widths[i];
    } else {
      break;
    }
  }
  var totalWidth = widths.reduce(function(acc, current) {
    return acc + current;
  }, 0);
  widthOfHiddenColumns = 0;
  for (var i = columns.length - 1; i >= 0; i--) {
    if (columns[i].locked) {
      continue;
    }
    if (widthOfHiddenColumns + 2 * widths[i] < totalWidth - tableViewPortWidth - scrollLeft) {
      hiddenColumns[i] = true;
      widthOfHiddenColumns += widths[i];
    } else {
      break;
    }
  }
  var hiddenCols = __spreadArray7([], hiddenColumns, true);
  var hidden = function(value2) {
    return value2;
  };
  var lastVisible = hiddenCols.lastIndexOf(false);
  var anyHidden = hiddenCols.some(hidden);
  var allHidden = hiddenCols.every(hidden);
  var hiddenSeqLength;
  var updateIndex;
  while (anyHidden && hiddenCols.length && (lastVisible !== -1 || allHidden)) {
    if (lastVisible < hiddenCols.length - 1) {
      hiddenSeqLength = allHidden ? hiddenCols.length : hiddenCols.length - lastVisible - 1;
      updateIndex = hiddenCols.length - hiddenSeqLength;
      if (updateIndex === 0) {
        updateIndex = hiddenSeqLength - 1;
      }
      hiddenColumns[updateIndex] = false;
      colSpans[updateIndex] = hiddenSeqLength;
      hiddenCols.splice(lastVisible + 1, hiddenSeqLength);
    }
    while (hiddenCols.length && !hiddenCols[hiddenCols.length - 1]) {
      hiddenCols.pop();
    }
    lastVisible = hiddenCols.lastIndexOf(false);
    anyHidden = hiddenCols.some(hidden);
    allHidden = hiddenCols.every(hidden);
  }
  return { colSpans, hiddenColumns };
}

// node_modules/@progress/kendo-vue-data-tools/dist/es/drag/ColumnResize.js
var ColumnResize = (
  /** @class */
  function() {
    function ColumnResize2(triggerResize) {
      var _this = this;
      this.resizable = false;
      this.isRtl = false;
      this.setIsRtl = function(isRtl3) {
        _this.isRtl = isRtl3;
      };
      this.onResize = triggerResize;
      this.dragHandler = this.dragHandler.bind(this);
    }
    ColumnResize2.prototype.dragHandler = function(event2, column, dragCue, end2) {
      var e = event2.originalEvent;
      if (!end2) {
        e.preventDefault();
        e.stopPropagation();
        e.stopImmediatePropagation();
      }
      var tdElement = dragCue.parentElement;
      if (!tdElement || !tdElement.parentElement) {
        return;
      }
      var oldWidth = tdElement.clientWidth;
      var newWidth;
      if (this.isRtl) {
        newWidth = dragCue.getBoundingClientRect().right - dragCue.offsetWidth / 2 - event2.clientX;
        newWidth += oldWidth;
      } else {
        newWidth = oldWidth + event2.clientX - dragCue.getBoundingClientRect().left - dragCue.offsetWidth / 2;
      }
      if (!end2 && Math.abs(newWidth - oldWidth) < 1) {
        return;
      }
      this.fixateInitialWidths(tdElement.parentElement.clientWidth);
      this.setWidths(column, Math.floor(newWidth) / oldWidth);
      var index = this.columns.filter(function(c) {
        return !c.children.length;
      }).indexOf(column);
      this.onResize(index, oldWidth, newWidth, e, end2);
    };
    ColumnResize2.prototype.fixateInitialWidths = function(width) {
      var columns = this.columns.filter(function(c) {
        return !c.children.length;
      });
      var remainingCount = 0;
      var cols = this.colGroupMain ? this.colGroupMain.children : [];
      for (var i = 0; i < cols.length; i++) {
        if (cols[i].width) {
          width -= parseFloat(cols[i].width);
        } else {
          remainingCount++;
        }
      }
      if (remainingCount === 0) {
        return;
      }
      var perCol = Math.floor(width / remainingCount);
      for (var i = 0; i < cols.length; i++) {
        var col = cols[i];
        if (!col.width) {
          col.width = perCol;
          columns[i].width = perCol.toString();
          if (this.colGroupHeader) {
            this.colGroupHeader.children[i].width = perCol;
          }
          if (this.colGroupFooter) {
            this.colGroupFooter.children[i].width = perCol;
          }
        }
      }
    };
    ColumnResize2.prototype.setWidths = function(column, coef) {
      var indexInOriginal = this.columns.indexOf(column);
      var toAdjust = [];
      var more = column.children.length;
      for (var i = indexInOriginal + 1; more > 0 && i < this.columns.length; i++, more--) {
        var cc = this.columns[i];
        if (!cc.children.length) {
          toAdjust.push(cc);
        } else {
          more += cc.children.length;
        }
      }
      if (toAdjust.length === 0) {
        toAdjust.push(column);
      }
      toAdjust.forEach(function(colToAdjust) {
        var targetWidth = colToAdjust.width ? parseFloat(colToAdjust.width.toString()) * coef : 0;
        var min = colToAdjust.minResizableWidth === void 0 ? 10 : colToAdjust.minResizableWidth;
        if (targetWidth < min) {
          targetWidth = min;
        }
        colToAdjust.width = targetWidth;
      });
      this.updateColElements(toAdjust);
    };
    ColumnResize2.prototype.updateColElements = function(affectedColumns) {
      var columns = this.columns.filter(function(c) {
        return !c.children.length;
      });
      var difference = 1e-10;
      for (var i = 0; i < affectedColumns.length; i++) {
        var colIndex = columns.indexOf(affectedColumns[i]);
        var currentColumnFloatWidth = parseFloat((affectedColumns[i].width || 0).toString());
        difference += currentColumnFloatWidth - Math.floor(currentColumnFloatWidth);
        var currentWidth = Math.floor(currentColumnFloatWidth) + Math.floor(difference);
        difference -= Math.floor(difference);
        if (this.colGroupMain) {
          this.colGroupMain.children[colIndex].width = currentWidth + "px";
        }
        if (this.colGroupHeader) {
          this.colGroupHeader.children[colIndex].width = currentWidth + "px";
        }
        if (this.colGroupFooter && this.colGroupFooter.children[colIndex]) {
          this.colGroupFooter.children[colIndex].width = currentWidth + "px";
        }
      }
    };
    return ColumnResize2;
  }()
);

// node_modules/@progress/kendo-vue-data-tools/dist/es/utils/main.js
function getIndex2(event2, parent) {
  if (!parent || !event2 || !event2.originalEvent || !canUseDOM) {
    return -1;
  }
  var target = document.elementFromPoint(event2.clientX, event2.originalEvent.clientY);
  while (target && target.parentElement !== parent) {
    target = target.parentElement;
  }
  var children2 = parent.children;
  for (var i = 0; i < children2.length; i++) {
    if (children2[i] === target) {
      return i;
    }
  }
  return -1;
}

// node_modules/@progress/kendo-vue-data-tools/dist/es/drag/CommonDragLogic.js
var CommonDragLogic = (
  /** @class */
  function() {
    function CommonDragLogic2(columnReorder, groupReorder, columnToGroup) {
      var _this = this;
      this.reorderable = false;
      this.groupable = false;
      this.dropElementClue = null;
      this.dragElementClue = null;
      this.startColumn = -1;
      this.startGroup = -1;
      this.currentColumn = -1;
      this.currentGroup = -1;
      this.groupPanelDivElement = null;
      this.refGroupPanelDiv = function(e) {
        _this.groupPanelDivElement = e.children ? e.children[0] : e;
      };
      this.refDropElementClue = function(e) {
        _this.dropElementClue = e;
        if (_this.dropElementClue && canUseDOM) {
          document.body.appendChild(_this.dropElementClue.$el);
        }
      };
      this.refDragElementClue = function(e) {
        _this.dragElementClue = e;
        if (_this.dragElementClue && canUseDOM) {
          document.body.appendChild(_this.dragElementClue.$el);
        }
      };
      this.pressHandler = function(event2, element3) {
        if (!event2.isTouch) {
          event2.originalEvent.preventDefault();
        }
        var startColumn = _this.getColumnIndex(event2, element3);
        _this.startGroup = _this.getGroupIndex(event2);
        if (startColumn >= 0) {
          var col = _this.columns[startColumn];
          if (col.reorderable && _this.reorderable || col.groupable && _this.groupable) {
            _this.startColumn = startColumn;
          }
        }
      };
      this.dragHandler = function(event2, element3) {
        if (!event2.isTouch) {
          event2.originalEvent.preventDefault();
        }
        event2.originalEvent.stopPropagation();
        if (_this.startColumn === -1 && _this.startGroup === -1) {
          return;
        }
        _this.currentColumn = _this.getColumnIndex(event2, element3);
        var groupPanelChildren = _this.groupPanelDivElement && _this.groupPanelDivElement.children;
        _this.currentGroup = _this.isTargetGroupingContainer(event2) ? groupPanelChildren && groupPanelChildren.length ? groupPanelChildren.length - 1 : 0 : _this.getGroupIndex(event2);
        var invalidIndex = !_this.isValid();
        if (invalidIndex) {
          _this.currentColumn = -1;
          _this.currentGroup = -1;
        }
        var targetElement = _this.currentColumn >= 0 ? element3.children[_this.columns[_this.currentColumn].index] : _this.isTargetGroupingContainer(event2) ? event2.originalEvent.target : _this.groupPanelDivElement && _this.groupPanelDivElement.children[_this.currentGroup];
        _this.updateDragElementClue(event2, element3, targetElement, invalidIndex);
        _this.updateDropElementClue(event2, element3, targetElement, invalidIndex);
      };
      this.releaseHandler = function(event2) {
        var prevColumnIndex = _this.startColumn;
        var nextColumnIndex = _this.currentColumn;
        var prevGroupIndex = _this.startGroup;
        var nextGroupIndex = _this.currentGroup;
        if (_this.dropElementClue) {
          _this.dropElementClue.visible = false;
        }
        if (_this.dragElementClue) {
          _this.dragElementClue.visible = false;
        }
        var isValid = _this.isValid();
        _this.startColumn = _this.startGroup = _this.currentColumn = _this.currentGroup = -1;
        if (!isValid) {
          return;
        }
        if (prevColumnIndex >= 0 && nextColumnIndex >= 0) {
          _this.columnReorder(prevColumnIndex, nextColumnIndex, event2.originalEvent);
        } else if (prevGroupIndex >= 0 && nextGroupIndex >= 0) {
          _this.groupReorder(prevGroupIndex, nextGroupIndex, event2.originalEvent);
        } else if (prevColumnIndex >= 0 && nextGroupIndex >= 0) {
          _this.columnToGroup(prevColumnIndex, nextGroupIndex, event2.originalEvent);
        }
      };
      this.columnReorder = columnReorder;
      this.groupReorder = groupReorder;
      this.columnToGroup = columnToGroup;
    }
    CommonDragLogic2.prototype.getColumnIndex = function(event2, parent) {
      if (!parent || parent.parentElement === this.groupPanelDivElement) {
        return -1;
      }
      var index = getIndex2(event2, parent);
      if (index === -1) {
        return -1;
      }
      var _loop_1 = function(i2) {
        if (parent.parentNode.children[i2] === parent) {
          return { value: this_1.columns.findIndex(function(c) {
            return c.index === index && c.depth === i2;
          }) };
        }
      };
      var this_1 = this;
      for (var i = 0; i < parent.parentNode.children.length; i++) {
        var state_1 = _loop_1(i);
        if (typeof state_1 === "object")
          return state_1.value;
      }
      return -1;
    };
    CommonDragLogic2.prototype.isTargetGroupingContainer = function(event2) {
      var target = event2.originalEvent.target;
      return target.className.indexOf("k-grouping-drop-container") !== -1;
    };
    CommonDragLogic2.prototype.getGroupIndex = function(event2) {
      return getIndex2(event2, this.groupPanelDivElement);
    };
    CommonDragLogic2.prototype.isValid = function() {
      if (this.startGroup >= 0) {
        return this.currentGroup >= 0 && this.currentGroup !== this.startGroup;
      }
      if (this.startColumn === -1) {
        return false;
      }
      if (this.currentGroup >= 0) {
        return this.columns[this.startColumn].groupable === true && this.groupable === true;
      }
      return this.reorderable === true && this.currentColumn >= 0 && this.currentColumn !== this.startColumn && this.columns[this.startColumn].reorderable === true && this.columns[this.currentColumn].parentIndex === this.columns[this.startColumn].parentIndex;
    };
    CommonDragLogic2.prototype.updateDragElementClue = function(event2, element3, targetElement, invalidIndex) {
      if (!this.dragElementClue) {
        return;
      }
      var innerText = this.startColumn >= 0 ? element3.children[this.columns[this.startColumn].index].innerText : element3.innerText;
      this.dragElementClue.visible = true;
      this.dragElementClue.top = event2.pageY + 10;
      this.dragElementClue.left = event2.pageX;
      this.dragElementClue.innerText = innerText;
      this.dragElementClue.status = invalidIndex || !targetElement ? "cancel" : "plus";
    };
    CommonDragLogic2.prototype.updateDropElementClue = function(event2, element3, targetElement, invalidIndex) {
      if (!this.dropElementClue) {
        return;
      }
      if (invalidIndex || !targetElement) {
        this.dropElementClue.visible = false;
        return;
      }
      var rect = targetElement.getBoundingClientRect();
      var groupElement = targetElement.closest(".k-grouping-header");
      var rectParent = (groupElement || targetElement).getBoundingClientRect();
      var left2 = rect.left + event2.pageX - event2.clientX - 6;
      if (!this.isTargetGroupingContainer(event2) && (this.currentColumn > this.startColumn || this.currentGroup > this.startGroup && this.startGroup !== -1)) {
        left2 += rect.width;
      }
      var top = rectParent.top + event2.pageY - event2.clientY;
      this.dropElementClue.visible = true;
      this.dropElementClue.top = top;
      this.dropElementClue.left = left2;
      this.dropElementClue.height = this.currentColumn >= 0 ? element3.clientHeight : rectParent.height;
    };
    return CommonDragLogic2;
  }()
);

// node_modules/@progress/kendo-vue-data-tools/dist/es/drag/DragClue.js
var allVue47 = vue_runtime_esm_bundler_exports;
var gh47 = allVue47.h;
var isV347 = allVue47.version && allVue47.version[0] === "3";
var DragClueVue2 = {
  data: function data11() {
    return {
      visible: false,
      top: 0,
      left: 0,
      innerText: "",
      status: "cancel"
    };
  },
  // @ts-ignore
  setup: !isV347 ? void 0 : function() {
    var v3 = !!isV347;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render38(createElement) {
    var h = gh47 || createElement;
    return this.visible && h("div", {
      "class": "k-header k-drag-clue",
      style: {
        display: "block",
        position: "absolute",
        zIndex: 2e4,
        padding: "8px 12px",
        top: this.top + "px",
        left: this.left + "px"
      }
    }, [h(Icon, {
      name: this.status,
      attrs: this.v3 ? void 0 : {
        name: this.status,
        icon: this.status === "cancel" ? cancelIcon : plusIcon
      },
      "class": "k-drag-status",
      icon: this.status === "cancel" ? cancelIcon : plusIcon
    }), this.innerText]);
  }
};
var DragClue = DragClueVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/drag/DropClue.js
var allVue48 = vue_runtime_esm_bundler_exports;
var gh48 = allVue48.h;
var isV348 = allVue48.version && allVue48.version[0] === "3";
var DropClueVue2 = {
  data: function data12() {
    return {
      height: 0,
      visible: false,
      left: 0,
      top: 0
    };
  },
  // @ts-ignore
  setup: !isV348 ? void 0 : function() {
    var v3 = !!isV348;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render39(createElement) {
    var h = gh48 || createElement;
    return this.visible && h("div", {
      "class": "k-grouping-dropclue",
      style: {
        zIndex: 1e4,
        display: "block",
        top: this.top + "px",
        left: this.left + "px",
        height: this.height + "px"
      }
    });
  }
};
var DropClue = DropClueVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/utils/data-operations.js
var __assign10 = function() {
  __assign10 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign10.apply(this, arguments);
};
var __spreadArray8 = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
function children(item, subItemsField, subItems) {
  var _a11;
  if (subItems) {
    return __assign10(__assign10({}, item), (_a11 = {}, _a11[subItemsField] = subItems.length ? __spreadArray8([], subItems, true) : void 0, _a11));
  } else {
    return item && item[subItemsField] ? __spreadArray8([], item[subItemsField], true) : [];
  }
}
function sortChildren(dataItem, sort, subItemsField) {
  var _a11;
  if (dataItem[subItemsField]) {
    var item = children(dataItem, subItemsField, orderBy(children(dataItem, subItemsField), sort));
    var subItems = children(item, subItemsField).map(function(root) {
      return sortChildren(root, sort, subItemsField);
    });
    return __assign10(__assign10({}, item), (_a11 = {}, _a11[subItemsField] = subItems, _a11));
  }
  return dataItem;
}
function orderBy2(data16, descriptors, subItemsField) {
  var sorted = orderBy(data16, descriptors);
  sorted = sorted.map(function(dataItem) {
    return sortChildren(dataItem, descriptors, subItemsField);
  });
  return sorted;
}
function filterChildren(dataItem, filters, subItemsField) {
  var subItems = children(dataItem, subItemsField);
  if (subItems && subItems.length) {
    subItems = subItems.map(function(item) {
      return filterChildren(item, filters, subItemsField);
    });
    var hasChildrenFilter = { operator: function(item) {
      return Boolean((item[subItemsField] || []).length);
    } };
    var filter = {
      filters: [
        { filters, logic: "and" },
        hasChildrenFilter
      ],
      logic: "or"
    };
    var filtered = filterBy(subItems, filter);
    return children(dataItem, subItemsField, filtered);
  }
  return dataItem;
}
function filterBy2(data16, descriptors, subItemsField) {
  var _a11;
  var filtered = (_a11 = {}, _a11[subItemsField] = __spreadArray8([], data16, true), _a11);
  filtered = filterChildren(filtered, descriptors, subItemsField);
  return filtered[subItemsField] || [];
}

// node_modules/@progress/kendo-vue-data-tools/dist/es/utils/group-operations.js
var GROUP_ID_FIELD = "groupId";
var GROUP_SUBITEMS_COLLECTION = "items";
var setGroupId = function(group, depth, parentValue) {
  if (group.items) {
    group[GROUP_ID_FIELD] = "".concat(parentValue).concat(parentValue && "_").concat(group.value).concat(group.field);
    if (depth > 1) {
      group.items.forEach(function(item) {
        return setGroupId(item, depth - 1, group[GROUP_ID_FIELD]);
      });
    }
  }
};
var setGroupIds = function(options) {
  var group = options.group;
  if (group && group.length && options.data) {
    return options.data.forEach(function(item) {
      return setGroupId(item, group.length, "");
    });
  }
};
var getGroupIds = function(options) {
  var groupIds = [];
  mapTree(options.data, GROUP_SUBITEMS_COLLECTION, function(item) {
    if (item[GROUP_ID_FIELD]) {
      groupIds.push(item[GROUP_ID_FIELD]);
    }
  });
  return groupIds;
};
var setExpandedState = function(options) {
  return mapTree(options.data, GROUP_SUBITEMS_COLLECTION, function(item) {
    return extendDataItem(item, GROUP_SUBITEMS_COLLECTION, {
      expanded: !options.collapsedIds.some(function(groupId) {
        return groupId === item[GROUP_ID_FIELD];
      })
    });
  });
};

// node_modules/@progress/kendo-vue-data-tools/dist/es/pager/PagerNumericButtons.js
var allVue49 = vue_runtime_esm_bundler_exports;
var gh49 = allVue49.h;
var isV349 = allVue49.version && allVue49.version[0] === "3";
var PagerNumericButtonsVue2 = {
  name: "KendoNumericButtons",
  props: {
    buttonCount: Number,
    totalPages: Number,
    currentPage: Number,
    size: String,
    responsiveSize: String
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  computed: {
    start: {
      get: function get15() {
        var page = this.$props.currentPage;
        var buttonCount = this.$props.buttonCount;
        if (page > buttonCount) {
          var reminder = page % buttonCount;
          return reminder === 0 ? page - buttonCount + 1 : page - reminder + 1;
        }
        return 1;
      }
    },
    end: {
      get: function get16() {
        return Math.min(this.start + this.$props.buttonCount - 1, this.$props.totalPages);
      }
    },
    dropdownClass: function dropdownClass() {
      var _a11;
      var size = this.$props.size;
      return _a11 = {
        "k-picker": true,
        "k-dropdown-list": true,
        "k-dropdown": true,
        "k-rounded-md": true,
        "k-picker-solid": true
      }, _a11["k-picker-".concat(kendoThemeMaps.sizeMap[size] || size)] = size, _a11;
    }
  },
  methods: {
    click: function click(e, page) {
      e.preventDefault();
      this.$emit("pagechange", page, e);
    },
    ddlChange: function ddlChange(event2) {
      this.$emit("pagechange", parseInt(event2.target.value, 10), event2);
    }
  },
  // @ts-ignore
  setup: !isV349 ? void 0 : function() {
    var v3 = !!isV349;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render40(createElement) {
    var _this = this;
    var h = gh49 || createElement;
    var localizationService = provideLocalizationService(this);
    var pagerSmallPageSelectoLabel = this.$props.messagesMap ? this.$props.messagesMap(pagerSmallPageSelectorAriaLabel) : {
      messageKey: pagerSmallPageSelectorAriaLabel,
      defaultMessage: messages[pagerSmallPageSelectorAriaLabel]
    };
    var prevDots = this.start > 1 && // @ts-ignore function children
    h(Button, {
      fillMode: "flat",
      attrs: this.v3 ? void 0 : {
        fillMode: "flat",
        themeColor: "primary",
        size: this.$props.size,
        rounded: null
      },
      themeColor: "primary",
      size: this.$props.size,
      rounded: null,
      onClick: function onClick2(e) {
        return _this.click(e, _this.start - 1);
      },
      on: this.v3 ? void 0 : {
        "click": function onClick2(e) {
          return _this.click(e, _this.start - 1);
        }
      }
    }, this.v3 ? function() {
      return ["..."];
    } : ["..."]);
    var postDots = this.end < this.$props.totalPages && // @ts-ignore function children
    h(Button, {
      fillMode: "flat",
      attrs: this.v3 ? void 0 : {
        fillMode: "flat",
        themeColor: "primary",
        size: this.$props.size,
        rounded: null
      },
      themeColor: "primary",
      size: this.$props.size,
      rounded: null,
      onClick: function onClick2(e) {
        return _this.click(e, _this.end + 1);
      },
      on: this.v3 ? void 0 : {
        "click": function onClick2(e) {
          return _this.click(e, _this.end + 1);
        }
      }
    }, this.v3 ? function() {
      return ["..."];
    } : ["..."]);
    var buttons = [];
    for (var idx = this.start; idx <= this.end; idx++) {
      buttons.push(idx);
    }
    var numerics = buttons.map(function(page) {
      var _this2 = this;
      return (
        // @ts-ignore function children
        h(Button, {
          key: page,
          "class": "k-link",
          onClick: function onClick2(e) {
            return _this2.click(e, page);
          },
          on: this.v3 ? void 0 : {
            "click": function onClick2(e) {
              return _this2.click(e, page);
            }
          },
          selected: this.$props.currentPage === page,
          attrs: this.v3 ? void 0 : {
            selected: this.$props.currentPage === page,
            fillMode: "flat",
            themeColor: "primary",
            size: this.$props.size,
            rounded: null,
            role: "button",
            title: "Page " + page,
            "aria-current": this.$props.currentPage === page ? true : void 0
          },
          fillMode: "flat",
          themeColor: "primary",
          size: this.$props.size,
          rounded: null,
          role: "button",
          title: "Page " + page,
          "aria-current": this.$props.currentPage === page ? true : void 0
        }, this.v3 ? function() {
          return [page];
        } : [page])
      );
    }, this);
    var dropdown = function dropdown2(currentButtons) {
      return h("select", {
        style: {
          width: "5em",
          margin: "0px 1em",
          display: this.$props.responsiveSize === "small" ? "inline-flex" : "none"
        },
        "class": this.dropdownClass,
        ariaLabel: localizationService.toLanguageString(pagerSmallPageSelectoLabel.messageKey, pagerSmallPageSelectoLabel.defaultMessage),
        attrs: this.v3 ? void 0 : {
          ariaLabel: localizationService.toLanguageString(pagerSmallPageSelectoLabel.messageKey, pagerSmallPageSelectoLabel.defaultMessage)
        },
        onChange: this.ddlChange,
        on: this.v3 ? void 0 : {
          "change": this.ddlChange
        }
      }, [currentButtons.map(function(cb) {
        return h("option", {
          value: this.v3 ? cb : null,
          domProps: this.v3 ? void 0 : {
            "value": cb,
            "selected": cb === this.$props.currentPage
          },
          selected: this.v3 ? cb === this.$props.currentPage : null
        }, [cb]);
      }, this)]);
    };
    return h("div", {
      "class": "k-pager-numbers-wrap"
    }, [h("div", {
      "class": "k-pager-numbers",
      style: {
        display: this.$props.responsiveSize !== "small" ? "" : "none"
      }
    }, [prevDots, numerics, postDots]), dropdown.call(this, buttons)]);
  }
};
var PagerNumericButtons = PagerNumericButtonsVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/pager/PagerInput.js
var allVue50 = vue_runtime_esm_bundler_exports;
var gh50 = allVue50.h;
var isV350 = allVue50.version && allVue50.version[0] === "3";
var inject21 = allVue50.inject;
var PagerInputVue2 = {
  name: "KendoPagerInput",
  props: {
    totalPages: Number,
    currentPage: Number,
    messagesMap: Function,
    size: String
  },
  inject: {
    kendoIntlService: {
      default: null
    },
    kendoLocalizationService: {
      default: null
    }
  },
  data: function data13() {
    return {
      currentText: void 0
    };
  },
  computed: {
    computedValue: function computedValue3() {
      return this.$props.currentPage !== void 0 ? this.$props.currentPage : this.currentText;
    }
  },
  methods: {
    changeHangler: function changeHangler(e) {
      this.currentText = e.target.value;
      if (this.currentText) {
        this.$emit("pagechange", this.currentText, e);
      }
    }
  },
  // @ts-ignore
  setup: !isV350 ? void 0 : function() {
    var v3 = !!isV350;
    var kendoIntlService = inject21("kendoIntlService", {});
    var kendoLocalizationService = inject21("kendoLocalizationService", {});
    return {
      v3,
      kendoIntlService,
      kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render41(createElement) {
    var h = gh50 || createElement;
    var intlService = provideIntlService(this);
    var localizationService = provideLocalizationService(this);
    var pageMessage = this.$props.messagesMap ? this.$props.messagesMap(pagerPage) : {
      messageKey: pagerPage,
      defaultMessage: messages[pagerPage]
    };
    var ofMessage = this.$props.messagesMap ? this.$props.messagesMap(pagerOf) : {
      messageKey: pagerOf,
      defaultMessage: messages[pagerOf]
    };
    var totalPagesMessage = this.$props.messagesMap ? this.$props.messagesMap(pagerTotalPages) : {
      messageKey: pagerTotalPages,
      defaultMessage: messages[pagerTotalPages]
    };
    var pageInputAriaLabel = this.$props.messagesMap ? this.$props.messagesMap(pagerPageInputAriaLabel) : {
      messageKey: pagerPageInputAriaLabel,
      defaultMessage: messages[pagerPageInputAriaLabel]
    };
    return h("span", {
      "class": "k-pager-input"
    }, [h("span", [localizationService.toLanguageString(pageMessage.messageKey, pageMessage.defaultMessage)]), h(NumericTextBox, {
      min: 1,
      attrs: this.v3 ? void 0 : {
        min: 1,
        value: this.computedValue,
        spinners: false,
        size: this.$props.size,
        ariaLabel: localizationService.toLanguageString(pageInputAriaLabel.messageKey, pageInputAriaLabel.defaultMessage)
      },
      value: this.computedValue,
      onChange: this.changeHangler,
      on: this.v3 ? void 0 : {
        "change": this.changeHangler
      },
      spinners: false,
      size: this.$props.size,
      ariaLabel: localizationService.toLanguageString(pageInputAriaLabel.messageKey, pageInputAriaLabel.defaultMessage)
    }), h("span", ["".concat(localizationService.toLanguageString(ofMessage.messageKey, ofMessage.defaultMessage), " ").concat(intlService.format(localizationService.toLanguageString(totalPagesMessage.messageKey, totalPagesMessage.defaultMessage), [this.$props.totalPages]))])]);
  }
};
var PagerInput = PagerInputVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/pager/PagerPageSizes.js
var allVue51 = vue_runtime_esm_bundler_exports;
var gh51 = allVue51.h;
var isV351 = allVue51.version && allVue51.version[0] === "3";
var inject22 = allVue51.inject;
var PagerPageSizesVue2 = {
  name: "KendoPagerPageSizes",
  props: {
    value: [String, Number],
    pageSize: Number,
    pageSizes: Array,
    size: String,
    messagesMap: Function
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  methods: {
    pageSizeChange: function pageSizeChange(e) {
      this.$emit("pagechange", {
        skip: 0,
        take: parseInt(e.target.value, 10)
      }, e);
    }
  },
  // @ts-ignore
  setup: !isV351 ? void 0 : function() {
    var v3 = !!isV351;
    var kendoLocalizationService = inject22("kendoLocalizationService", {});
    return {
      v3,
      kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render42(createElement) {
    var h = gh51 || createElement;
    var _a11 = this.$props, value2 = _a11.value, pageSizes = _a11.pageSizes, pageSize = _a11.pageSize;
    var ls = provideLocalizationService(this);
    var sizes = pageSizes.slice();
    if (value2 === void 0 && sizes.filter(function(s) {
      return s === pageSize;
    }).length === 0) {
      sizes.unshift(pageSize);
    }
    var itemPerPageMessage = this.$props.messagesMap ? this.$props.messagesMap(pagerItemPerPage) : {
      messageKey: pagerItemPerPage,
      defaultMessage: messages[pagerItemPerPage]
    };
    var pageSelectionMessage = this.$props.messagesMap ? this.$props.messagesMap(pagerPageSelection) : {
      messageKey: pagerPageSelection,
      defaultMessage: messages[pagerPageSelection]
    };
    return h("span", {
      "class": "k-pager-sizes k-label"
    }, [
      // @ts-ignore function children
      h(DropDownList, {
        value: value2 !== void 0 ? value2 : pageSize,
        attrs: this.v3 ? void 0 : {
          value: value2 !== void 0 ? value2 : pageSize,
          dataItems: sizes,
          size: this.$props.size,
          ariaLabel: ls.toLanguageString(pageSelectionMessage.messageKey, pageSelectionMessage.defaultMessage)
        },
        dataItems: sizes,
        size: this.$props.size,
        ariaLabel: ls.toLanguageString(pageSelectionMessage.messageKey, pageSelectionMessage.defaultMessage),
        onChange: this.pageSizeChange,
        on: this.v3 ? void 0 : {
          "change": this.pageSizeChange
        }
      }),
      ls.toLanguageString(itemPerPageMessage.messageKey, itemPerPageMessage.defaultMessage)
    ]);
  }
};
var PagerPageSizes = PagerPageSizesVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/pager/PagerInfo.js
var allVue52 = vue_runtime_esm_bundler_exports;
var gh52 = allVue52.h;
var isV352 = allVue52.version && allVue52.version[0] === "3";
var inject23 = allVue52.inject;
var PagerInfoVue2 = {
  name: "KendoPagerInfo",
  props: {
    totalPages: Number,
    currentPage: Number,
    skip: Number,
    messagesMap: Function
  },
  inject: {
    kendoLocalizationService: {
      default: null
    },
    kendoIntlService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV352 ? void 0 : function() {
    var v3 = !!isV352;
    var kendoIntlService = inject23("kendoIntlService", {});
    var kendoLocalizationService = inject23("kendoLocalizationService", {});
    return {
      v3,
      kendoIntlService,
      kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render43(createElement) {
    var h = gh52 || createElement;
    var intlService = provideIntlService(this);
    var localizationService = provideLocalizationService(this);
    var infoMessage = this.$props.messagesMap ? this.$props.messagesMap(pagerInfo) : {
      messageKey: pagerInfo,
      defaultMessage: messages[pagerInfo]
    };
    return h("span", {
      "class": "k-pager-info"
    }, [intlService.format(localizationService.toLanguageString(infoMessage.messageKey, infoMessage.defaultMessage), [Math.min(this.$props.skip + 1, this.$props.totalPages), Math.min(this.$props.skip + this.$props.currentPage, this.$props.totalPages), this.$props.totalPages])]);
  }
};
var PagerInfo = PagerInfoVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/pager/PagerNavigationButton.js
var allVue53 = vue_runtime_esm_bundler_exports;
var gh53 = allVue53.h;
var isV353 = allVue53.version && allVue53.version[0] === "3";
var PagerNavigationButtonVue2 = {
  name: "KendoPagerNavigationButton",
  props: {
    title: String,
    disabled: Boolean,
    icon: String,
    svgIcon: Object,
    page: Number,
    size: String
  },
  inject: {
    kendoLocalizationService: {
      default: null
    },
    kendoIntlService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !isV353 ? void 0 : function() {
    var v3 = !!isV353;
    return {
      v3
    };
  },
  methods: {
    changePage: function changePage(e) {
      e.preventDefault();
      this.$emit("pagechange", this.$props.page, e);
    }
  },
  // @ts-ignore
  render: function render44(createElement) {
    var h = gh53 || createElement;
    return h(Button, {
      fillMode: "flat",
      attrs: this.v3 ? void 0 : {
        fillMode: "flat",
        themeColor: "base",
        size: this.$props.size,
        rounded: null,
        ariaLabel: this.title,
        icon: getIconName(this.icon),
        svgIcon: this.svgIcon,
        title: this.title,
        disabled: this.disabled,
        role: "button"
      },
      themeColor: "base",
      size: this.$props.size,
      rounded: null,
      "class": "k-pager-nav",
      ariaLabel: this.title,
      icon: getIconName(this.icon),
      svgIcon: this.svgIcon,
      title: this.title,
      disabled: this.disabled,
      role: "button",
      onClick: this.changePage,
      on: this.v3 ? void 0 : {
        "click": this.changePage
      }
    });
  }
};
var PagerNavigationButton = PagerNavigationButtonVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/pager/Pager.js
var __assign11 = function() {
  __assign11 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign11.apply(this, arguments);
};
var allVue54 = vue_runtime_esm_bundler_exports;
var gh54 = allVue54.h;
var isV354 = allVue54.version && allVue54.version[0] === "3";
var inject24 = allVue54.inject;
var NUMBERS_CLASS = "k-pager-numbers-wrap";
var SIZES_CLASS = "k-pager-sizes";
var INFO_CLASS = "k-pager-info";
var PagerVue2 = {
  name: "KendoPager",
  props: {
    pageSizeValue: [String, Number],
    total: Number,
    skip: Number,
    take: Number,
    pageSize: Number,
    settings: [Object, Boolean],
    buttonCount: {
      type: Number,
      default: 10
    },
    info: {
      type: Boolean,
      default: true
    },
    type: {
      type: String,
      default: "numeric",
      validator: function validator8(value2) {
        return ["numeric", "input"].includes(value2);
      }
    },
    pageSizes: {
      type: Array
    },
    previousNext: Boolean,
    messagesMap: Function,
    responsive: {
      type: Boolean,
      default: true
    },
    size: {
      type: String,
      default: "medium",
      validator: function validator9(value2) {
        return [null, "small", "medium", "large"].includes(value2);
      }
    },
    pagerRender: [String, Function, Object],
    width: [Number, String],
    ariaControls: {
      type: String,
      default: void 0
    },
    onPagesizechange: Function
  },
  data: function data14() {
    return {
      currentRtl: false,
      itemsToFit: void 0,
      itemsWidths: void 0
    };
  },
  mounted: function mounted9() {
    if (canUseDOM && window.ResizeObserver) {
      this.observerResize = new window.ResizeObserver(this.onWindowResize);
      this.observerResize.observe(this.$el);
    }
    this.currentRtl = isRtl(this.$el);
    var childrenWidths = this.collectPagerChildrenWidths();
    this.itemsWidths = childrenWidths;
    this.onWindowResize();
  },
  destroyed: !!isV354 ? void 0 : function() {
    var _a11;
    if (((_a11 = this.document) === null || _a11 === void 0 ? void 0 : _a11.body) && this.observerResize) {
      this.observerResize.disconnect();
    }
  },
  // @ts-ignore
  unmounted: function unmounted() {
    var _a11;
    if (((_a11 = this.document) === null || _a11 === void 0 ? void 0 : _a11.body) && this.observerResize) {
      this.observerResize.disconnect();
    }
  },
  inject: {
    kendoLocalizationService: {
      default: null
    },
    kendoIntlService: {
      default: null
    }
  },
  computed: {
    wrapperClass: {
      get: function get17() {
        var _a11;
        var size = this.$props.size;
        return _a11 = {
          "k-pager": true
        }, _a11["k-pager-".concat(kendoThemeMaps.sizeMap[size] || size)] = size, _a11;
      }
    },
    totalPages: {
      get: function get18() {
        return Math.ceil((this.$props.total || 0) / this.currentTake);
      }
    },
    currentPage: {
      get: function get19() {
        return Math.floor((this.$props.skip || 0) / this.currentTake) + 1;
      }
    },
    currentTake: {
      get: function get20() {
        return this.$props.take || this.$props.pageSize;
      }
    },
    showPageSizes: function showPageSizes() {
      return this.itemsToFit.includes(this.pagerSizesIndex);
    },
    showInfo: function showInfo() {
      return this.itemsToFit.includes(this.pagerInfoIndex);
    }
  },
  methods: {
    changePage: function changePage2(page, e) {
      if (page > 0 && page <= this.totalPages) {
        this.$emit("pagechange", {
          skip: (page - 1) * this.currentTake,
          take: this.currentTake
        }, e);
      }
    },
    triggerPageChange: function triggerPageChange(state, event2) {
      var pagesizechange = hasListener.call(this, "pagesizechange");
      if (pagesizechange) {
        this.$emit("pagesizechange", state, event2);
      } else {
        this.$emit("pagechange", state, event2);
      }
    },
    onWindowResize: function onWindowResize() {
      var element3 = this.$el;
      if (!element3 || !this.$props.responsive || this.$props.settings.responsive === false) {
        return;
      }
      this.itemsToFit = this.fitChildrenInParent(element3, this.itemsWidths || []);
    },
    transformDimension: function transformDimension(initialValue) {
      return typeof initialValue === "string" ? initialValue.endsWith("px") ? initialValue : initialValue + "px" : initialValue + "px";
    },
    collectPagerChildrenWidths: function collectPagerChildrenWidths() {
      var _a11;
      var arrayChildren = Array.from(((_a11 = this.$el) === null || _a11 === void 0 ? void 0 : _a11.children) || []);
      var widths = arrayChildren.map(function(item) {
        if (item instanceof HTMLElement) {
          return {
            class: item.className,
            width: item.offsetWidth
          };
        }
        return 0;
      });
      return widths;
    },
    fitChildrenInParent: function fitChildrenInParent(parent, childrenWidths) {
      var fitItems = [];
      var elementsWidth = 0;
      var updatedWidths = childrenWidths;
      var parentWidth = parent.offsetWidth;
      var buffer = 20;
      for (var index = 0; index < childrenWidths.length; index++) {
        var padding = index === 0 ? 8 : 0;
        var parentChild = parent.children[index];
        var currentElementWidth = index === 0 ? childrenWidths[index].width : (parentChild === null || parentChild === void 0 ? void 0 : parentChild.offsetWidth) || childrenWidths[index].width;
        elementsWidth += currentElementWidth;
        if (elementsWidth < parentWidth - buffer - padding) {
          fitItems.push(childrenWidths[index].class);
        } else {
          updatedWidths[index].width = currentElementWidth;
        }
      }
      this.itemsWidths = updatedWidths;
      return fitItems;
    }
  },
  // @ts-ignore
  setup: !isV354 ? void 0 : function() {
    var v3 = !!isV354;
    var kendoIntlService = inject24("kendoIntlService", {});
    var kendoLocalizationService = inject24("kendoLocalizationService", {});
    return {
      v3,
      kendoIntlService,
      kendoLocalizationService
    };
  },
  // @ts-ignore 
  render: function render45(createElement) {
    var _a11, _b4;
    var h = gh54 || createElement;
    var _c3 = this.$props, skip = _c3.skip, take = _c3.take, total = _c3.total, pageSizes = _c3.pageSizes, buttonCount = _c3.buttonCount, messagesMap = _c3.messagesMap, info = _c3.info, type = _c3.type, previousNext = _c3.previousNext, pageSizeValue = _c3.pageSizeValue;
    var settings = __assign11({
      pageSizes,
      buttonCount,
      info,
      previousNext,
      type,
      skip,
      take,
      total,
      messagesMap,
      pageSizeValue
    }, this.$props.settings);
    var pagerRender = this.$props.pagerRender || this.$props.settings.pagerRender;
    var pagerRenderTemplate = pagerRender ? templateRendering.call(this, pagerRender, getListeners.call(this)) : null;
    var localizationService = provideLocalizationService(this);
    var firstPageMessage = messagesMap ? messagesMap(pagerFirstPage) : {
      messageKey: pagerFirstPage,
      defaultMessage: messages[pagerFirstPage]
    };
    var previousPageMessage = messagesMap ? messagesMap(pagerPreviousPage) : {
      messageKey: pagerPreviousPage,
      defaultMessage: messages[pagerPreviousPage]
    };
    var nextPageMessage = messagesMap ? messagesMap(pagerNextPage) : {
      messageKey: pagerNextPage,
      defaultMessage: messages[pagerNextPage]
    };
    var lastPageMessage = messagesMap ? messagesMap(pagerLastPage) : {
      messageKey: pagerLastPage,
      defaultMessage: messages[pagerLastPage]
    };
    var changer = settings.type === "numeric" ? (
      // @ts-ignore
      h(PagerNumericButtons, {
        responsiveSize: this.responsive && this.itemsToFit && this.itemsToFit.length < 2 ? "small" : "large",
        attrs: this.v3 ? void 0 : {
          responsiveSize: this.responsive && this.itemsToFit && this.itemsToFit.length < 2 ? "small" : "large",
          size: this.size,
          buttonCount: settings.buttonCount || 0,
          totalPages: this.totalPages,
          currentPage: this.currentPage
        },
        size: this.size,
        buttonCount: settings.buttonCount || 0,
        totalPages: this.totalPages,
        currentPage: this.currentPage,
        onPagechange: this.changePage,
        on: this.v3 ? void 0 : {
          "pagechange": this.changePage
        }
      })
    ) : (
      // @ts-ignore
      h(PagerInput, {
        currentPage: this.currentPage,
        attrs: this.v3 ? void 0 : {
          currentPage: this.currentPage,
          totalPages: this.totalPages,
          messagesMap,
          size: this.size
        },
        totalPages: this.totalPages,
        onPagechange: this.changePage,
        on: this.v3 ? void 0 : {
          "pagechange": this.changePage
        },
        messagesMap,
        size: this.size
      })
    );
    var first, prev, next, last;
    if (settings.previousNext) {
      first = // @ts-ignore function children
      h(PagerNavigationButton, {
        "class": "k-pager-first",
        size: this.size,
        attrs: this.v3 ? void 0 : {
          size: this.size,
          disabled: this.currentPage === 1,
          page: 1,
          title: localizationService.toLanguageString(firstPageMessage.messageKey, firstPageMessage.defaultMessage),
          icon: this.currentRtl ? "caret-alt-to-right" : "caret-alt-to-left",
          svgIcon: this.currentRtl ? caretAltToRightIcon : caretAltToLeftIcon
        },
        disabled: this.currentPage === 1,
        page: 1,
        title: localizationService.toLanguageString(firstPageMessage.messageKey, firstPageMessage.defaultMessage),
        icon: this.currentRtl ? "caret-alt-to-right" : "caret-alt-to-left",
        svgIcon: this.currentRtl ? caretAltToRightIcon : caretAltToLeftIcon,
        onPagechange: this.changePage,
        on: this.v3 ? void 0 : {
          "pagechange": this.changePage
        }
      });
      prev = // @ts-ignore function children
      h(PagerNavigationButton, {
        disabled: this.currentPage === 1,
        attrs: this.v3 ? void 0 : {
          disabled: this.currentPage === 1,
          size: this.size,
          page: this.currentPage - 1,
          title: localizationService.toLanguageString(previousPageMessage.messageKey, previousPageMessage.defaultMessage),
          icon: this.currentRtl ? "caret-alt-right" : "caret-alt-left",
          svgIcon: this.currentRtl ? caretAltRightIcon : caretAltLeftIcon
        },
        size: this.size,
        page: this.currentPage - 1,
        title: localizationService.toLanguageString(previousPageMessage.messageKey, previousPageMessage.defaultMessage),
        icon: this.currentRtl ? "caret-alt-right" : "caret-alt-left",
        svgIcon: this.currentRtl ? caretAltRightIcon : caretAltLeftIcon,
        onPagechange: this.changePage,
        on: this.v3 ? void 0 : {
          "pagechange": this.changePage
        }
      });
      next = // @ts-ignore function children
      h(PagerNavigationButton, {
        disabled: this.currentPage === this.totalPages,
        attrs: this.v3 ? void 0 : {
          disabled: this.currentPage === this.totalPages,
          size: this.size,
          page: this.currentPage + 1,
          title: localizationService.toLanguageString(nextPageMessage.messageKey, nextPageMessage.defaultMessage),
          icon: this.currentRtl ? "caret-alt-left" : "caret-alt-right",
          svgIcon: this.currentRtl ? caretAltLeftIcon : caretAltRightIcon
        },
        size: this.size,
        page: this.currentPage + 1,
        title: localizationService.toLanguageString(nextPageMessage.messageKey, nextPageMessage.defaultMessage),
        icon: this.currentRtl ? "caret-alt-left" : "caret-alt-right",
        svgIcon: this.currentRtl ? caretAltLeftIcon : caretAltRightIcon,
        onPagechange: this.changePage,
        on: this.v3 ? void 0 : {
          "pagechange": this.changePage
        }
      });
      last = // @ts-ignore function children
      h(PagerNavigationButton, {
        "class": "k-pager-last",
        disabled: this.currentPage === this.totalPages,
        attrs: this.v3 ? void 0 : {
          disabled: this.currentPage === this.totalPages,
          size: this.size,
          page: this.totalPages,
          title: localizationService.toLanguageString(lastPageMessage.messageKey, lastPageMessage.defaultMessage),
          icon: this.currentRtl ? "caret-alt-to-left" : "caret-alt-to-right",
          svgIcon: this.currentRtl ? caretAltToLeftIcon : caretAltToRightIcon
        },
        size: this.size,
        page: this.totalPages,
        title: localizationService.toLanguageString(lastPageMessage.messageKey, lastPageMessage.defaultMessage),
        icon: this.currentRtl ? "caret-alt-to-left" : "caret-alt-to-right",
        svgIcon: this.currentRtl ? caretAltToLeftIcon : caretAltToRightIcon,
        onPagechange: this.changePage,
        on: this.v3 ? void 0 : {
          "pagechange": this.changePage
        }
      });
    }
    var renderPageSizes = settings.pageSizes && // @ts-ignore function children
    h(PagerPageSizes, {
      onPagechange: this.triggerPageChange,
      on: this.v3 ? void 0 : {
        "pagechange": this.triggerPageChange
      },
      pageSize: this.currentTake,
      attrs: this.v3 ? void 0 : {
        pageSize: this.currentTake,
        pageSizes: settings.pageSizes,
        value: settings.pageSizeValue,
        messagesMap,
        size: this.size
      },
      pageSizes: settings.pageSizes,
      value: settings.pageSizeValue,
      messagesMap,
      size: this.size
    });
    var infoElement = settings.info && // @ts-ignore function children
    h(PagerInfo, {
      totalPages: this.$props.total,
      attrs: this.v3 ? void 0 : {
        totalPages: this.$props.total,
        skip: this.$props.skip,
        currentPage: this.currentTake,
        messagesMap
      },
      skip: this.$props.skip,
      currentPage: this.currentTake,
      messagesMap
    });
    var pagerContent = getTemplate.call(this, {
      h,
      template: pagerRenderTemplate,
      additionalProps: __assign11(__assign11({}, this.$props), {
        current: this.currentPage
      }),
      additionalListeners: {
        pagechange: this.triggerPageChange
      }
    });
    var width = this.transformDimension(this.$props.width);
    return pagerRender ? h("div", {
      "class": this.wrapperClass,
      style: {
        width
      },
      role: "application",
      attrs: this.v3 ? void 0 : {
        role: "application",
        "aria-roledescription": "pager"
      },
      "aria-roledescription": "pager"
    }, [pagerContent]) : h("div", {
      "class": this.wrapperClass,
      style: {
        width
      },
      role: "application",
      attrs: this.v3 ? void 0 : {
        role: "application",
        "aria-roledescription": "pager",
        "aria-keyshortcuts": "Enter ArrowRight ArrowLeft",
        "aria-label": "Page navigation, page " + this.currentPage + " of " + this.totalPages,
        "aria-controls": this.$props.ariaControls
      },
      "aria-roledescription": "pager",
      "aria-keyshortcuts": "Enter ArrowRight ArrowLeft",
      "aria-label": "Page navigation, page " + this.currentPage + " of " + this.totalPages,
      "aria-controls": this.$props.ariaControls
    }, [h("div", {
      "class": NUMBERS_CLASS
    }, [first, prev, changer, next, last]), !(this.responsive && this.itemsToFit && !((_a11 = this.itemsToFit) === null || _a11 === void 0 ? void 0 : _a11.find(function(it) {
      return it.indexOf(SIZES_CLASS) !== -1;
    }))) && renderPageSizes, !(this.responsive && this.itemsToFit && !((_b4 = this.itemsToFit) === null || _b4 === void 0 ? void 0 : _b4.find(function(it) {
      return it.indexOf(INFO_CLASS) !== -1;
    }))) && infoElement]);
  }
};
var Pager = PagerVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/pager/GridPagerSettings.js
var normalizeSettings = function(_a11) {
  var _b4 = _a11.buttonCount, buttonCount = _b4 === void 0 ? 10 : _b4, _c3 = _a11.info, info = _c3 === void 0 ? true : _c3, _d = _a11.type, type = _d === void 0 ? "numeric" : _d, _e = _a11.pageSizes, pageSizes = _e === void 0 ? false : _e, _f = _a11.previousNext, previousNext = _f === void 0 ? true : _f, _g = _a11.responsive, responsive = _g === void 0 ? true : _g, _h = _a11.pagerRender, pagerRender = _h === void 0 ? void 0 : _h, _j = _a11.pageSizeValue, pageSizeValue = _j === void 0 ? void 0 : _j;
  return {
    buttonCount,
    info,
    pageSizes: pageSizes === true ? [5, 10, 20] : pageSizes,
    previousNext,
    type,
    responsive,
    pagerRender,
    pageSizeValue
  };
};
var normalize4 = function(settings) {
  return normalizeSettings(settings === true ? {} : settings);
};

// node_modules/@progress/kendo-vue-data-tools/dist/es/navigation/TableKeyboardNavigation.js
var __spreadArray9 = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var allVue55 = vue_runtime_esm_bundler_exports;
var gh55 = allVue55.h;
var isV355 = allVue55.version && allVue55.version[0] === "3";
var ref8 = allVue55.ref;
var provide = allVue55.provide;
var TableKeyboardNavigationProviderVue2 = {
  name: "KendoTableKeyboardNavigationProvider",
  props: {
    navigatable: {
      type: Boolean,
      default: false
    },
    id: String
  },
  data: function data15() {
    return {
      scope: void 0,
      kbContext: void 0,
      navigation: void 0
    };
  },
  // watch: {
  //     language: function (this: TableKeyboardNavigationProviderAll, newLanguage: string) {
  //         this.$data.kendoLocalizationService.language = newLanguage ;
  //     }
  // },
  // @ts-ignore
  setup: !isV355 ? void 0 : function() {
    var v3 = !!isV355;
    return {
      v3
    };
  },
  provide: function provide2() {
    return {
      getKeyboardNavigationAttributes: this.getKeyboardNavigationAttributes,
      onNavMount: this.onComponentDidMount,
      onGetSnapshotBeforeUpdate: this.onGetSnapshotBeforeUpdate,
      onComponentDidUpdate: this.onComponentDidUpdate,
      onNavFocus: this.onFocus,
      onNavKeyDown: this.onKeyDown,
      generateMatrix: this.generateMatrix,
      kbContext: this.kbContext,
      navigation: this.navigation
    };
  },
  created: function created10() {
    var _a11 = this.$props, navigatable = _a11.navigatable, id = _a11.id;
    if (navigatable) {
      this.kbContext = {
        activeId: "",
        level: 0
      };
      this.navigation = {
        activeElementIsFocused: false,
        prevNavigationIndexes: void 0,
        idPrefix: id || guid(),
        navigationMatrix: [],
        lastHeaderIndex: -1
      };
    }
  },
  methods: {
    getKeyboardNavigationAttributes: function getKeyboardNavigationAttributes(elementId) {
      var _a11;
      if (!elementId || this.$props.navigatable === false) {
        return {};
      }
      return _a11 = {
        tabIndex: this.kbContext.activeId && this.kbContext.activeId === elementId ? 0 : -1
      }, _a11[KEYBOARD_NAV_DATA_LEVEL] = this.kbContext.level, _a11[KEYBOARD_NAV_DATA_ID] = elementId, _a11;
    },
    onComponentDidMount: function onComponentDidMount(options) {
      var _a11 = options.scope, scope = _a11 === void 0 ? this.scope : _a11;
      if (this.kbContext && this.navigation && scope) {
        this.scope = scope;
        this.generateMatrix(options);
        var firstId = this.navigation.navigationMatrix[0][0];
        var firstIdElement = tableKeyboardNavigationTools.getActiveElement(scope, firstId);
        if (firstId && firstIdElement) {
          this.kbContext.activeId = firstId;
          firstIdElement.setAttribute("tabIndex", "0");
        }
      }
    },
    onGetSnapshotBeforeUpdate: function onGetSnapshotBeforeUpdate(options) {
      var _a11 = options.kbContext, kbContext = _a11 === void 0 ? this.kbContext : _a11, _b4 = options.navigation, navigation = _b4 === void 0 ? this.navigation : _b4, document2 = options.document;
      if (kbContext && navigation && document2) {
        var activeElement = document2.activeElement;
        var activeId = tableKeyboardNavigationTools.getNavigatableId(activeElement);
        if (activeId && activeId === kbContext.activeId) {
          navigation.activeElementIsFocused = true;
        }
      }
    },
    onComponentDidUpdate: function onComponentDidUpdate(options) {
      var scope = options.scope;
      this.generateMatrix(options);
      if (this.kbContext && this.navigation && scope) {
        var activeElement = tableKeyboardNavigationTools.getActiveElement(scope, this.kbContext.activeId);
        if (!activeElement) {
          var firstId = this.navigation.navigationMatrix[0][0];
          var firstIdElement = tableKeyboardNavigationTools.getActiveElement(scope, firstId);
          if (firstId && firstIdElement) {
            this.kbContext.activeId = firstId;
            firstIdElement.setAttribute("tabIndex", "0");
            if (this.navigation.activeElementIsFocused) {
              firstIdElement.focus();
            }
          }
        }
        this.navigation.activeElementIsFocused = false;
      }
    },
    onFocus: function onFocus(event2) {
      var kbContext = this.kbContext;
      if (event2.defaultPrevented) {
        return;
      }
      if (!kbContext) {
        return;
      }
      var focusedElement = event2.target;
      var activeId = tableKeyboardNavigationTools.getNavigatableId(focusedElement);
      if (activeId && activeId !== kbContext.activeId) {
        var scope = tableKeyboardNavigationTools.getClosestScope(focusedElement);
        if (!scope) {
          return;
        }
        var prevElement = tableKeyboardNavigationTools.getActiveElement(scope, kbContext.activeId);
        if (prevElement) {
          prevElement.setAttribute("tabIndex", "-1");
        }
        focusedElement.setAttribute("tabIndex", "0");
        kbContext.activeId = activeId;
      }
    },
    onKeyDown: function onKeyDown4(event2, options) {
      var _a11 = options.kbContext, kbContext = _a11 === void 0 ? this.kbContext : _a11, _b4 = options.navigation, navigation = _b4 === void 0 ? this.navigation : _b4, onNavigationAction = options.onNavigationAction;
      if (event2.defaultPrevented) {
        return;
      }
      if (!kbContext || !navigation) {
        return;
      }
      if (event2.keyCode === Keys.esc) {
        var elementForFocus = tableKeyboardNavigationTools.getClosestNavigatableElement(event2.target);
        tableKeyboardNavigationTools.focusElement({
          elementForFocus,
          event: event2,
          kbContext
        });
        return;
      }
      var element3 = event2.target;
      var elementId = tableKeyboardNavigationTools.getNavigatableId(element3);
      var dataLevel = tableKeyboardNavigationTools.getNavigatableLevel(element3);
      var scope = tableKeyboardNavigationTools.getClosestScope(element3);
      var matrix = navigation.navigationMatrix;
      if (dataLevel !== void 0 && scope) {
        if (event2.keyCode === Keys.enter) {
          var navigatableElement = tableKeyboardNavigationTools.getNavigatableElement(element3, {
            level: dataLevel + 1
          });
          if (navigatableElement) {
            tableKeyboardNavigationTools.focusElement({
              elementForFocus: navigatableElement,
              event: event2,
              kbContext,
              prevElement: element3
            });
            return;
          } else {
            var elementForFocus = tableKeyboardNavigationTools.getFocusableElements(element3)[0];
            tableKeyboardNavigationTools.focusElement({
              elementForFocus,
              event: event2,
              kbContext,
              prevElement: element3
            });
            return;
          }
        }
        if (event2.keyCode === Keys.up || event2.keyCode === Keys.down || event2.keyCode === Keys.left || event2.keyCode === Keys.right) {
          var isReverse = event2.keyCode === Keys.up || event2.keyCode === Keys.left;
          var isVertical = event2.keyCode === Keys.up || event2.keyCode === Keys.down;
          var currentIdIndexes = void 0;
          if (navigation && navigation.prevNavigationIndexes) {
            var _c3 = navigation.prevNavigationIndexes, rowIndex = _c3[0], cellIndex = _c3[1];
            if (matrix[rowIndex][cellIndex] === elementId) {
              currentIdIndexes = navigation.prevNavigationIndexes;
            } else {
              currentIdIndexes = findId(matrix, elementId);
            }
          } else {
            currentIdIndexes = findId(matrix, elementId);
          }
          if (currentIdIndexes) {
            var rowIndex = currentIdIndexes[0], cellIndex = currentIdIndexes[1];
            var _d = isVertical ? findNextIdByRowIndex(rowIndex, cellIndex, elementId, matrix, isReverse) : findNextIdByCellIndex(rowIndex, cellIndex, elementId, matrix, isReverse), idForFocus = _d[0], currentIndexes = _d[1];
            if (idForFocus) {
              var elementForFocus = tableKeyboardNavigationTools.getActiveElement(scope, idForFocus);
              tableKeyboardNavigationTools.focusElement({
                elementForFocus,
                event: event2,
                kbContext,
                prevElement: element3
              });
              navigation.prevNavigationIndexes = currentIndexes;
              if (onNavigationAction) {
                onNavigationAction({
                  focusElement: elementForFocus,
                  event: event2
                });
              }
            }
          }
        }
      }
    },
    generateMatrix: function generateMatrix(options) {
      var _a11 = options.navigation, navigation = _a11 === void 0 ? this.navigation : _a11, scope = options.scope;
      if (!navigation || !scope) {
        return;
      }
      var matrix = [];
      var thead = getHeaderElement(scope);
      var tbody = getBodyElement(scope);
      if (!thead || !tbody) {
        return;
      }
      var headerRows = Array.from(thead.children);
      var bodyRows = Array.from(tbody.children);
      __spreadArray9(__spreadArray9([], headerRows, true), bodyRows, true).forEach(function(row, rowIndex) {
        Array.from(row.children).forEach(function(cell) {
          var cellId = getNavigatableId(cell);
          if (!cellId) {
            return;
          }
          var rowSpan = cell.rowSpan || 1;
          var cellSpan = cell.colSpan || 1;
          var cellIndex;
          for (var depth = rowIndex, maxDepth = rowIndex + rowSpan; depth < maxDepth; depth++) {
            if (!matrix[depth]) {
              matrix[depth] = [];
            }
            if (cellIndex === void 0) {
              var freeSlotIndex = matrix[depth].findIndex(function(mi) {
                return !mi;
              });
              cellIndex = freeSlotIndex > -1 ? freeSlotIndex : matrix[depth].length;
            }
            matrix[depth][cellIndex] = cellId || "";
          }
          for (var depth = cellIndex + 1, maxDepth = cellIndex + cellSpan; depth < maxDepth; depth++) {
            matrix[rowIndex][depth] = cellId || "";
          }
        });
      });
      navigation.navigationMatrix = matrix.filter(function(row) {
        return !!row;
      });
      navigation.lastHeaderIndex = headerRows.length - 1;
    }
  },
  /**
   * @hidden
   */
  // @ts-ignore
  render: function render46(createElement) {
    var h = gh55 || createElement;
    var defaultSlot = getDefaultSlots(this);
    return defaultSlot[0];
  }
};
var TableKeyboardNavigationProvider = TableKeyboardNavigationProviderVue2;

// node_modules/@progress/kendo-vue-data-tools/dist/es/selection/constants.js
var TABLE_ROW_INDEX_ATTRIBUTE = "data-grid-row-index";
var TABLE_COL_INDEX_ATTRIBUTE = "data-grid-col-index";
var TABLE_PREVENT_SELECTION_ELEMENT = "data-prevent-selection";

// node_modules/@progress/kendo-vue-data-tools/dist/es/selection/utils.js
var __assign12 = function() {
  __assign12 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign12.apply(this, arguments);
};
var __spreadArray10 = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var GROUP_SUBITEMS_COLLECTION2 = "items";
var LAST_SELECTION_STATE = {};
var getCellSelection = function(currentSelection, selectedColumn) {
  if (!currentSelection || Array.isArray(currentSelection) && currentSelection.length === 0) {
    return [selectedColumn];
  } else {
    var foundIndex = currentSelection.findIndex(function(columnIndex) {
      return columnIndex === selectedColumn;
    });
    if (foundIndex > -1) {
      return currentSelection.filter(function(columnIndex) {
        return columnIndex === selectedColumn;
      });
    } else {
      return __spreadArray10(__spreadArray10([], currentSelection, true), [selectedColumn], false);
    }
  }
};
var closestTagName = function(target, tagName) {
  var currentTarget = target;
  while (currentTarget) {
    if (currentTarget.tagName === tagName) {
      return currentTarget;
    } else if (currentTarget.tagName === "TABLE") {
      return null;
    }
    currentTarget = currentTarget.parentElement;
  }
  return null;
};
var getRowIndex = function(element3) {
  if (!element3) {
    return;
  }
  var rowIndex = element3.getAttribute(TABLE_ROW_INDEX_ATTRIBUTE);
  return rowIndex ? parseInt(rowIndex, 10) : void 0;
};
var getColumnIndex = function(element3) {
  if (!element3) {
    return;
  }
  var colIndex = element3.getAttribute(TABLE_COL_INDEX_ATTRIBUTE);
  return colIndex ? parseInt(colIndex, 10) : void 0;
};
var setSelectedState = function(options) {
  var subItemsField = options.subItemsField || GROUP_SUBITEMS_COLLECTION2;
  return mapTree(options.data, subItemsField, function(item) {
    var _a11;
    return extendDataItem(item, subItemsField, (_a11 = {}, _a11[options.selectedField] = options.selectedState[item[options.dataItemKey]], _a11));
  });
};
var getSelectedStateFromKeyDown = function(options) {
  var dataItemKey = options.dataItemKey, selectedState = options.selectedState;
  var _a11 = options.event, event2 = _a11.event, dataItems = _a11.dataItems, componentId = _a11.componentId, mode = _a11.mode, cell = _a11.cell, selectedField = _a11.selectedField;
  var target = event2.target, ctrlKey = event2.ctrlKey, metaKey = event2.metaKey, altKey = event2.altKey, shiftKey = event2.shiftKey;
  if (event2.isDefaultPrevented() || event2.keyCode !== Keys.enter) {
    return selectedState;
  }
  var tdElement = closestTagName(target, "TD");
  var trElement = closestTagName(target, "TR");
  var colIndex = getColumnIndex(tdElement);
  var rowIndex = getRowIndex(trElement);
  var selectionState = {};
  if (tdElement && trElement && rowIndex !== void 0 && colIndex !== void 0) {
    selectionState = getSelectedState({
      selectedState,
      dataItemKey,
      event: {
        ctrlKey,
        metaKey,
        altKey,
        shiftKey,
        dataItems,
        cell,
        mode,
        selectedField,
        componentId,
        startColIndex: colIndex,
        endColIndex: colIndex,
        startRowIndex: rowIndex,
        endRowIndex: rowIndex,
        isDrag: false,
        event: event2,
        target: event2.target,
        dataItem: null
      }
    });
  }
  return selectionState;
};
var getSelectedState = function(options) {
  var event2 = options.event, dataItemKey = options.dataItemKey, prevSelectedState = options.selectedState;
  var dataItems = event2.dataItems, startRowIndex = event2.startRowIndex, endRowIndex = event2.endRowIndex, startColIndex = event2.startColIndex, endColIndex = event2.endColIndex, cell = event2.cell, isDrag = event2.isDrag, ctrlKey = event2.ctrlKey, shiftKey = event2.shiftKey, metaKey = event2.metaKey, componentId = event2.componentId, mode = event2.mode, dataItem = event2.dataItem;
  var selectionState = {};
  var isInputEvent = dataItem !== null;
  if (mode === "single") {
    var currentDataItem = dataItems.slice(startRowIndex, startRowIndex + 1)[0];
    var itemId = currentDataItem[dataItemKey];
    LAST_SELECTION_STATE[componentId] = {
      rowIndex: startRowIndex,
      colIndex: startColIndex
    };
    selectionState[itemId] = cell ? [startColIndex] : true;
  } else if (isDrag || !shiftKey && !ctrlKey && !metaKey && !isInputEvent) {
    if (!isDrag) {
      LAST_SELECTION_STATE[componentId] = {
        rowIndex: startRowIndex,
        colIndex: startColIndex
      };
    }
    var selectedColumns_1 = [];
    for (var i = startColIndex; i <= endColIndex; i++) {
      selectedColumns_1.push(i);
    }
    var selectedDataItems = dataItems.slice(startRowIndex, endRowIndex + 1);
    selectedDataItems.forEach(function(currentItem) {
      var itemId2 = currentItem[dataItemKey];
      selectionState[itemId2] = cell ? __spreadArray10([], selectedColumns_1, true) : true;
    });
  } else {
    if (ctrlKey || metaKey || isInputEvent) {
      LAST_SELECTION_STATE[componentId] = {
        rowIndex: startRowIndex,
        colIndex: startColIndex
      };
      var selectedDataItems = dataItems.slice(startRowIndex, endRowIndex + 1);
      var currentDataItem = selectedDataItems[0];
      var itemId = currentDataItem[dataItemKey];
      selectionState = __assign12({}, prevSelectedState);
      selectionState[itemId] = cell && !isInputEvent ? getCellSelection(selectionState[itemId], startColIndex) : !selectionState[itemId];
    } else if (shiftKey) {
      var lastRowIndex = LAST_SELECTION_STATE[componentId] && LAST_SELECTION_STATE[componentId].rowIndex || 0;
      var lastColIndex = LAST_SELECTION_STATE[componentId] && LAST_SELECTION_STATE[componentId].colIndex || 0;
      var currentStartRowIndex = Math.min(lastRowIndex, startRowIndex, endRowIndex);
      var currentEndRowIndex = Math.max(lastRowIndex, startRowIndex, endRowIndex);
      var currentStarColIndex = Math.min(lastColIndex, startColIndex, endColIndex);
      var currentEndColIndex = Math.max(lastColIndex, startColIndex, endColIndex);
      var selectedColumns_2 = [];
      for (var i = currentStarColIndex; i <= currentEndColIndex; i++) {
        selectedColumns_2.push(i);
      }
      var selectedDataItems = dataItems.slice(currentStartRowIndex, currentEndRowIndex + 1);
      selectedDataItems.forEach(function(currentItem) {
        var itemId2 = currentItem[dataItemKey];
        selectionState[itemId2] = cell ? __spreadArray10([], selectedColumns_2, true) : true;
      });
    }
  }
  return selectionState;
};
var HAS_RELATIVE_STACKING_CONTEXT = hasRelativeStackingContext();
var relativeContextElement = function(element3) {
  if (!element3 || !HAS_RELATIVE_STACKING_CONTEXT) {
    return null;
  }
  var node = element3.parentElement;
  while (node) {
    if (window.getComputedStyle(node).transform !== "none") {
      return node;
    }
    node = node.parentElement;
  }
};
var getOffset = function(offsetParent) {
  if (offsetParent && offsetParent.ownerDocument) {
    if (offsetParent !== offsetParent.ownerDocument.body) {
      var rect = offsetParent.getBoundingClientRect();
      return {
        left: rect.left - offsetParent.scrollLeft,
        top: rect.top - offsetParent.scrollTop
      };
    }
  }
  return { left: 0, top: 0 };
};
var getSelectionOptions = function(selectable) {
  var enabled = selectable ? typeof selectable.enabled === "boolean" ? selectable.enabled : true : false;
  var drag2 = selectable ? Boolean(selectable.drag) : false;
  var mode = selectable && selectable.mode ? selectable.mode : "multiple";
  var cell = Boolean(selectable && selectable.cell);
  return { enabled, drag: drag2, mode, cell };
};
export {
  BooleanFilter,
  BooleanFilterVue2,
  ColumnDefaultProps,
  ColumnResize,
  CommonDragLogic,
  DateFilter,
  DateFilterVue2,
  DragClue,
  DropClue,
  EnumFilter,
  EnumFilterVue2,
  Expression,
  ExpressionVue2,
  FOCUSABLE_ELEMENTS,
  Filter,
  FilterCell,
  FilterCellVue2,
  FilterRow,
  FilterRowVue2,
  FilterVue2,
  GroupFilter,
  GroupFilterVue2,
  Header2 as Header,
  HeaderCell,
  HeaderCellVue2,
  HeaderRow,
  HeaderRowVue2,
  HeaderSelectionCell,
  HeaderSelectionCellVue2,
  HeaderTdElement,
  HeaderTdElementVue2,
  HeaderThElement,
  HeaderThElementVue2,
  HeaderVue22 as HeaderVue2,
  IsUnaryFilter,
  KEYBOARD_NAV_DATA_BODY,
  KEYBOARD_NAV_DATA_HEADER,
  KEYBOARD_NAV_DATA_ID,
  KEYBOARD_NAV_DATA_LEVEL,
  KEYBOARD_NAV_DATA_SCOPE,
  KEYBOARD_NAV_DATA_ZONE,
  KEYBOARD_NAV_FILTER_COL_SUFFIX,
  NumericFilter,
  NumericFilterVue2,
  Operators,
  Pager,
  PagerInfo,
  PagerInfoVue2,
  PagerInput,
  PagerInputVue2,
  PagerNavigationButton,
  PagerNavigationButtonVue2,
  PagerNumericButtons,
  PagerNumericButtonsVue2,
  PagerPageSizes,
  PagerPageSizesVue2,
  PagerVue2,
  TABBABLE_ELEMENTS,
  TABLE_COL_INDEX_ATTRIBUTE,
  TABLE_PREVENT_SELECTION_ELEMENT,
  TABLE_ROW_INDEX_ATTRIBUTE,
  TableKeyboardNavigationProvider,
  TableKeyboardNavigationProviderVue2,
  TextFilter,
  TextFilterVue2,
  booleanFilterValues,
  cellBoolDropdownChange,
  cellInputChange,
  cellOperatorChange,
  closestTagName,
  defaultBooleanOperator,
  defaultHideSecondFilter,
  filterBy2 as filterBy,
  filterLogicList,
  getColumnIndex,
  getDefaultOperator,
  getFilterType,
  getGroupIds,
  getIndex,
  getOffset,
  getRowIndex,
  getSelectedState,
  getSelectedStateFromKeyDown,
  getSelectionOptions,
  isRtl2 as isRtl,
  mapColumns,
  normalize4 as normalize,
  operatorMap,
  operators,
  orderBy2 as orderBy,
  readColumns,
  relativeContextElement,
  setExpandedState,
  setGroupIds,
  setSelectedState,
  stringOperator,
  tableColumnsVirtualization,
  tableKeyboardNavigationBodyAttributes,
  tableKeyboardNavigationHeaderAttributes,
  tableKeyboardNavigationScopeAttributes,
  tableKeyboardNavigationTools,
  unaryOperator
};
//# sourceMappingURL=@progress_kendo-vue-data-tools.js.map
