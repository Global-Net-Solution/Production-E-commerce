import {
  canUseDOM,
  classNames,
  getDefaultSlots,
  getListeners,
  getRef,
  getTemplate,
  guid,
  setRef,
  templateRendering,
  validatePackage
} from "./chunk-JBHJSIM5.js";
import {
  vue_runtime_esm_bundler_exports
} from "./chunk-ON7STAJ4.js";
import "./chunk-PZ5AY32C.js";

// node_modules/@progress/kendo-vue-tooltip/dist/es/utils.js
var arrowWidth = 10;
var arrowHeight = 10;
var getLeftPosition = function getLeftPosition2(left, elementWidth, targetElement, anchorElement, position) {
  switch (position) {
    case "bottom":
      return anchorElement === "pointer" ? left - elementWidth / 2 : targetElement.left - elementWidth / 2 + targetElement.width / 2;
    case "left":
      return anchorElement === "pointer" ? left - elementWidth - arrowWidth : targetElement.left - elementWidth - arrowWidth;
    case "right":
      return anchorElement === "pointer" ? left + arrowWidth : targetElement.right + arrowWidth;
    case "top":
      return anchorElement === "pointer" ? left - elementWidth / 2 : targetElement.left - elementWidth / 2 + targetElement.width / 2;
    default:
      if (anchorElement === "pointer") {
        return canUseDOM && left < window.screen.availWidth / 2 ? left - arrowWidth : left - elementWidth + arrowWidth;
      } else {
        return canUseDOM && left < window.screen.availWidth / 2 ? targetElement.left : targetElement.right - elementWidth;
      }
  }
};
var getTopPosition = function getTopPosition2(top, targetElement, elementHeight, anchorElement, position) {
  switch (position) {
    case "bottom":
      return anchorElement === "pointer" ? top + arrowHeight : targetElement.bottom + arrowHeight;
    case "left":
      return anchorElement === "pointer" ? top - elementHeight / 2 : targetElement.top - elementHeight / 2 + targetElement.height / 2;
    case "right":
      return anchorElement === "pointer" ? top - elementHeight / 2 : targetElement.top - elementHeight / 2 + targetElement.height / 2;
    case "top":
      return anchorElement === "pointer" ? top - elementHeight - arrowHeight : targetElement.top - elementHeight - arrowHeight;
    default:
      if (anchorElement === "pointer") {
        return canUseDOM && top < window.innerHeight / 2 ? top + arrowWidth : top - elementHeight - arrowWidth;
      } else {
        return canUseDOM && top < window.innerHeight / 2 ? targetElement.bottom + arrowHeight : targetElement.top - elementHeight - arrowHeight;
      }
  }
};
var getDomRect = function getDomRect2(currentTarget) {
  if (currentTarget !== null) {
    return currentTarget.getBoundingClientRect();
  }
  return document.body.getBoundingClientRect();
};
var toolTipSelectors = ["k-tooltip-content", "k-animation-container", "k-tooltip", "k-tooltip-title", "k-tooltip k-tooltip-closable", "k-icon k-i-x", "k-svg-icon k-svg-i-x"];
var isTooltipElement = function isTooltipElement2(element) {
  if (element === null) {
    return false;
  }
  var node = element;
  while (node) {
    if (node !== null && node.classList && node.classList.contains("k-tooltip")) {
      return true;
    }
    node.parentNode !== null ? node = node.parentNode : node = false;
  }
  return toolTipSelectors.filter(function(t) {
    return t === element.className;
  }).length > 0;
};

// node_modules/@progress/kendo-vue-tooltip/dist/es/package-metadata.js
var packageMetadata = {
  name: "@progress/kendo-vue-tooltip",
  productName: "Kendo UI for Vue",
  productCodes: ["KENDOUIVUE", "KENDOUICOMPLETE"],
  publishDate: 1718173151,
  version: "",
  licensingDocsUrl: "https://www.telerik.com/kendo-vue-ui/my-license/?utm_medium=product&utm_source=kendovue&utm_campaign=kendo-ui-vue-purchase-license-keys-warning"
};

// node_modules/@progress/kendo-vue-tooltip/dist/es/Tooltip.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var allVue = vue_runtime_esm_bundler_exports;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === "3";
var DEFAULT_TOOLTIP_ZINDEX = 100;
var ARIAIDSUFFIX = "_tb_active";
var TooltipVue2 = {
  name: "KendoTooltip",
  inheritAttrs: false,
  props: {
    showCallout: {
      type: Boolean,
      default: true
    },
    setCalloutOnPositionAuto: {
      type: String,
      default: void 0
    },
    anchorElement: {
      type: String,
      default: "pointer",
      validator: function validator(value) {
        return ["pointer", "target"].includes(value);
      }
    },
    content: [String, Object, Function],
    filter: Function,
    openDelay: {
      type: Number,
      default: 400
    },
    open: {
      type: Boolean,
      default: void 0
    },
    position: {
      type: String,
      default: "auto",
      validator: function validator2(value) {
        return ["right", "left", "top", "bottom", "auto"].includes(value);
      }
    },
    updatePosition: {
      type: Function,
      default: void 0
    },
    updateInterval: Number,
    className: String,
    wrapperStyle: Object,
    tooltipClassName: String,
    tooltipStyle: Object,
    targetElement: {
      type: void 0
    },
    parentTitle: {
      type: Boolean,
      default: false
    }
  },
  data: function data() {
    return {
      top: 0,
      left: 0,
      currentTargetElement: null,
      currentOpen: false,
      title: ""
    };
  },
  computed: {
    wrapperClass: function wrapperClass() {
      var _a;
      return _a = {
        "k-animation-container": true,
        "k-animation-container-fixed": true,
        "k-animation-container-shown": true
      }, _a[this.$props.className] = true, _a;
    },
    computedTarget: function computedTarget() {
      return this.targetElement !== void 0 ? this.targetElement : this.currentTargetElement;
    },
    computedOpen: function computedOpen() {
      return this.open !== void 0 ? this.open : this.currentOpen;
    }
  },
  inject: {
    kCurrentZIndex: {
      default: null
    }
  },
  created: function created() {
    validatePackage(packageMetadata);
    this.top = 0;
    this.left = 0;
    this.willOpen = false;
  },
  mounted: function mounted() {
    this.element = getRef(this, "element");
    if (document) {
      document.body.addEventListener("mousemove", this.handleBodyMousemove);
    }
  },
  destroyed: !!isV3 ? void 0 : function() {
    this.destroyElement();
  },
  // @ts-ignore
  unmounted: function unmounted() {
    this.destroyElement();
  },
  updated: function updated() {
    if (this.$props.open && this.$props.targetElement) {
      this.showToolTip({
        target: this.$props.targetElement
      });
    }
    this.element = getRef(this, "element");
    if (!this.element) {
      return;
    }
    this.resetPosition();
    if (this.computedTarget) {
      var appendToElement = this.$props.appendTo ? this.$props.appendTo : this.computedTarget.ownerDocument.body;
      if (this.element.parentElement !== appendToElement) {
        this.computedTarget.ownerDocument.body.append(this.element);
      }
    }
    this.callout = this.v3 ? this.calloutRef : this.$refs.callout;
    if (!this.callout) {
      return;
    }
    this.callout.className = this.calloutClassName();
    if (this.$props.position === "auto" && canUseDOM) {
      this.left < window.screen.availWidth / 2 ? this.callout.style.left = this.$props.setCalloutOnPositionAuto || "25%" : this.callout.style.left = this.$props.setCalloutOnPositionAuto || "75%";
    }
  },
  // @ts-ignore
  setup: !isV3 ? void 0 : function() {
    var v3 = !!isV3;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultSlot = getDefaultSlots(this);
    var currentZIndex = this.getCurrentZIndex();
    var content = this.$props.content ? templateRendering.call(this, this.$props.content, getListeners.call(this)) : void 0;
    var contentDefaultRendering = this.title;
    var ariaId = guid() + ARIAIDSUFFIX;
    if (this.computedTarget) {
      if (this.computedTarget.hasAttribute("id")) {
        ariaId = this.computedTarget.getAttribute("id") + ARIAIDSUFFIX;
      }
      this.computedTarget.setAttribute("aria-describedby", ariaId);
    }
    var contentRendering = getTemplate.call(this, {
      h,
      template: content,
      defaultRendering: contentDefaultRendering,
      additionalProps: {
        title: this.title,
        target: this.computedTarget
      }
    });
    var innerToolTip = this.computedOpen && h("div", {
      "class": classNames("k-tooltip", this.$props.tooltipClassName),
      role: "tooltip",
      attrs: this.v3 ? void 0 : {
        role: "tooltip",
        id: ariaId
      },
      id: ariaId,
      style: __assign({
        position: "relative"
      }, this.$props.tooltipStyle)
    }, [h("div", {
      "class": "k-tooltip-content"
    }, [contentRendering]), this.$props.showCallout && h("div", {
      ref: setRef(this, "callout")
    })]);
    var tooltip = this.computedTarget && this.title && this.computedTarget.ownerDocument && h("div", {
      ref: setRef(this, "element"),
      "class": this.wrapperClass,
      style: __assign({
        zIndex: currentZIndex
      }, this.$props.wrapperStyle),
      tabindex: 0,
      attrs: this.v3 ? void 0 : {
        tabindex: 0
      },
      onMouseleave: this.handleTooltipMouseOut,
      on: this.v3 ? void 0 : {
        "mouseleave": this.handleTooltipMouseOut
      }
    }, [h("div", {
      "class": "k-child-animation-container"
    }, [innerToolTip])]);
    if (defaultSlot) {
      return h("div", {
        onMouseover: this.handleMouseOver,
        on: this.v3 ? void 0 : {
          "mouseover": this.handleMouseOver,
          "mouseout": this.handleMouseOut
        },
        onMouseout: this.handleMouseOut
      }, [tooltip, defaultSlot]);
    } else {
      return tooltip;
    }
  },
  methods: {
    destroyElement: function destroyElement() {
      clearTimeout(this.openTimeoutId);
      clearInterval(this.updateIntervalId);
      if (document) {
        document.body.removeEventListener("mousemove", this.handleBodyMousemove);
      }
      if (this.element) {
        this.element.remove();
      }
    },
    handleTooltipMouseOut: function handleTooltipMouseOut(event) {
      this.onClose(event);
    },
    handleMouseOut: function handleMouseOut(event) {
      var currentDocument = this.computedTarget ? this.computedTarget.ownerDocument : document;
      var element = currentDocument && currentDocument.elementFromPoint(event.clientX, event.clientY);
      this.willOpen = false;
      if (isTooltipElement(element) || this.computedTarget !== event.target) {
        return;
      }
      if (this.$props.open) {
        return;
      }
      clearInterval(this.updateIntervalId);
      this.onClose(event);
    },
    handleMouseOver: function handleMouseOver(event) {
      var target = event.target;
      if (!this.isVisible(target) || isTooltipElement(target) || target === this.computedTarget) {
        return;
      }
      this.showToolTip(event);
    },
    handleBodyMousemove: function handleBodyMousemove(event) {
      this.top = event.clientY;
      this.left = event.clientX;
    },
    onClose: function onClose(event) {
      this.$emit("close", {
        event,
        component: this
      });
      this.computedTarget.removeAttribute("aria-describedby");
      this.currentTargetElement = null;
      this.currentOpen = false;
      this.title = "";
    },
    showToolTip: function showToolTip(event) {
      var _this = this;
      clearTimeout(this.openTimeoutId);
      clearInterval(this.updateIntervalId);
      if (event.target.hasChildNodes()) {
        event.target.childNodes.forEach(function(childElement) {
          if (childElement.nodeName === "title") {
            event.target.titleExpando = childElement.innerHTML;
            childElement.remove();
          }
        });
      }
      var target = this.computedTarget || event.target;
      var titleResult = this.getTitle(target);
      if (!titleResult.title) {
        if (this.computedOpen) {
          this.onClose(event);
        }
        return;
      }
      if (titleResult.element) {
        titleResult.element.titleExpando = titleResult.title;
        titleResult.element.title = "";
      }
      this.willOpen = true;
      if (!this.$props.openDelay) {
        this.currentTargetElement = target;
        this.currentOpen = true;
        this.title = titleResult.title;
        this.setUpdateInterval();
      } else {
        if (canUseDOM) {
          this.openTimeoutId = window.setTimeout(function() {
            if (_this.willOpen) {
              _this.currentTargetElement = target;
              _this.currentOpen = true;
              _this.title = titleResult.title;
              _this.setUpdateInterval();
            }
          }, this.$props.openDelay);
        }
      }
      if (this.title !== titleResult.title) {
        this.$emit("open", {
          event,
          compoponent: this
        });
      }
    },
    setUpdateInterval: function setUpdateInterval() {
      if (this.$props.updateInterval) {
        this.updateIntervalId = setInterval(this.onIntervalUpdate, this.$props.updateInterval);
      }
    },
    onIntervalUpdate: function onIntervalUpdate() {
      var target = this.computedTarget;
      if (!target) {
        return;
      }
      if (target.parentElement === null) {
        this.onClose({
          target
        });
      } else {
        this.showToolTip({
          target
        });
      }
    },
    resetPosition: function resetPosition() {
      if (this.element) {
        var position = this.setPosition(this.element);
        if (this.$props.updatePosition) {
          position = this.$props.updatePosition({
            element: this.element,
            targetElement: this.computedTarget,
            mouseTop: this.top,
            mouseLeft: this.left,
            anchorElement: this.$props.anchorElement,
            position: this.$props.position,
            target: this,
            defaultPosition: position
          });
        }
        this.element.style.left = position.left + "px";
        this.element.style.top = position.top + "px";
      }
    },
    isVisible: function isVisible(element) {
      return !this.$props.filter || this.$props.filter(element);
    },
    setPosition: function setPosition(element) {
      var target = this.parentTitle ? this.getTitle(this.computedTarget).element : this.computedTarget;
      var domRect = getDomRect(target);
      var left = getLeftPosition(this.left, element.offsetWidth, domRect, this.$props.anchorElement, this.$props.position);
      var top = getTopPosition(this.top, domRect, element.offsetHeight, this.$props.anchorElement, this.$props.position);
      return {
        left,
        top
      };
    },
    getTitle: function getTitle(element) {
      while (element) {
        if (element.getAttribute("title") !== null || element.titleExpando) {
          var title = element.getAttribute("title") || element.titleExpando;
          return {
            title,
            element
          };
        }
        element = this.$props.parentTitle && element.parentElement || null;
      }
      return {
        title: "",
        element
      };
    },
    calloutClassName: function calloutClassName() {
      switch (this.$props.position) {
        case "bottom":
          return "k-callout k-callout-n";
        case "left":
          return "k-callout k-callout-e";
        case "right":
          return "k-callout k-callout-w";
        case "top":
          return "k-callout k-callout-s";
        default:
          return canUseDOM && this.top < window.innerHeight / 2 ? "k-callout k-callout-n" : "k-callout k-callout-s";
      }
    },
    getCurrentZIndex: function getCurrentZIndex() {
      return this.kCurrentZIndex ? this.kCurrentZIndex : DEFAULT_TOOLTIP_ZINDEX;
    }
  }
};
var Tooltip = TooltipVue2;
export {
  Tooltip,
  TooltipVue2
};
//# sourceMappingURL=@progress_kendo-vue-tooltip.js.map
