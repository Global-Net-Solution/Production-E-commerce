import {
  animate,
  cancelAnimation
} from "./chunk-XR7RAY3Q.js";
import {
  classNames,
  getDir,
  getListeners,
  getRef,
  getTabIndex,
  getTemplate,
  isRtl,
  setRef,
  templateRendering,
  validatePackage
} from "./chunk-ZERL3UN2.js";
import {
  vue_runtime_esm_bundler_exports
} from "./chunk-ON7STAJ4.js";

// node_modules/@progress/kendo-vue-progressbars/dist/es/common/constants.js
var MIN_RATIO = 1e-5;
var LABEL_DECIMALS = 3;
var DEFAULT_ANIMATION_DURATION = 400;
var NO_ANIMATION = 0;

// node_modules/@progress/kendo-vue-progressbars/dist/es/common/utils.js
var truncateNumber = function(value2) {
  var numberParts = value2.toString().split(".");
  return numberParts.length === 1 ? "".concat(numberParts[0]) : "".concat(numberParts[0], ".").concat(numberParts[1].substr(0, LABEL_DECIMALS));
};
var calculatePercentage = function(min, max, value2) {
  var onePercent = Math.abs((max - min) / 100);
  return Math.abs((value2 - min) / onePercent);
};
var updateProgress = function(progressRef, progressWrapRef, percentage, isVertical2) {
  var progressPercentage = Math.max(percentage, 0.01);
  var progressWrapPercentage = 100 / progressPercentage * 100;
  if (progressRef && progressWrapRef) {
    progressRef.style.width = !isVertical2 ? "".concat(progressPercentage, "%") : "100%";
    progressWrapRef.style.width = !isVertical2 ? "".concat(progressWrapPercentage, "%") : "100%";
    progressRef.style.height = isVertical2 ? "".concat(progressPercentage, "%") : "100%";
    progressWrapRef.style.height = isVertical2 ? "".concat(progressWrapPercentage, "%") : "100%";
  }
};
var calculateRatio = function(min, max, value2) {
  return Math.max((value2 - min) / (max - min), MIN_RATIO);
};

// node_modules/@progress/kendo-vue-progressbars/dist/es/package-metadata.js
var packageMetadata = {
  name: "@progress/kendo-vue-progressbars",
  productName: "Kendo UI for Vue",
  productCodes: ["KENDOUIVUE", "KENDOUICOMPLETE"],
  publishDate: 1718172682,
  version: "",
  licensingDocsUrl: "https://www.telerik.com/kendo-vue-ui/my-license/?utm_medium=product&utm_source=kendovue&utm_campaign=kendo-ui-vue-purchase-license-keys-warning"
};

// node_modules/@progress/kendo-vue-progressbars/dist/es/progressbar/ProgressBar.js
var allVue = vue_runtime_esm_bundler_exports;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === "3";
var ProgressBarVue2 = {
  name: "KendoProgressBar",
  props: {
    animation: {
      type: [Boolean, Object],
      default: false
    },
    disabled: {
      type: Boolean,
      default: false
    },
    reverse: {
      type: Boolean,
      default: false
    },
    label: String,
    labelRender: [String, Object, Function],
    labelVisible: {
      type: Boolean,
      default: true
    },
    labelPlacement: {
      type: String,
      default: void 0,
      validator: function validator(value2) {
        return ["start", "center", "end"].includes(value2);
      }
    },
    dir: {
      type: String,
      default: void 0
    },
    max: {
      type: Number,
      default: 100
    },
    min: {
      type: Number,
      default: 0
    },
    value: {
      type: Number,
      default: 0
    },
    orientation: {
      type: String,
      default: "horizontal",
      validator: function validator2(value2) {
        return ["horizontal", "vertical"].includes(value2);
      }
    },
    tabIndex: Number,
    emptyStyle: Object,
    emptyClassName: String,
    progressStyle: Object,
    progressClassName: String,
    ariaLabel: String
  },
  created: function created() {
    validatePackage(packageMetadata);
    this.currentDir = this.$props.dir;
  },
  mounted: function mounted() {
    this._progressStatus = getRef(this, "progressStatus");
    this._progressStatusWrap = getRef(this, "progressStatusWrap");
    this.currentDir = this.$props.dir !== void 0 ? this.$props.dir : isRtl(this.$el) ? "rtl" : "ltr";
    this.animationFrame = animate({
      duration: this.animationDuration,
      onStart: this.handleStart,
      onUpdate: this.handleUpdate,
      onEnd: this.handleEnd
    });
  },
  destroyed: !!isV3 ? void 0 : function() {
    cancelAnimation(this.animationFrame);
  },
  // @ts-ignore
  unmounted: function unmounted() {
    cancelAnimation(this.animationFrame);
  },
  data: function data() {
    return {
      currentDir: void 0
    };
  },
  watch: {
    value: function value(_newValue, oldValue) {
      this.prevValue = oldValue;
      this.animationFrame = animate({
        duration: this.animationDuration,
        onStart: this.handleStart,
        onUpdate: this.handleUpdate,
        onEnd: this.handleEnd
      });
    }
  },
  computed: {
    wrapperClass: function wrapperClass() {
      var _a = this.$props, disabled = _a.disabled, reverse = _a.reverse, orientation = _a.orientation, value2 = _a.value;
      var isVertical2 = orientation === "vertical";
      var indeterminateProp = value2 === null;
      return {
        "k-progressbar": true,
        "k-progressbar-horizontal": !isVertical2,
        "k-progressbar-vertical": isVertical2,
        "k-progressbar-reverse": reverse,
        "k-progressbar-indeterminate": indeterminateProp,
        "k-disabled": disabled
      };
    },
    isVertical: function isVertical() {
      return this.orientation === "vertical";
    },
    animationDuration: function animationDuration() {
      var animation = this.$props.animation;
      return typeof animation !== "boolean" && animation !== void 0 ? animation.duration : animation ? DEFAULT_ANIMATION_DURATION : NO_ANIMATION;
    }
  },
  // @ts-ignore
  setup: !isV3 ? void 0 : function() {
    var v3 = !!isV3;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props, disabled = _a.disabled, labelVisible = _a.labelVisible, labelPlacement = _a.labelPlacement, max = _a.max, min = _a.min, tabIndex = _a.tabIndex, emptyStyle = _a.emptyStyle, emptyClassName = _a.emptyClassName, progressStyle = _a.progressStyle, progressClassName = _a.progressClassName;
    var value2 = this.$props.value || 0;
    var indeterminateProp = this.$props.value === null;
    var formattedLabel = truncateNumber(value2);
    var labelProps = {
      value: value2
    };
    var label = this.$props.labelRender ? templateRendering.call(this, this.$props.labelRender, getListeners.call(this)) : void 0;
    var labelDefaultRendering = h("span", {
      "class": "k-progress-status"
    }, formattedLabel);
    var toggleButtonRendering = getTemplate.call(this, {
      h,
      template: label,
      defaultRendering: labelDefaultRendering,
      additionalProps: labelProps
    });
    var renderLabel = labelVisible ? this.$props.label ? h("span", {
      "class": "k-progress-status"
    }, [this.$props.label]) : toggleButtonRendering : void 0;
    var positionClasses = classNames("k-progress-status-wrap", {
      "k-progress-start": labelPlacement === "start",
      "k-progress-center": labelPlacement === "center",
      "k-progress-end": labelPlacement === "end" || labelPlacement === void 0
    });
    return h("div", {
      "class": this.wrapperClass,
      dir: this.currentDir,
      attrs: this.v3 ? void 0 : {
        dir: this.currentDir,
        tabindex: getTabIndex(tabIndex, disabled),
        role: "progressbar",
        "aria-valuemin": min,
        "aria-valuemax": max,
        "aria-valuenow": indeterminateProp ? void 0 : value2,
        "aria-disabled": disabled,
        "aria-label": this.$props.ariaLabel
      },
      tabindex: getTabIndex(tabIndex, disabled),
      role: "progressbar",
      "aria-valuemin": min,
      "aria-valuemax": max,
      "aria-valuenow": indeterminateProp ? void 0 : value2,
      "aria-disabled": disabled,
      "aria-label": this.$props.ariaLabel
    }, [h("span", {
      "class": positionClasses + (emptyClassName ? " " + emptyClassName : ""),
      style: emptyStyle
    }, [renderLabel]), h("div", {
      "class": "k-progressbar-value k-selected",
      style: progressStyle,
      ref: setRef(this, "progressStatus")
    }, [h("span", {
      "class": positionClasses + (progressClassName ? " " + progressClassName : ""),
      ref: setRef(this, "progressStatusWrap")
    }, [renderLabel])])]);
  },
  methods: {
    focus: function focus() {
      if (this.$el) {
        this.$el.focus();
      }
    },
    progressStatusElement: function progressStatusElement() {
      return this._progressStatus;
    },
    progressStatusWrapElement: function progressStatusWrapElement() {
      return this._progressStatusWrap;
    },
    handleStart: function handleStart() {
      var percentage = calculatePercentage(this.min, this.max, this.prevValue);
      updateProgress(this._progressStatus, this._progressStatusWrap, percentage, this.isVertical);
    },
    handleUpdate: function handleUpdate(progress) {
      var percentage = calculatePercentage(this.min, this.max, this.prevValue + (this.value - this.prevValue) * progress);
      updateProgress(this._progressStatus, this._progressStatusWrap, percentage, this.isVertical);
    },
    handleEnd: function handleEnd() {
      var percentage = calculatePercentage(this.min, this.max, this.value);
      updateProgress(this._progressStatus, this._progressStatusWrap, percentage, this.isVertical);
    }
  }
};
var ProgressBar = ProgressBarVue2;

// node_modules/@progress/kendo-vue-progressbars/dist/es/chunkprogressbar/ChunkProgressBar.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var allVue2 = vue_runtime_esm_bundler_exports;
var gh2 = allVue2.h;
var isV32 = allVue2.version && allVue2.version[0] === "3";
var ChunkProgressBarVue2 = {
  name: "KendoChunkProgressBar",
  props: {
    chunkCount: {
      type: Number,
      default: 5
    },
    ariaLabel: String,
    disabled: Boolean,
    reverse: {
      type: Boolean,
      default: false
    },
    max: {
      type: Number,
      default: 100
    },
    min: {
      type: Number,
      default: 0
    },
    value: {
      type: Number,
      default: 0
    },
    tabIndex: Number,
    emptyStyle: Object,
    emptyClassName: String,
    progressStyle: Object,
    progressClassName: String,
    orientation: {
      type: String,
      default: "horizontal",
      validator: function validator3(value2) {
        return ["horizontal", "vertical"].includes(value2);
      }
    }
  },
  created: function created2() {
    validatePackage(packageMetadata);
  },
  data: function data2() {
    return {
      currentDir: void 0
    };
  },
  mounted: function mounted2() {
    this.currentDir = getDir(this.$el, this.$props.dir);
  },
  // @ts-ignore
  setup: !isV32 ? void 0 : function() {
    var v3 = !!isV32;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render2(createElement) {
    var h = gh2 || createElement;
    var _a = this.$props, chunkCount = _a.chunkCount, disabled = _a.disabled, orientation = _a.orientation, min = _a.min, max = _a.max, reverse = _a.reverse, tabIndex = _a.tabIndex, emptyStyle = _a.emptyStyle, emptyClassName = _a.emptyClassName, progressStyle = _a.progressStyle, progressClassName = _a.progressClassName;
    var value2 = this.$props.value;
    var indeterminateProp = this.$props.value === null;
    var isVertical2 = orientation === "vertical";
    var renderChunks = function renderChunks2(count) {
      var chunks = [];
      var chunkSizePercentage = 100 / count + "%";
      var progressRatio = calculateRatio(min, max, value2);
      var completedChunksCount = Math.floor(progressRatio * count);
      var completedChunks = Array(count).fill(false);
      var reverseCompletedChunks = isVertical2 && !reverse || !isVertical2 && reverse;
      for (var i = 0; i < completedChunksCount; i++) {
        completedChunks[i] = true;
      }
      for (var i = 0; i < count; ++i) {
        var isComplete = completedChunks[i];
        var classes = isComplete ? progressClassName : emptyClassName;
        var layoutStyles = {
          width: !isVertical2 ? chunkSizePercentage : void 0,
          height: isVertical2 ? chunkSizePercentage : void 0
        };
        var styles = isComplete ? progressStyle : emptyStyle;
        var mergedStyles = __assign(__assign({}, layoutStyles), styles);
        chunks.push(h("li", {
          key: i,
          "class": classNames("k-progressbar-chunk", {
            "k-first": i === 0,
            "k-last": i === count - 1,
            "k-selected": isComplete
          }, classes),
          style: mergedStyles
        }));
      }
      return chunks;
    };
    return h("div", {
      "class": classNames("k-progressbar", "k-chunk-progressbar", {
        "k-progressbar-horizontal": !isVertical2,
        "k-progressbar-vertical": isVertical2,
        "k-progressbar-reverse": reverse,
        "k-progressbar-indeterminate": indeterminateProp,
        "k-disabled": disabled
      }),
      dir: this.currentDir,
      attrs: this.v3 ? void 0 : {
        dir: this.currentDir,
        tabIndex: getTabIndex(tabIndex, disabled),
        role: "progressbar",
        "aria-label": this.$props.ariaLabel,
        "aria-valuemin": min,
        "aria-valuemax": max,
        "aria-valuenow": indeterminateProp ? void 0 : value2,
        "aria-disabled": disabled
      },
      tabIndex: getTabIndex(tabIndex, disabled),
      role: "progressbar",
      "aria-label": this.$props.ariaLabel,
      "aria-valuemin": min,
      "aria-valuemax": max,
      "aria-valuenow": indeterminateProp ? void 0 : value2,
      "aria-disabled": disabled
    }, [h("ul", {
      "class": "k-progressbar-chunks k-reset"
    }, [renderChunks.call(this, chunkCount)])]);
  },
  methods: {
    focusElement: function focusElement() {
      if (this.$el) {
        this.$el.focus();
      }
    }
  }
};
var ChunkProgressBar = ChunkProgressBarVue2;

export {
  ProgressBarVue2,
  ProgressBar,
  ChunkProgressBarVue2,
  ChunkProgressBar
};
//# sourceMappingURL=chunk-LJI3DIPO.js.map
