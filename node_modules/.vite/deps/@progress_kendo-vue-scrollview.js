import {
  chevronLeftIcon,
  chevronRightIcon
} from "./chunk-47B67J5V.js";
import {
  Icon,
  Keys,
  classNames,
  getListeners,
  getRef,
  getTemplate,
  isRtl,
  setRef,
  templateRendering,
  validatePackage
} from "./chunk-PN6HPW3N.js";
import {
  vue_runtime_esm_bundler_exports
} from "./chunk-VQMFKZS3.js";
import "./chunk-PZ5AY32C.js";

// node_modules/@progress/kendo-vue-scrollview/dist/es/package-metadata.js
var packageMetadata = {
  name: "@progress/kendo-vue-scrollview",
  productName: "Kendo UI for Vue",
  productCodes: ["KENDOUIVUE", "KENDOUICOMPLETE"],
  publishDate: 1718173138,
  version: "",
  licensingDocsUrl: "https://www.telerik.com/kendo-vue-ui/my-license/?utm_medium=product&utm_source=kendovue&utm_campaign=kendo-ui-vue-purchase-license-keys-warning"
};

// node_modules/@progress/kendo-vue-scrollview/dist/es/ScrollView.js
var allVue = vue_runtime_esm_bundler_exports;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === "3";
var ScrollViewVue2 = {
  name: "KendoScrollView",
  props: {
    activeView: {
      type: Number,
      default: 1
    },
    dataItems: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    arrows: {
      type: Boolean,
      default: true
    },
    automaticViewChange: {
      type: Boolean,
      default: true
    },
    automaticViewChangeInterval: {
      type: Number,
      default: 5e3
    },
    content: [Object, String, Function],
    dir: String,
    endless: Boolean,
    pageable: {
      type: Boolean,
      default: true
    },
    pagerOverlay: {
      type: String,
      default: "none"
    }
  },
  created: function created() {
    validatePackage(packageMetadata);
    this.timeoutRef = null;
  },
  mounted: function mounted() {
    this.wrapElement = getRef(this, "wrapElement");
    this.currentDir = this.$props.dir !== void 0 ? this.$props.dir : isRtl(this.$el) ? "rtl" : "ltr";
    this.runAutomaticChange();
  },
  updated: function updated() {
    var viewsCount = this.dataItems.length;
    if (this.wrapElement) {
      this.wrapElement.style.setProperty("--kendo-scrollview-views", "".concat(viewsCount));
      this.wrapElement.style.setProperty("--kendo-scrollview-current", "".concat(this.active));
    }
    this.runAutomaticChange();
  },
  data: function data() {
    return {
      active: this.activeView || 1,
      currentDir: void 0
    };
  },
  computed: {
    scrollViewClasses: function scrollViewClasses() {
      return {
        "k-scrollview": true,
        "k-scrollview-light": this.pagerOverlay === "light",
        "k-scrollview-dark": this.pagerOverlay === "dark"
      };
    },
    displayLeftArrow: function displayLeftArrow() {
      var isNotBorderItem;
      if (this.isRtl) {
        isNotBorderItem = this.active < this.dataItems.length;
      } else {
        isNotBorderItem = this.active > 1;
      }
      return (this.endless || isNotBorderItem) && this.dataItems.length > 0;
    },
    displayRightArrow: function displayRightArrow() {
      var isNotBorderItem;
      if (this.isRtl) {
        isNotBorderItem = this.active > 1;
      } else {
        isNotBorderItem = this.active < this.dataItems.length;
      }
      return (this.endless || isNotBorderItem) && this.dataItems.length > 0;
    },
    isRtl: function isRtl2() {
      return this.currentDir === "rtl";
    }
  },
  // @ts-ignore
  setup: !isV3 ? void 0 : function() {
    var v3 = !!isV3;
    return {
      v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props, pageable = _a.pageable, arrows = _a.arrows, content = _a.content;
    var viewsCount = this.dataItems.length;
    var allContent = this.dataItems.map(function(item, index) {
      var contentTemplate = templateRendering.call(this, item.content || content, getListeners.call(this));
      var contentRender = getTemplate.call(this, {
        h,
        template: contentTemplate,
        defaultRendering: null,
        additionalProps: {
          item,
          items: this.dataItems
        }
      });
      return h("div", {
        "class": "k-scrollview-view",
        "aria-hidden": this.active === index + 1 ? false : true,
        attrs: this.v3 ? void 0 : {
          "aria-hidden": this.active === index + 1 ? false : true
        }
      }, [contentRender]);
    }, this);
    return h("div", {
      "class": this.scrollViewClasses,
      tabindex: 0,
      attrs: this.v3 ? void 0 : {
        tabindex: 0,
        dir: this.currentDir
      },
      dir: this.currentDir,
      onKeydown: this.handleKeyDown,
      on: this.v3 ? void 0 : {
        "keydown": this.handleKeyDown
      }
    }, [h("div", {
      "class": "k-scrollview-wrap k-scrollview-animate",
      style: "--kendo-scrollview-views:".concat(viewsCount, "; --kendo-scrollview-current:").concat(this.active, ";"),
      ref: setRef(this, "wrapElement")
    }, [allContent]), h("div", {
      "class": "k-scrollview-elements"
    }, [arrows && [this.displayLeftArrow && h("span", {
      "class": "k-scrollview-prev",
      "aria-label": "previous",
      attrs: this.v3 ? void 0 : {
        "aria-label": "previous"
      },
      onClick: this.handlePrevClick,
      on: this.v3 ? void 0 : {
        "click": this.handlePrevClick
      }
    }, [h(Icon, {
      name: this.isRtl ? "chevron-right" : "chevron-left",
      attrs: this.v3 ? void 0 : {
        name: this.isRtl ? "chevron-right" : "chevron-left",
        icon: this.isRtl ? chevronRightIcon : chevronLeftIcon,
        size: "xxxlarge"
      },
      icon: this.isRtl ? chevronRightIcon : chevronLeftIcon,
      size: "xxxlarge"
    })]), this.displayRightArrow && h("span", {
      "class": "k-scrollview-next",
      "aria-label": "next",
      attrs: this.v3 ? void 0 : {
        "aria-label": "next"
      },
      onClick: this.handleNextClick,
      on: this.v3 ? void 0 : {
        "click": this.handleNextClick
      }
    }, [h(Icon, {
      name: this.isRtl ? "chevron-left" : "chevron-right",
      attrs: this.v3 ? void 0 : {
        name: this.isRtl ? "chevron-left" : "chevron-right",
        icon: this.isRtl ? chevronLeftIcon : chevronRightIcon,
        size: "xxxlarge"
      },
      icon: this.isRtl ? chevronLeftIcon : chevronRightIcon,
      size: "xxxlarge"
    })])], pageable && h("div", {
      "class": "k-scrollview-nav-wrap"
    }, [h("ul", {
      "class": "k-scrollview-nav"
    }, [this.dataItems.map(function(_, index) {
      var _this = this;
      return h("li", {
        "class": classNames("k-link", {
          "k-primary": this.active === index + 1
        }),
        key: index + 1,
        onClick: function onClick() {
          return _this.setActive(index + 1);
        },
        on: this.v3 ? void 0 : {
          "click": function onClick() {
            return _this.setActive(index + 1);
          }
        }
      });
    }, this)])])])]);
  },
  methods: {
    runAutomaticChange: function runAutomaticChange() {
      if (this.automaticViewChange) {
        this.resetTimeout();
        var that_1 = this;
        var prevIndex_1 = this.active;
        this.timeoutRef = setTimeout(function() {
          that_1.setActive(prevIndex_1 === that_1.dataItems.length ? that_1.endless ? 1 : prevIndex_1 : prevIndex_1 + 1);
        }, this.automaticViewChangeInterval);
      }
    },
    resetTimeout: function resetTimeout() {
      if (this.timeoutRef) {
        clearTimeout(this.timeoutRef);
      }
    },
    setActive: function setActive(value) {
      this.active = value;
    },
    focusElement: function focusElement() {
      if (this.$el) {
        this.$el.focus();
      }
    },
    prev: function prev() {
      if (!this.endless) {
        if (this.active > 1) {
          this.setActive(this.active - 1);
        }
      } else {
        this.active > 1 ? this.setActive(this.active - 1) : this.setActive(this.dataItems.length);
      }
    },
    next: function next() {
      if (!this.endless) {
        if (this.active < this.dataItems.length) {
          this.setActive(this.active + 1);
        }
      } else {
        this.active < this.dataItems.length ? this.setActive(this.active + 1) : this.setActive(1);
      }
    },
    handlePrevClick: function handlePrevClick() {
      if (!this.isRtl) {
        this.prev();
      } else {
        this.next();
      }
    },
    handleNextClick: function handleNextClick() {
      if (!this.isRtl) {
        this.next();
      } else {
        this.prev();
      }
    },
    handleKeyDown: function handleKeyDown(event) {
      switch (event.keyCode) {
        case Keys.left:
          event.preventDefault();
          if (!this.isRtl) {
            this.prev();
          } else {
            this.next();
          }
          break;
        case Keys.right:
          event.preventDefault();
          if (!this.isRtl) {
            this.next();
          } else {
            this.prev();
          }
          break;
        default:
          break;
      }
    }
  }
};
var ScrollView = ScrollViewVue2;
export {
  ScrollView,
  ScrollViewVue2
};
//# sourceMappingURL=@progress_kendo-vue-scrollview.js.map
