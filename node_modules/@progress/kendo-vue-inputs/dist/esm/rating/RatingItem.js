// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var isV3 = allVue.version && allVue.version[0] === '3';
var ref = allVue.ref;
import { Icon, classNames, getIconName, getTemplate } from '@progress/kendo-vue-common';
import { starIcon, starOutlineIcon } from '@progress/kendo-svg-icons';
/**
 * @hidden
 */
var RatingItemVue2 = {
  name: 'KendoReactRatingItem',
  // @ts-ignore
  emits: {
    'click': null,
    'keydown': null,
    'focus': null,
    'blur': null,
    'mouseenter': null,
    'mouseleave': null,
    'mousemove': null
  },
  props: {
    id: String,
    tabIndex: Number,
    half: Boolean,
    title: String,
    icon: Object,
    selected: Boolean,
    hovered: Boolean,
    onClick: Function,
    onKeyDown: Function,
    onFocus: Function,
    onBlur: Function,
    onMouseEnter: Function,
    svgIconOutline: Object,
    svgIcon: Object,
    haveSelectedValue: Boolean,
    item: String,
    itemTemplate: Object,
    dir: {
      type: String,
      default: 'ltr',
      validator: function validator(value) {
        return [null, 'ltr', 'rtl'].includes(value);
      }
    },
    value: {
      type: Number,
      required: true
    }
  },
  // @ts-ignore
  setup: !isV3 ? undefined : function () {
    var v3 = !!isV3;
    var inputRef = ref(null);
    return {
      v3: v3,
      inputRef: inputRef
    };
  },
  computed: {
    wrapperClass: function wrapperClass() {
      return classNames("k-rating-item".concat(this.$props.dir === 'rtl' ? ' k-rtl' : '').concat(this.$props.haveSelectedValue || this.$props.selected ? ' k-selected' : '').concat(this.$props.hovered ? ' k-hover' : ''));
    }
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
      id = _a.id,
      dir = _a.dir,
      half = _a.half,
      tabIndex = _a.tabIndex,
      title = _a.title,
      icon = _a.icon,
      svgIcon = _a.svgIcon,
      svgIconOutline = _a.svgIconOutline,
      hovered = _a.hovered,
      selected = _a.selected,
      haveSelectedValue = _a.haveSelectedValue,
      item = _a.item,
      itemTemplate = _a.itemTemplate;
    var itemRender = getTemplate.call(this, {
      h: h,
      template: itemTemplate,
      additionalProps: {
        dir: dir,
        half: half,
        title: title,
        icon: icon,
        svgIcon: svgIcon,
        svgIconOutline: svgIconOutline,
        hovered: hovered,
        selected: selected,
        haveSelectedValue: haveSelectedValue
      },
      additionalListeners: {
        onclick: this.handleClick,
        onkeydown: this.handleKeyDown,
        onfocus: this.handleFocus,
        onblur: this.handleBlur,
        onmouseenter: this.handleMouseEnter,
        onmouseleave: this.handleMouseLeave,
        onmousemove: this.handleMouseMove
      }
    });
    return h("span", {
      id: id,
      attrs: this.v3 ? undefined : {
        id: id,
        dir: dir,
        "data-half": half,
        tabIndex: tabIndex,
        title: title
      },
      dir: dir,
      "data-half": half,
      tabIndex: tabIndex,
      title: title,
      "class": this.wrapperClass,
      onClick: this.handleClick,
      on: this.v3 ? undefined : {
        "click": this.handleClick,
        "keyDown": this.handleKeyDown,
        "focus": this.handleFocus,
        "blur": this.handleBlur,
        "mouseenter": this.handleMouseEnter,
        "mouseleave": this.handleMouseLeave,
        "mousemove": this.handleMouseMove
      },
      onKeyDown: this.handleKeyDown,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      onMouseenter: this.handleMouseEnter,
      onMouseleave: this.handleMouseLeave,
      onMousemove: this.handleMouseMove
    }, [item ? itemRender : [half && h("span", {
      "class": 'k-rating-precision-complement'
    }, [!(icon || svgIconOutline) && h(Icon, {
      name: "star-outline",
      attrs: this.v3 ? undefined : {
        name: "star-outline",
        icon: starOutlineIcon,
        size: 'xlarge'
      },
      icon: starOutlineIcon,
      style: dir === 'rtl' ? {
        clipPath: 'inset(0 50% 0 0)'
      } : {
        clipPath: 'inset(0 0 0 50%)'
      },
      size: 'xlarge'
    }), (icon || svgIconOutline) && h(Icon, {
      name: getIconName("".concat(icon, "-outline")),
      attrs: this.v3 ? undefined : {
        name: getIconName("".concat(icon, "-outline")),
        icon: svgIconOutline,
        size: 'xlarge'
      },
      icon: svgIconOutline,
      size: 'xlarge'
    })]), half && h("span", {
      "class": 'k-rating-precision-part'
    }, [!(icon || svgIcon) && h(Icon, {
      name: "star",
      attrs: this.v3 ? undefined : {
        name: "star",
        icon: starIcon,
        size: 'xlarge'
      },
      icon: starIcon,
      style: dir === 'rtl' ? {
        clipPath: 'inset(0 0 0 50%)'
      } : {
        clipPath: 'inset(0 50% 0 0)'
      },
      size: 'xlarge'
    }), (icon || svgIcon) && h(Icon, {
      name: icon ? getIconName(icon) : undefined,
      attrs: this.v3 ? undefined : {
        name: icon ? getIconName(icon) : undefined,
        icon: svgIcon,
        size: 'xlarge'
      },
      icon: svgIcon,
      size: 'xlarge'
    })]), half && h("span", {
      style: {
        width: '24px',
        height: '24px',
        display: 'block'
      }
    }), !half && (!(icon || svgIcon) && (hovered || selected && !hovered) && h(Icon, {
      name: "star",
      attrs: this.v3 ? undefined : {
        name: "star",
        icon: starIcon,
        size: 'xlarge'
      },
      icon: starIcon,
      size: 'xlarge'
    }) || !(icon || svgIcon) && !hovered && !selected && h(Icon, {
      name: "star-outline",
      attrs: this.v3 ? undefined : {
        name: "star-outline",
        icon: starOutlineIcon,
        size: 'xlarge'
      },
      icon: starOutlineIcon,
      size: 'xlarge'
    }) || (icon || svgIcon) && (hovered || selected && !hovered) && h(Icon, {
      name: icon,
      attrs: this.v3 ? undefined : {
        name: icon,
        icon: svgIcon,
        size: 'xlarge'
      },
      icon: svgIcon,
      size: 'xlarge'
    }) || (icon || svgIcon) && !hovered && h(Icon, {
      name: getIconName("".concat(icon, "-outline")),
      attrs: this.v3 ? undefined : {
        name: getIconName("".concat(icon, "-outline")),
        icon: svgIconOutline,
        size: 'xlarge'
      },
      icon: svgIconOutline,
      size: 'xlarge'
    }))]]);
  },
  methods: {
    handleClick: function handleClick(event) {
      this.$emit('click', {
        value: this.$props.value,
        target: this.$el,
        event: event
      });
    },
    handleMouseLeave: function handleMouseLeave(event) {
      this.$emit('mouseleave', {
        target: this.$el,
        event: event
      });
    },
    handleMouseMove: function handleMouseMove(event) {
      this.$emit('mousemove', {
        value: this.$props.value,
        target: this.$el,
        event: event
      });
    },
    handleMouseEnter: function handleMouseEnter(event) {
      this.$emit('mouseenter', {
        target: this.$el,
        event: event
      });
    },
    handleKeyDown: function handleKeyDown(event) {
      this.$emit('keydown', event);
    },
    handleFocus: function handleFocus(event) {
      this.$emit('focus', event);
    },
    handleBlur: function handleBlur(event) {
      this.$emit('blur', event);
    }
  }
};
var RatingItem = RatingItemVue2;
export { RatingItem, RatingItemVue2 };