import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from '../additionalTypes';
import { RatingItemMouseEvent } from './interfaces/RatingEvents';
import { RatingProps } from './interfaces/RatingProps';
import { RatingActionDispatch } from './utils/rating-reducer';
declare type DefaultData<V> = object | ((this: V) => RatingData);
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
/**
 * @hidden
 */
export interface RatingData {
    defaultValue: number;
}
/**
 * @hidden
 */
export interface RatingState {
    inputRef: any;
}
/**
 * @hidden
 */
export interface RatingMethods {
    [key: string]: any;
    handleChange: (newValue: number, e: PointerEvent) => void;
    handleKeyDown: (e: KeyboardEvent) => void;
    handleFocus: (e: FocusEvent) => void;
    handleBlur: (e: FocusEvent) => void;
    handleItemClick: (eventData: RatingItemMouseEvent) => void;
    handleMouseLeave: (eventData: RatingItemMouseEvent) => void;
    handleMouseMove: (eventData: RatingItemMouseEvent) => void;
    dispatchValue: (action: RatingActionDispatch) => void;
    dispatchHover: (action: RatingActionDispatch) => void;
}
/**
 * @hidden
 */
export interface RatingComputed {
    [key: string]: any;
    base: number;
}
/**
 * @hidden
 */
export interface RatingHandle {
}
/**
 * @hidden
 */
export interface RatingAllMethods extends Vue2type, RatingMethods, RatingComputed, RatingState {
}
/**
 * @hidden
 */
declare let RatingVue2: ComponentOptions<RatingAllMethods, DefaultData<RatingData>, DefaultMethods<RatingAllMethods>, RatingComputed, RecordPropsDefinition<RatingProps>>;
/**
 * @hidden
 */
declare const Rating: DefineComponent<RatingProps, any, RatingData, RatingComputed, RatingMethods, {}, {}, {}, string, RatingProps, RatingProps, {}>;
export { Rating, RatingVue2 };
